@page "/LoginRegister"
@using ShopApplication.Infrastructure.Identity
@using ShopApplication.Types
@using ShopApplication.Infrastructure.Http
@using ShopApplication.Types.Identity
@using ShopApplication.Types.Optionals
@inherits PageBase

<div style="max-width: 360px" class="mt-5 mx-auto text-center">
    <img class="mb-4" src="/Images/Logo.svg" alt="blazor" width="72" height="57">

    <EditForm Model="_login" OnValidSubmit="@(async () => await Login() )">
        <h1 class="h3 mb-3 fw-normal">Please Sign In</h1>
        <DataAnnotationsValidator/>
        <div class="form-floating">
            <InputText type="name" class="form-control" id="emailOrUsername" @bind-Value="@_login.EmailOrUsername">></InputText>
            <label for="emailOrUsername">Email or Username</label>
        </div>
        <div class="form-floating">
            <InputText type="password" class="form-control" id="password" @bind-Value="@_login.Password"></InputText>
            <label for="password">Password</label>
        </div>
        <button class="w-100 btn btn-lg btn-primary" type="submit">Sign in</button>
    </EditForm>

    <span class="my-5 d-block text-muted">- Or -</span>

    <EditForm Model="_register" OnValidSubmit="@(async () => await Register() )">
        <h1 class="h3 mb-3 fw-normal">Register</h1>
        <DataAnnotationsValidator/>
        <div class="form-floating">
            <InputText type="name" class="form-control" id="username" @bind-Value="@_register.Username"></InputText>
            <ValidationMessage For="@(() => _register.Username)"/>
            <label for="emailOrUsername">Username</label>
        </div>
        <div class="form-floating">
            <InputText type="email" class="form-control" id="email" @bind-Value="@_register.Email"></InputText>
            <ValidationMessage For="@(() => _register.Email)"/>
            <label for="email">Email</label>
        </div>
        <div class="form-floating">
            <InputText type="password" class="form-control" id="registerPassword" @bind-Value="@_register.Password"></InputText>
            <ValidationMessage For="@(() => _register.Password)"/>
            <label for="registerPassword">Password</label>
        </div>
        <div class="form-floating">
            <InputText type="password" class="form-control" id="confirmPassword" @bind-Value="@_register.PasswordConfirm"></InputText>
            <ValidationMessage For="@(() => _register.PasswordConfirm)"/>
            <label for="confirmPassword">Confirm Password</label>
        </div>
        <button class="w-100 btn btn-lg btn-primary" type="submit">Register</button>
    </EditForm>

    <AlertMessage Page="@this"></AlertMessage>
</div>

@code {
    [Inject] NavigationManager Navigation { get; init; } = default!;
    [Inject] IIdentityManager IdentityManager { get; init; } = default!;
    [Inject] IHttpService Http { get; init; } = default!;
    //[Inject] CartManager CartManager { get; init; } = default!;

    readonly Login _login = new();
    readonly Register _register = new();

    async Task Login()
    {
        Val<LoginResponse> loginResult = await Http.TryGetValRequest<LoginResponse>( "" );

        if (!loginResult.IsSuccess()) {
            PushAlert( AlertType.Danger, loginResult.PrintDetails() );
            return;
        }

        Val<bool> updateResult = await IdentityManager.UpdateAuthenticationState( loginResult.Value.JwtToken );
        //await CartManager.GetCart( reply.Data.Token );
        
        if (!updateResult.IsSuccess()) {
            PushAlert( AlertType.Danger, updateResult.PrintDetails() );
            return;
        }
        
        Navigation.NavigateTo( "/" );
    }
    async Task Register()
    {
        Val<RegisterResponse> reply = await Http.TryGetValRequest<RegisterResponse>( "" );

        if (!reply.IsSuccess()) {
            PushAlert( AlertType.Danger, reply.PrintDetails() );
            return;
        }
        
        Navigation.NavigateTo( "/registered" );
    }
}