@page "/identity/login2fa"
@using System.ComponentModel.DataAnnotations
@using ShopApplication.Common
@using ShopApplication.Common.Optionals
@using ShopApplication.Features.Identity
@using ShopWeb.Utilities
@inherits PageBase

<PageTitle>Two-Factor Authentication</PageTitle>

<h1>Two-factor authentication</h1>
<hr/>
<p>Your login is protected by a two-step verification process. Enter your verification code below.</p>
<div class="row">
    <div class="col-md-4">
        <EditForm Model="Request" FormName="login-with-2fa" OnValidSubmit="OnValidSubmitAsync" method="post">
            <input type="hidden" name="ReturnUrl" value="@ReturnUrl"/>
            <input type="hidden" name="RememberMe" value="@RememberMe"/>
            <DataAnnotationsValidator/>
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="form-floating mb-3">
                <InputText @bind-Value="@Request.TwoFactorCode" id="two-factor-code" class="form-control" autocomplete="off"/>
                <label for="two-factor-code" class="form-label">Authenticator code</label>
                <ValidationMessage For="@(() => Request.TwoFactorCode)" class="text-danger"/>
            </div>
            <div class="checkbox mb-3">
                <label for="remember-machine" class="form-label">
                    <InputCheckbox @bind-Value="@Request.RememberMachine" id="remember-machine"/>
                    Remember this machine
                </label>
            </div>
            <div>
                <button type="submit" class="w-100 btn btn-lg btn-primary">Log In</button>
            </div>
        </EditForm>
    </div>
</div>
<p>
    Don't have access to your authenticator device? You can
    <a href="@recoveryUrl">log in with a recovery code</a>.
</p>

@code 
{
    [SupplyParameterFromForm] TwoFactorRequest Request { get; init; } = new();
    [SupplyParameterFromQuery] string? ReturnUrl { get; init; } = null;
    [SupplyParameterFromQuery] bool RememberMe { get; init; } = false;

    [Inject] public IIdentityManager IdentityManager { get; set; } = default!;

    string loginRecoveryLink => WebUtils.GetIdentityPage( WebConsts.LoginWithRecoveryConfig, Configuration );
    string recoveryUrl => WebUtils.ConstructReturnUrl( loginRecoveryLink, ReturnUrl );

    protected override string GetInitialLoadingMessage() =>
        "Loading Two Factor Login...";
    protected override void OnInitialized()
    {
        StopLoading();
    }
    async Task OnValidSubmitAsync()
    {
        StartLoading( "Verifying Two Factor..." );
        
        string api = IdentityUtils.GetApiUrl( WebConsts.LoginTwoFactorConfig, Configuration );
        Obj<TwoFactorReply> result = await Http.TryPostObjRequest<TwoFactorReply>( api, Request );

        if (!result.IsSuccess()) {
            PushAlert( AlertType.Danger, $"Two factor authorization failed!: {result.PrintDetails()}" );
            StopLoading();
            return;
        }

        Val<bool> localResult = await IdentityManager.UpdateAuthenticationState( result.Object.JwtToken );

        if (!localResult.IsSuccess()) {
            PushAlert( AlertType.Danger, $"Two factor authorization succeeded on the server, but failed to save locally!: {result.PrintDetails()}" );
            StopLoading();
            return;
        }
        
        StartLoading( "Login Success! Redirecting..." );
        Navigation.NavigateToOrDefault( ReturnUrl );
    }

    sealed class TwoFactorRequest
    {
        [Required, DataType( DataType.Text ), Display( Name = "Authenticator code" ), StringLength( 40, ErrorMessage = "The two factor code must be at least 6 and at max 40 characters long.", MinimumLength = 6 )]
        public string TwoFactorCode { get; set; } = string.Empty;

        [Display( Name = "Remember this machine" )]
        public bool RememberMachine { get; set; }
    }
    sealed record TwoFactorReply(
        string JwtToken );
}