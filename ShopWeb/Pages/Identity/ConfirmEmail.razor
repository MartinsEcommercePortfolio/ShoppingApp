@page "/identity/confirm"
@using ShopApplication.Features.Identity
@using ShopApplication.Features.Identity.Types
@using ShopApplication.Common
@using ShopApplication.Common.Optionals
@inherits PageBase

<PageTitle>Confirm Email</PageTitle>

@if (confirmFailed) {
    <h1>Email Confirmation Failed!</h1>
    <h2>Error Details: @replyVal.PrintDetails()</h2>
    <p>Please click <a href="@ResendLink">here</a> to try sending another confirmation link, or contact support.</p>
}
else if (emailConfirmed) {
    <h1>Email Confirmed: @replyVal.Value.ConfirmedEmail!</h1>
    <h2>Account Name: @( replyVal.Value.ConfirmedUsername ) </h2>
    <h2>Account Id: @(UserId ?? "No User Id Found!") </h2>
    <p>Your account has been verified and you can now <a href="@LoginLink">login</a> normally.</p>
}

@code 
{
    [SupplyParameterFromQuery] private string? UserId { get; set; }
    [SupplyParameterFromQuery] private string? Code { get; set; }
    
    Val<ConfirmEmailReply> replyVal = Val<ConfirmEmailReply>.Has( ConfirmEmailReply.Empty() );
    bool emailConfirmed = false;
    bool confirmFailed = false;
    
    string LoginLink => IdentityUtils.GetApiUrl( "Confirm", Configuration );
    string ResendLink => IdentityUtils.GetApiUrl( "Resend", Configuration );
    
    protected override async Task OnInitializedAsync()
    {
        StartLoading( "Confirming email..." );
        
        if (!ValidateLink( out string userId, out string code ))
            return;

        string url = IdentityUtils.GetApiUrl( "Confirm", Configuration );
        
        replyVal = await TryConfirmEmail( url, userId, code );
        emailConfirmed = replyVal.IsSuccess();
        confirmFailed = !emailConfirmed;
        
        StateHasChanged();
        StopLoading();
    }
    
    bool ValidateLink( out string userId, out string code )
    {
        bool invalidUser = string.IsNullOrEmpty( UserId );
        if (invalidUser)
            PushAlert( AlertType.Danger, $"Failed to confirm email address. {nameof( UserId )} is invalid." );

        bool invalidCode = string.IsNullOrEmpty( Code );
        if (invalidCode)
            PushAlert( AlertType.Danger, $"Failed to confirm email address. {nameof( Code )} is invalid." );

        userId = UserId ?? string.Empty;
        code = Code ?? string.Empty;
        
        return !(invalidUser || invalidCode);
    }
    async Task<Val<ConfirmEmailReply>> TryConfirmEmail( string url, string userId, string code )
    {
        Val<ConfirmEmailReply> reply = await Http.TryPutValRequest<ConfirmEmailReply>( 
            url, ConfirmEmailRequest.With( userId, code ) );
        return reply;
    }
    
    readonly record struct ConfirmEmailRequest(
        string UserId,
        string Token )
    {
        public static ConfirmEmailRequest With( string userId, string token ) =>
            new( userId, token );
    }
}