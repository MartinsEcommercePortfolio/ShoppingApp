@using System.ComponentModel.DataAnnotations
@using ShopApplication.Common
@using ShopApplication.Common.Optionals
@using ShopWeb.Utilities
@inherits PageComponent

<PageTitle>Account Settings</PageTitle>

<h3>Edit Account</h3>

<div class="row">
    <div class="col-md-6">
        <EditForm Model="@Request" FormName="edit-account" OnValidSubmit="OnValidSubmitAccountAsync" method="post">
            <DataAnnotationsValidator/>
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="form-floating mb-3">
                <InputText type="email" bind-Value="@Request.Email" id="email" class="form-control" autocomplete="email" aria-required="true" placeholder="Email"/>
                <label for="email" class="form-label">Email</label>
                <ValidationMessage For="@(() => Request.Email)" class="text-danger"/>
            </div>
            <div class="form-floating mb-3">
                <InputText type="email" bind-Value="@Request.Email" id="username" class="form-control" autocomplete="username" aria-required="true" placeholder="Username"/>
                <label for="username" class="form-label">Username</label>
                <ValidationMessage For="@(() => Request.Username)" class="text-danger"/>
            </div>
            <div class="form-floating mb-3">
                <InputText type="email" bind-Value="@Request.Phone" id="phone" class="form-control" autocomplete="phone" aria-required="true" placeholder="Phone"/>
                <label for="phone" class="form-label">Phone</label>
                <ValidationMessage For="@(() => Request.Phone)" class="text-danger"/>
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Edit Account</button>
        </EditForm>
    </div>
</div>

@code {
    [Parameter] public Account.Request AccountDetailsInitial { get; set; } = default!;
    Account.Request Request = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Request = AccountDetailsInitial;
        await CallStopLoading();
    }
    async Task OnValidSubmitAccountAsync()
    {
        await CallStartLoading( "Updating Account..." );

        Opt<bool> result = await Http.TryPostRequest<bool>( Urls.ApiUpdateAccountDetails, Request );
        
        if (!result.IsOkay()) {
            await CallStopLoading();
            await CallPushAlert( AlertType.Danger, $"Failed to update account details. {result.Message()}" );
            return;
        }

        await CallStopLoading();
        await CallPushAlert( AlertType.Danger, $"Account details successfully updated. {result.Message()}" );
    }
}