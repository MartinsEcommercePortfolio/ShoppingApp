@page "/account/manage"
@using System.ComponentModel.DataAnnotations

<PageTitle>Account Settings</PageTitle>

<h3>Edit Account</h3>

<div class="row">
    <div class="col-md-6">
        <EditForm Model="@UpdatePassword" FormName="edit-account" OnValidSubmit="OnValidSubmitPasswordAsync" method="post">
            <DataAnnotationsValidator/>
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="form-floating mb-3">
                <InputText type="email" bind-Value="@UpdateAccount.Email" id="email" class="form-control" autocomplete="email" aria-required="true" placeholder="Email"/>
                <label for="email" class="form-label">Email</label>
                <ValidationMessage For="@(() => UpdateAccount.Email)" class="text-danger"/>
            </div>
            <div class="form-floating mb-3">
                <InputText type="email" bind-Value="@UpdateAccount.Email" id="username" class="form-control" autocomplete="username" aria-required="true" placeholder="Username"/>
                <label for="username" class="form-label">Username</label>
                <ValidationMessage For="@(() => UpdateAccount.Username)" class="text-danger"/>
            </div>
            <div class="form-floating mb-3">
                <InputText type="email" bind-Value="@UpdateAccount.Phone" id="phone" class="form-control" autocomplete="phone" aria-required="true" placeholder="Phone"/>
                <label for="phone" class="form-label">Phone</label>
                <ValidationMessage For="@(() => UpdateAccount.Phone)" class="text-danger"/>
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Edit Account</button>
        </EditForm>
    </div>
</div>

<div class="row">
    <div class="col-md-6">
        <EditForm Model="@UpdatePassword" FormName="change-password" OnValidSubmit="OnValidSubmitPasswordAsync" method="post">
            <DataAnnotationsValidator/>
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="form-floating mb-3">
                <InputText type="password" bind-Value="@UpdatePassword.OldPassword" id="old-password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="Please enter your old password."/>
                <label for="old-password" class="form-label">Old password</label>
                <ValidationMessage For="@(() => UpdatePassword.OldPassword)" class="text-danger"/>
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" bind-Value="@UpdatePassword.NewPassword" id="new-password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Please enter your new password."/>
                <label for="new-password" class="form-label">New password</label>
                <ValidationMessage For="@(() => UpdatePassword.NewPassword)" class="text-danger"/>
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" bind-Value="@UpdatePassword.ConfirmPassword" id="confirm-password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Please confirm your new password."/>
                <label for="confirm-password" class="form-label">Confirm password</label>
                <ValidationMessage For="@(() => UpdatePassword.ConfirmPassword)" class="text-danger"/>
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Update Password</button>
        </EditForm>
    </div>
</div>

@code {
    UpdateAccountRequest UpdateAccount = new();
    UpdatePasswordRequest UpdatePassword = new();

    protected override async Task OnInitializedAsync()
    {
        await FetchAccountDetails();
    }

    async Task FetchAccountDetails()
    {
        
    }

    async Task OnValidSubmitAccountAsync()
    {
        
    }
    async Task OnValidSubmitPasswordAsync()
    {
        
    }

    sealed class UpdateAccountRequest
    {
        [Required( ErrorMessage = "Email is required." ), EmailAddress( ErrorMessage = "Invalid email address." )]
        public string Email { get; set; } = string.Empty;

        [Required( ErrorMessage = "Username is required." )]
        public string Username { get; set; } = string.Empty;

        [Phone( ErrorMessage = "Invalid phone number." )]
        public string? Phone { get; set; } = string.Empty;
    }
    
    sealed class UpdatePasswordRequest
    {
        [Required, DataType( DataType.Password ), Display( Name = "Current password" )]
        public string OldPassword { get; set; } = "";

        [Required, StringLength( 100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6 ), DataType( DataType.Password ), Display( Name = "New password" )]
        public string NewPassword { get; set; } = "";

        [DataType( DataType.Password ), Display( Name = "Confirm new password" ), Compare( "NewPassword", ErrorMessage = "The new password and confirmation password do not match." )]
        public string ConfirmPassword { get; set; } = "";
    }
}