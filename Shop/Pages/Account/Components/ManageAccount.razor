@using System.ComponentModel.DataAnnotations
@using Shop.Infrastructure.Common
@using Shop.Infrastructure.Common.Optionals
@using Shop.Utilities
@inherits Shop.Shared.PageComponent

<h3>Edit Account</h3>

<div class="row">
    <div class="col-md-6">
        <EditForm Model="@accountModel" FormName="edit-account" OnValidSubmit="UpdateAccount" method="post">
            <DataAnnotationsValidator/>
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="form-floating mb-3">
                <InputText type="email" bind-Value="@accountModel.Email" id="email" class="form-control" autocomplete="email" aria-required="true" placeholder="Email"/>
                <label for="email" class="form-label">Email</label>
                <ValidationMessage For="@(() => accountModel.Email)" class="text-danger"/>
            </div>
            <div class="form-floating mb-3">
                <InputText type="email" bind-Value="@accountModel.Email" id="username" class="form-control" autocomplete="username" aria-required="true" placeholder="Username"/>
                <label for="username" class="form-label">Username</label>
                <ValidationMessage For="@(() => accountModel.Username)" class="text-danger"/>
            </div>
            <div class="form-floating mb-3">
                <InputText type="email" bind-Value="@accountModel.Phone" id="phone" class="form-control" autocomplete="phone" aria-required="true" placeholder="Phone"/>
                <label for="phone" class="form-label">Phone</label>
                <ValidationMessage For="@(() => accountModel.Phone)" class="text-danger"/>
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Edit Account</button>
        </EditForm>
    </div>
</div>

@code {
    AccountModel accountModel = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await FetchAccount();
    }
    async Task FetchAccount()
    {
        StartLoading( "Fetching account details..." );

        Opt<AccountModel> result = await Http.TryGetRequest<AccountModel>( Urls.ApiGetAccountDetails );

        if (!result.IsOkay()) {
            StopLoading();
            await CallPushAlert( AlertType.Danger, $"Failed to get account details. {result.Message()}" );
            return;
        }

        StopLoading();
        StateHasChanged();
    }
    async Task UpdateAccount()
    {
        StartLoading( "Updating Account..." );

        Opt<bool> result = await Http.TryPostRequest<bool>( Urls.ApiGetAccountDetails, accountModel );
        
        if (!result.IsOkay()) {
            StopLoading();
            await CallPushAlert( AlertType.Danger, $"Failed to update account details. {result.Message()}" );
            return;
        }
        
        await CallPushAlert( AlertType.Danger, $"Account details successfully updated. {result.Message()}" );
        StopLoading();
    }

    public class AccountModel
    {
        [Required( ErrorMessage = "Email is required." ), EmailAddress( ErrorMessage = "Invalid email address." )]
        public string Email { get; set; } = string.Empty;

        [Required( ErrorMessage = "Username is required." )]
        public string Username { get; set; } = string.Empty;

        [Phone( ErrorMessage = "Invalid phone number." )]
        public string? Phone { get; set; } = string.Empty;
    }
}