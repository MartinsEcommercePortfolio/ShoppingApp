@using System.ComponentModel.DataAnnotations
@using Shop.Infrastructure.Common
@using Shop.Infrastructure.Common.Optionals
@using Shop.Utilities
@inherits Shop.Shared.PageComponent

<PageTitle>Forgot your password?</PageTitle>

@if (isSuccess) {
    <h1>Password reset link sent!</h1>
    <h2>Please check your email.</h2>
}
else {
    <h1>Forgot your password?</h1>
    <h2>Enter your email.</h2>
    <hr/>
    <div class="row">
        <div class="col-md-4">
            <EditForm Model="Request" FormName="forgot-password" OnValidSubmit="OnValidSubmitAsync" method="post">
                <DataAnnotationsValidator/>
                <ValidationSummary class="text-danger" role="alert"/>
                <div class="form-floating mb-3">
                    <InputText @bind-Value="@Request.Email" id="email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com"/>
                    <label for="email" class="form-label">Email</label>
                    <ValidationMessage For="@(() => Request.Email)" class="text-danger"/>
                </div>
                <button type="submit" class="w-100 btn btn-lg btn-primary">Send Reset Email</button>
            </EditForm>
        </div>
    </div>
}

@code
{
    [SupplyParameterFromForm] PasswordForgotRequest Request { get; } = new();
    
    bool isSuccess = false;
    
    async Task OnValidSubmitAsync()
    {
        StartLoading( "Sending reset link..." );
        
        Opt<bool> result = await Http.TryPostRequest<bool>( Urls.ApiResendConfirm, Request );
        
        isSuccess = result.IsOkay();
        
        if (!isSuccess)
            await CallPushAlert( AlertType.Danger, $"Failed to send reset link: {result.Message()}" );
        
        StateHasChanged();
        StopLoading();
    }

    sealed class PasswordForgotRequest
    {
        [Required, EmailAddress]
        public string Email { get; set; } = "";
    }
}