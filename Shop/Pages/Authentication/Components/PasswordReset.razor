@using System.ComponentModel.DataAnnotations
@using Shop.Infrastructure.Common
@using Shop.Infrastructure.Common.Optionals
@using Shop.Utilities
@inherits Shop.Shared.PageComponent

<PageTitle>Reset Password</PageTitle>

@if (linkError) {
    <h1>Invalid password reset link.</h1>
    <p>The reset code is null.</p>
    <h3>Please <button class="btn btn-link" onclick="@(async () => await GoToResend())">try generating another reset link</button>, or try contacting support.</h3>
}
else if (resetSuccess) {
    <h1>Password reset successfully.</h1>
    <p>You password has been successfully reset. <button class="btn btn-link" onclick="@(async () => await GoToResend())">Click Here To Login</button>.</p>
}
else {
    <h1>Reset your password.</h1>
    <hr/>
    <div class="row">
        <div class="col-md-4">
            <EditForm Model="Request" FormName="reset-password" OnValidSubmit="OnValidSubmitAsync" method="post">
                <DataAnnotationsValidator/>
                <ValidationSummary class="text-danger" role="alert"/>
                <input type="hidden" name="Input.Code" value="@Request.Code"/>
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="@Request.NewPassword" id="password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Please enter your password."/>
                    <label for="password" class="form-label">Password</label>
                    <ValidationMessage For="@(() => Request.NewPassword)" class="text-danger"/>
                </div>
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="@Request.ConfirmPassword" id="confirm-password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Please confirm your password."/>
                    <label for="confirm-password" class="form-label">Confirm password</label>
                    <ValidationMessage For="@(() => Request.ConfirmPassword)" class="text-danger"/>
                </div>
                <button type="submit" class="w-100 btn btn-lg btn-primary">Reset</button>
            </EditForm>
        </div>
    </div>
}

@code 
{
    [SupplyParameterFromQuery] string? Email { get; } = null;
    [SupplyParameterFromQuery] string? Code { get; } = null;
    [SupplyParameterFromForm] PasswordResetRequest Request { get; } = new();
    
    bool linkError = false;
    bool resetSuccess = false;

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty( Email ) || string.IsNullOrEmpty( Code )) {
            linkError = true;
            StartLoading();
            StateHasChanged();
            return;
        }

        Request.Email = Email;
        Request.Code = Code;
        StopLoading();
    }
    async Task OnValidSubmitAsync()
    {
        StartLoading( "Resetting Password..." );
        
        Opt<bool> result = await Http.TryPostRequest<bool>( Urls.ApiResetPassword, Request );

        if (!result.IsOkay()) {
            await CallPushAlert( AlertType.Danger, $"Failed to reset password: {result.Message()}" );
            StopLoading();
            return;
        }

        resetSuccess = true;
        StopLoading();
        StateHasChanged();
    }
    async Task GoToResend() => await CallNavigateTo( Urls.PageForgotPassword, false );
    async Task GoToLogin() => await CallNavigateTo( Urls.PageLoginOrRegister, false );
    
    sealed class PasswordResetRequest
    {
        [Required, EmailAddress]
        public string Email { get; set; } = string.Empty;

        [Required] 
        public string Code { get; set; } = string.Empty;

        [Required, DataType( DataType.Password ), StringLength( 40, ErrorMessage = "The password must be at least {8} and at max {40} characters long.", MinimumLength = 8 )]
        public string NewPassword { get; set; } = string.Empty;

        [Required, DataType( DataType.Password ), Display( Name = "Confirm password" ), Compare( "Password", ErrorMessage = "The password and confirmation password do not match." )]
        public string ConfirmPassword { get; set; } = string.Empty;
    }
}