@using Shop.Infrastructure.Http
@using Shop.Utilities
@using Shop.Infrastructure.Authentication
@using Microsoft.AspNetCore.Components.Authorization
@using Shop.Infrastructure
@using Shop.Types.Common.ReplyTypes
@using Shop.Types.Common.ValueTypes
@inherits ComponentBase
@implements IDisposable

@code {
    [CascadingParameter( Name = "layout" )]
    public MainLayout Layout { get; init; } = default!;

    [Inject] protected LoadingService Loader { get; init; } = default!;
    [Inject] protected IConfiguration Config { get; init; } = default!;
    [Inject] protected AuthenticationStateManager Auth { get; init; } = default!;
    [Inject] protected HttpService Http { get; init; } = default!;
    [Inject] protected NavigationManager Navigation { get; init; } = default!;
    
    bool _isInitialized = false; // Children have own lifecycle so we need state
    protected bool FirstLoad = true;
    
    public void Dispose()
    {
        Auth.OnStateChanged -= OnAuthStateChange;
        OnDispose();
    }
    protected virtual void OnDispose()
    {
        
    }
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Loader.StartLoadingPage( "Loading Page." );
    }
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (_isInitialized)
            return;
        Auth.OnStateChanged += OnAuthStateChange;
    }
    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if (_isInitialized)
            return;
        _isInitialized = true;
    }
    
    protected void GoHome() =>
        Navigate( Consts.PageHome, true );
    protected void Navigate( string page, bool forceReload = false )
    {
        Navigation.NavigateTo( page, forceReload );
    }
    
    protected void PushSuccess( string message ) => PushAlert( AlertType.Success, message );
    protected void PushWarning( string message ) => PushAlert( AlertType.Warning, message );
    protected void PushError( string message ) => PushAlert( AlertType.Danger, message );
    protected void PushError( IReply reply, string message ) => PushAlert( AlertType.Danger, $"{message} : {reply.GetMessage()}" );
    protected void PushError( IReply reply ) => PushAlert( AlertType.Danger, reply.GetMessage() );

    protected virtual async void OnAuthStateChange( Task<AuthenticationState> task )
    {
        //StateHasChanged();
    }
    void PushAlert( AlertType type, string message )
    {
        Layout.PushAlert( type, message );
    }
}