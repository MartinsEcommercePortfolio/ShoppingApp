@using Shop.Infrastructure.Common
@using Shop.Infrastructure.Loading
@using Shop.Utilities
@implements IDisposable

@switch ( _state ) {
    case LoadingState.Loading:
        <div class="loading-spinner @_displayCss">
            <div class="loading-circle"></div>
            @if (!string.IsNullOrEmpty( _message )) 
            {
                <p>@_message</p>   
            }
        </div>
        break;
    case LoadingState.Redirecting:
        <div class="loading-spinner @_displayCss">
            <div class="loading-circle"></div>
            <p>Redirecting...</p>
            @if (!string.IsNullOrEmpty( _message )) 
            {
                <p>@_message</p>   
            }
        </div>
        break;
    case LoadingState.Ready:
        break;
    default:
        throw new ArgumentOutOfRangeException();
}

@code
{
    [Inject] public LoadingService LoadingService { get; set; } = default!;

    public void Dispose()
    {
        LoadingService.OnChange -= OnLoadingStateChanged;
    }
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        LoadingService.OnChange += OnLoadingStateChanged;
    }

    void OnLoadingStateChanged()
    {
        if (!LoadingService.IsLoading) {
            StopLoading();
            return;
        }
        
        StartLoading( LoadingService.Message );
    }

    void StartRedirecting( int seconds, string? m = null )
    {
        _redirectSeconds = seconds;
        this._message = m ?? string.Empty;
        _displayCss = ShowCss;
        StateHasChanged();
    } 
    void TickRedirect()
    {
        _state = LoadingState.Redirecting;
        _redirectSeconds--;
        StateHasChanged();
    }
    void StartLoading( string? m = null )
    {
        this._message = m ?? string.Empty;
        _state = LoadingState.Loading;
        _displayCss = ShowCss;
        StateHasChanged();
    }
    void StopLoading()
    {
        _state = LoadingState.Ready;
        _displayCss = HideCss;
        StateHasChanged();
    }
    
    LoadingState _state = LoadingState.Loading;
    string _message = string.Empty;
    int _redirectSeconds = 0;
    string _displayCss = HideCss;

    const string HideCss = "d-none";
    const string ShowCss = "d-flex";
}