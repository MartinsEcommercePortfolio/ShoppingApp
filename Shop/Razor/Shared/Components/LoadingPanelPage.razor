@using Shop.Types.Common.ValueTypes
@using Shop.Utilities
@using Shop.Infrastructure
@implements IDisposable

@if (IsLoading)
{
    <div class="page-loader-spinner-container d-flex flex-column">
        <div class="page-loader-spinner"></div>
        <p class="text-dark">@GetMessage()</p>
    </div>
}

@code
{
    [Parameter] public string Message { get; set; } = string.Empty;
    [Parameter] public bool IsLoading { get; set; } = true;
    [Inject] public LoadingService PageLoadingService { get; set; } = default!;

    public void Dispose()
    {
        PageLoadingService.OnChangePage -= OnPageLoadingStateChanged;
    }
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        PageLoadingService.OnChangePage += OnPageLoadingStateChanged;
    }

    public void ToggleLoading( bool value, string? message = null )
    {
        IsLoading = value;
        Message = message ?? string.Empty;
        StateHasChanged();
    }

    void OnPageLoadingStateChanged()
    {
        IsLoading = PageLoadingService.IsLoadingPage;
        Message = PageLoadingService.Message ?? "Loading...";         
        StateHasChanged();
    }
    string GetMessage() =>
        !string.IsNullOrEmpty( Message ) ? Message : "Loading...";

    const string HideCss = "d-none";
    const string ShowCss = "d-flex";
}