@using Microsoft.AspNetCore.Components.Authorization
@using Shop.Infrastructure
@using Shop.Infrastructure.Authentication
@using Shop.Infrastructure.Http
@using Shop.Types.Products
@using Shop.Types.Users
@using Shop.Utilities
@using Shop.Razor.Shared.Components
@implements IDisposable

<!-- POPUP BOX -->
@if (_showAddressBox)
{
    <!-- ADDRESS FORM CONTAINER -->
    <div class="address-box-container">
        <div class="address-box-inner">
            <div class="address-box-inner-top">
                <h4 class="m-0">Choose your location</h4>
                <button class="btn btn-link-dark btn-icon" @onclick="OnClickClose">
                    <i class="fa fa-x"></i>
                </button>
            </div>
            <div class="address-box-inner-content">
                <!-- SAVED ADDRESSES -->
                <AuthorizeView>
                    <NotAuthorized>
                        <a href="@Consts.PageLoginOrRegister" class="text-center">
                            <i class="fa fa-sign-in me-2"></i>
                            <span>Login to view saved addresses.</span>
                        </a>
                    </NotAuthorized>
                    <Authorized>
                        <h5>Saved Addresses</h5>
                        <ul class="list-unstyled">
                            @foreach ( AddressModel m in _userAddresses )
                            {
                                <li class="w-100">
                                    <button class="btn btn-outline-secondary my-1 w-100" @onclick="@(async()=>await OnClickSaved(m))">
                                        @GetSavedAddressText( m );
                                    </button>
                                </li>
                            }
                        </ul>
                        <PaginationPanel @ref="_paginationPanel"></PaginationPanel>
                    </Authorized>
                </AuthorizeView>
            
                <hr/>
            
                <!-- ADDRESS FORM -->
                <div class="address-box-form">
                    <span class="d-block w-100 text-center mb-3">Or enter a custom address:</span>
                    <div class="product-address-form-inputs mb-3">
                        <input type="number" min="0" max="100000" step="1" value="@_currentAddress?.PosX" @onchange="OnChangePosX" class="form-control"/>
                        <input type="number" min="0" max="100000" step="1" value="@_currentAddress?.PosY" @onchange="OnChangePosY" class="form-control"/>
                    </div>
                    <button type="submit" class="btn btn-primary btn-icon search-filters-btn-main" @onclick="OnClickSubmit">
                        <i class="fa-solid fa-circle-check me-2"></i>
                        Update Address
                    </button>
                </div>
            </div>
        </div>
    </div>
}
    
@code 
{
    [Inject] public AuthenticationStateManager AuthManager { get; init; } = default!;
    [Inject] public LocationManager AddressManager { get; init; } = default!;
    [Inject] public LoadingService Loader { get; init; } = default!;
    [Inject] public HttpService Http { get; init; } = default!;
    
    PaginationPanel? _paginationPanel;
    const int _pageSize = 5;
    int _currentPage = 1;
    int _totalCount = 0;
    
    List<AddressModel> _userAddresses = [];
    AddressModel? _currentAddress;
    bool _paginationSubscribed = false;
    bool _showAddressBox = false;
    bool _authenticated = false;

    public void Dispose()
    {
        if (_paginationPanel is not null)
            _paginationPanel.OnPageChangeAsync -= OnPaginationChange;
        AddressManager.OnOpenAddressBox -= Open;
    }
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        AddressManager.OnOpenAddressBox += Open;
        Address? current = await AddressManager.GetCurrentAddress();
        if (current is null)
            return;
        _currentAddress = new AddressModel( Guid.Empty, current?.Name ?? "Custom Address", current!.PosX, current.PosY );
    }
    protected override async Task OnAfterRenderAsync( bool firstRender )
    {
        await base.OnAfterRenderAsync( firstRender );
        
        if (_paginationPanel is not null && !_paginationSubscribed)
        {
            _paginationPanel.OnPageChangeAsync += OnPaginationChange;
            _paginationSubscribed = true;
        }

        _paginationPanel?.Set( _currentPage, _pageSize, _totalCount );
    }
    
    async Task OnClickAddressButton()
    {
        Loader.StartLoadingPage( "Loading..." );
        
        var address = await AddressManager.GetCurrentAddress();
        var authState = await AuthManager.GetSessionState();

        _currentAddress = address?.ToModel();
        _authenticated = authState.User.Identity is { IsAuthenticated: true };
        
        if (_authenticated)
            await GetUserAddresses();

        _showAddressBox = true;
        Loader.StopLoadingPage();
    }
    async Task OnClickSaved( AddressModel m )
    {
        Loader.StartLoadingPage( "Loading..." );
        _currentAddress = m;
        await AddressManager.SetCurrentLocation( Address.FromModel( _currentAddress ) );
        Loader.StopLoadingPage();
        OnClickClose();
    }
    async Task OnClickSubmit()
    {
        Loader.StartLoadingPage( "Loading..." );
        await AddressManager.SetCurrentLocation( Address.FromModel( _currentAddress ) );
        Loader.StopLoadingPage();
        OnClickClose();
    }
    async Task OnPaginationChange( int page )
    {
        Loader.StartLoadingPage( "Loading..." );
        _currentPage = page;
        await GetUserAddresses();
        Loader.StopLoadingPage();
    }
    async Task GetUserAddresses()
    {
        Dictionary<string, object> parameters = [];
        parameters.Add( "Page", _currentPage );
        parameters.Add( "PageSize", _pageSize );
        var addressReply = await Http.GetAsyncAuthenticated<ViewPagedAddressesResponse>( Consts.ApiGetAddresses, parameters );
        _userAddresses = addressReply
            ? addressReply.Data.Addresses
            : [];
        _totalCount = addressReply
            ? addressReply.Data.TotalCount
            : 0;
        StateHasChanged();
    }

    async Task Open()
    {
        Loader.StartLoadingPage( "Loading Addresses..." );
        
        var authState = await AuthManager.GetSessionState();
        _authenticated = authState.User.Identity is { IsAuthenticated: true };

        if (!_authenticated)
        {
            Loader.StopLoadingPage();
            _showAddressBox = true;
            StateHasChanged();
            return;
        }

        Dictionary<string, object> parameters = [];
        parameters.Add( "Page", _currentPage );
        parameters.Add( "PageSize", _pageSize );
        var reply = await Http.GetAsyncAuthenticated<ViewPagedAddressesResponse>( Consts.ApiGetAddresses, parameters );

        if (reply)
        {
            _totalCount = reply.Data.TotalCount;
            _userAddresses = reply.Data.Addresses;
        }
        
        Loader.StopLoadingPage();
        _showAddressBox = true;
        StateHasChanged();
    }
    void OnClickClose()
    {
        _showAddressBox = false;
        StateHasChanged();
    }
    void OnChangePosX( ChangeEventArgs args )
    {
        bool parsed = int.TryParse( args.Value?.ToString(), out int result );
        if (!parsed)
            return;

        _currentAddress ??= new AddressModel();
        _currentAddress.PosX = result;
    }
    void OnChangePosY( ChangeEventArgs args )
    {
        bool parsed = int.TryParse( args.Value?.ToString(), out int result );
        if (!parsed)
            return;

        _currentAddress ??= new AddressModel();
        _currentAddress.PosY = result;
    }
    string GetDeliveryToText() =>
        _currentAddress is null ? "Enter an address to see delivery time estimates." : $"Delivering to: {_currentAddress.Name} ({_currentAddress.PosX} , {_currentAddress.PosY})";
    string GetSavedAddressText( AddressModel m ) =>
        $"{m.Name} ({m.PosX}, {m.PosY})";
}