@using Shop.Utilities
@using Shop.Infrastructure.Http
@using Shop.Types.Products
@using Shop.Types.Products.Dtos

<div class="input-group top-nav-search">
    <input class="form-control top-nav-search-control" 
           type="search"
           list="products"
           placeholder="Search All Products..."
           @bind-value="@_searchText"
           @onkeyup="HandleSearch"
           @ref="_searchInputElement"/>
    <datalist id="products">
        @foreach ( ProductSuggestionDto s in _suggestions )
        {
            <option value="@s.Name" @onclick="@(()=>NavigateToProductDetails(s))">@s.Name</option>
        }
    </datalist>
    <div class="input-group-append">
        <button class="btn btn-primary top-nav-search-button" @onclick="SearchProducts">
            <i class="fa-solid fa-magnifying-glass"></i>
            <span class="top-nav-search-button-text fw-bold">Search</span>
        </button>
    </div>
</div>

@code 
{
    [Inject] public HttpService Http { get; set; } = default!;
    [Inject] public NavigationManager Navigation { get; set; } = default!;
    
    ElementReference _searchInputElement;
    string _searchText = string.Empty;
    List<ProductSuggestionDto> _suggestions = [];
    TimeSpan _delayTimeSpan = TimeSpan.FromMilliseconds( 500 );
    DateTime _lastFetch;
    Timer? _timer;
    
    async Task HandleSearch( KeyboardEventArgs args )
    {
        if (args.Key is null or "Enter") 
        {
            SearchProducts();
            return;
        }

        /*if (DateTime.Now - _lastFetch < _delayTimeSpan)
        {
            _timer?.Dispose();
            _timer = new Timer( _ => TimerCallback(), null, _delayTimeSpan, TimeSpan.MaxValue );
            return;
        }*/

        await GetSuggestions();
    }
    async Task GetSuggestions()
    {
        var parameter = new Dictionary<string, object>() { { "searchText", _searchText } };
        var reply = await Http.GetAsync<List<ProductSuggestionDto>>( Consts.ApiGetSuggestions, parameter );

        if (!reply)
            return;

        _suggestions = reply.Data;
        StateHasChanged();
    }
    async void TimerCallback()
    {
        await GetSuggestions();
    }
    void SearchProducts()
    {
        Navigation.NavigateTo( Consts.GetProductSearchUrl( $"?SearchText={_searchText}&" ) );
    }
    void NavigateToProductDetails( ProductSuggestionDto dto )
    {
        Navigation.NavigateTo( $"{Consts.PageProductDetails}?ProductId={dto.Id}" );
    }
}