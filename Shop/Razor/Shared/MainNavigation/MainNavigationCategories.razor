@using Shop.Infrastructure.Catalog
@using Shop.Infrastructure.Catalog.Categories
@using Shop.Infrastructure.Common.Optionals
@using Shop.Infrastructure.Catalog.Categories.Types

<div class="d-flex align-items-center justify-content-start">
    @if ( currentParentId.HasValue )
    {
        <button class="btn btn-link nav-link me-2 border-end" @onclick="PreviousCategory">
            <i class="fa fa-caret-left"></i> Back
        </button>
    }
    else if (ShowExitButton) 
    {
        <button class="btn btn-link nav-link me-2 border-end" @onclick="Exit">
            <i class="fa fa-caret-left"></i> Back
        </button>
    }
    <h4 class="nav-link mb-0 w-100">Categories</h4>
</div>
<ul class="nav flex-column">
    @foreach ( Category c in GetCurrentCategories() )
    {
        <li class="nav-item d-flex align-items-center">
            <a class="nav-link flex-grow-1" href="">@c.Name</a>
            @if ( c.Children.Any() )
            {
                <button class="btn" @onclick="() => NextCategory( c )">
                    <i class="oi oi-caret-right"></i>
                </button>
            }
        </li>
    }
    <li class="nav-item d-flex align-items-center">
        <a class="nav-link flex-grow-1" href="">Test</a>
    </li>
    <li class="nav-item d-flex align-items-center">
        <a class="nav-link flex-grow-1" href="">Test</a>
    </li>
    <li class="nav-item d-flex align-items-center">
        <a class="nav-link flex-grow-1" href="">Test</a>
    </li>
    <li class="nav-item d-flex align-items-center">
        <a class="nav-link flex-grow-1" href="">Test</a>
    </li>
    <li class="nav-item d-flex align-items-center">
        <a class="nav-link flex-grow-1" href="">Test</a>
    </li>
</ul>

@code {
    [Parameter] public Action OnExitCallback { get; set; } = default!;
    [Parameter] public bool ShowExitButton { get; set; } = false;
    [Inject] public CategoriesCache Service { get; set; } = default!;
    
    CategoriesCollection _categoriesCollection = CategoriesCollection.None();
    Guid? currentParentId = null;
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Reply<CategoriesCollection> getResult = await Service.GetCategories();
        if (getResult.IsOkay)
            _categoriesCollection = getResult.Data;
    }

    IReadOnlyList<Category> GetCurrentCategories()
    {
        return currentParentId is not null
            ? _categoriesCollection.Categories[currentParentId.Value].Children
            : _categoriesCollection.PrimaryCategories;
    }
    void NextCategory( Category c )
    {
        currentParentId = c.Id;
        StateHasChanged();
    }
    void PreviousCategory()
    {
        if (currentParentId is null)
            return;

        Category parent = _categoriesCollection.Categories[currentParentId.Value];
        currentParentId = parent.ParentId;

        StateHasChanged();
    }

    void Exit()
    {
        OnExitCallback();
    }
}