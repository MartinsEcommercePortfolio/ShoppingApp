@using Shop.Types.Categories
@using Shop.Utilities
@using Shop.Infrastructure
@using Shop.Razor.Shared.Components

@if (!_loaded)
{
    <div class="main-nav-categories" style="min-height: 150px">
        <LoadingPanelComponent @ref="@_loader" Message="Loading Categories..."/>
    </div>
}
else if (!GetCurrentCategories().Any())
{
    <div class="main-nav-categories d-flex flex-column align-items-center justify-content-start p-0 ">
        <p class="w-100 mx-auto text-center text-dark">None.</p>
    </div>
}
else
{
    <div class="main-nav-categories d-flex align-items-center justify-content-start py-2">
        @if (_currentParentId.HasValue)
        {
            <button class="btn btn-link nav-link me-2" @onclick="PreviousCategory">
                <i class="fa fa-caret-left me-1"></i> Back
            </button>
        }
        else if (ShowExitButton)
        {
            <button class="btn btn-link nav-link me-2" @onclick="Exit">
                <i class="fa fa-caret-left me-1"></i> Back
            </button>
        }
        <h4 class="main-nav-categories-title">Categories</h4>
    </div>
    <ul class="nav flex-column mt-0 pt-0 position-relative">
        @foreach ( Category c in GetCurrentCategories() )
        {
            <li class="nav-item d-flex align-items-center text-start">
                <a class="btn btn-link text-start nav-link flex-grow-1" href="@Consts.GetProductSearchUrl( $"?CategoryId={c.Id}&" )">
                    @c.Name
                </a>
                @if (c.Children.Any())
                {
                    <button class="btn btn-link" @onclick="@(() => NextCategory( c ))">
                        <i class="fa fa-caret-right"></i>
                    </button>
                }
            </li>
        }
    </ul>   
}

@code 
{
    [Parameter] public Action OnExitCallback { get; set; } = default!;
    [Parameter] public bool ShowExitButton { get; set; } = false;
    [Inject] public CategoriesCache Service { get; set; } = default!;
    [Inject] public NavigationManager Navigation { get; set; } = default!;

    LoadingPanelComponent _loader = default!;
    CategoriesCollection _categoriesCollection = CategoriesCollection.None();
    Guid? _currentParentId = null;
    bool _loaded = false;
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

    }
    protected override async Task OnAfterRenderAsync( bool firstRender )
    {
        await base.OnAfterRenderAsync( firstRender );
        if (!firstRender)
            return;
        _ = LoadCategoriesAsync();
    }

    async Task LoadCategoriesAsync()
    {
        _loader.ToggleLoading( true, "Loading categories..." );
        await Utils.Delay();
        var getResult = await Service.GetCategories();
        if (getResult)
            _categoriesCollection = getResult.Data;
        _loaded = true;
        StateHasChanged();
    }

    IReadOnlyList<Category> GetCurrentCategories()
    {
        return _currentParentId is not null
            ? _categoriesCollection.Categories[_currentParentId.Value].Children
            : _categoriesCollection.PrimaryCategories;
    }
    void NextCategory( Category c )
    {
        _currentParentId = c.Id;
        StateHasChanged();
    }
    void PreviousCategory()
    {
        if (_currentParentId is null)
            return;

        Category parent = _categoriesCollection.Categories[_currentParentId.Value];
        _currentParentId = parent.ParentId;

        StateHasChanged();
    }
    void Exit()
    {
        OnExitCallback();
    }
    void Navigate( Category c ) =>
        Navigation.NavigateTo( $"{Consts.PageProductSearch}?CategoryId={c.Id}", true );
}