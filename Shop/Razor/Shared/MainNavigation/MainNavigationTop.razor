@using Shop.Utilities
@using Microsoft.AspNetCore.Components.Authorization
@using Shop.Infrastructure.Authentication
@using Shop.Razor.Shared.Components
@using System.Security.Claims
@using Shop.Infrastructure
@implements IDisposable
@inject IJSRuntime JsRuntime

@if (_mobileView) {
    <!-- MOBILE -->
    <div class="top-nav-mobile">
        <!-- TOP ROW -->
        <div class="top-nav-content content-container top-nav-mobile-top">
            <!-- LOGO -->
            <button class="btn logo" @onclick="@GoHome">
                <img class="top-nav-item" src="/images/logo.svg" alt="Blazor">
            </button>
            <!-- ICONS -->
            <div class="top-nav-mobile-right">
                <!-- ACCOUNT -->
                <button class="btn btn-icon" @onclick="@OnClickAccountButton">
                    <i class="fa fa-user fa-lg d-block position-relative">
                         @if (_authenticated)
                        {
                            <div class="top-nav-signed-in" style="top: -12px; right: -5px"></div>
                        }
                    </i>
                </button>
                <button class="btn btn-icon" @onclick="GoToCart">
                    <i class="fa-solid fa-cart-shopping d-block position-relative">
                        <div class="top-nav-cart-count" style="top: -12px; right: -12px">@_cartCount</div>
                    </i>
                </button>
                <!-- SIDEBAR -->
                <button class="btn btn-icon pe-0" @onclick="@OpenSide">
                    <i class="fa fa-bars fa-lg"></i>
                </button>
            </div>
        </div>
        <!-- BOTTOM ROW -->
        <div class="top-nav-content content-container pb-2">
            <MainNavigationSearchBar/>
        </div>
    </div>
    <!-- SIDEBAR -->
    <MainNavigationSide @ref="_sidebar" TopMenu="@this"/>
}
else {
    <!-- UPPER -->
    <div class="top-nav-upper">
        <div class="top-nav-content content-container">
            <!-- TOP LEFT -->
            <nav class="top-nav-upper-left">
                <a href="@Consts.PageSupport">Help & Contact</a>
                <a href="@Consts.GetProductSearchUrl( "?" )">All Products</a>
                <a href="@Consts.GetProductSearchUrl( "?IsFeatured=true&" )">Featured Items</a>
                <a href="@Consts.GetProductSearchUrl( "?IsOnSale=true&" )">Top Deals</a>
            </nav>
            <!-- TOP RIGHT -->
            <div class="top-nav-upper-right">
                <!-- ACCOUNT -->
                <div class="position-relative" @onmouseenter="@ShowAccountDropdown" @onmouseleave="@HideAccountDropdown">
                    <button class="btn top-nav-button btn-link-light" @onclick="OnClickAccountButton">
                        <div class="top-nav-upper-right-label">
                            <span class="d-block"><small>@_username</small></span>
                        </div>
                        <div class="btn btn-icon">
                            <i class="fa fa-user position-relative">
                                @if (_authenticated)
                                {
                                    <div class="top-nav-signed-in" style="top: 0; right: 17px"></div>
                                }
                            </i>
                        </div>
                    </button>

                    @if (_showUserOptions) {
                        <nav class="top-nav-user-options position-absolute shadow">
                            <ul class="nav justify-content-center w-100">
                                <AccountMenuOptions/>
                            </ul>
                        </nav>
                    }
                </div>
                <!-- CART -->
                <button class="btn top-nav-button btn-link-light pe-0 me-0 position-relative" @onclick="GoToCart">
                    <i class="fa-solid fa-cart-shopping position-relative">
                        <div class="top-nav-cart-count" style="top: -7px; right: 16px">@_cartCount</div>
                    </i>
                </button>
            </div>
        </div>
    </div>
    <!-- LOWER -->
    <div class="top-nav-lower">
        <div class="top-nav-content content-container">
            <!-- LOGO -->
            <a class="logo" href="@Consts.PageHome">
                <img class="top-nav-item" src="/images/logo.svg" alt="Blazor">
            </a>
            <!-- CATEGORIES -->
            <div class="btn position-relative mx-2 top-nav-categories-button" @onmouseenter="ShowDesktopCategories" @onmouseleave="HideDesktopCategories">
                <strong class="btn-link-light">Shop By Category &nbsp; <i class="fa fa-caret-down"></i></strong>
                @if (_showDesktopCategories) 
                {
                    <div class="top-nav-categories-wrapper position-absolute shadow">
                        <MainNavigationCategories ShowExitButton="@(false)"/>
                    </div>
                }
            </div>
            <!-- SEARCH BAR -->
            <div class="d-flex flex-grow-1 mx-0 top-nav-item">
                <MainNavigationSearchBar/>
            </div>
        </div>
    </div>
}

@code 
{
    [CascadingParameter( Name = "layout" )]
    public MainLayout Layout { get; init; } = default!;

    [Inject] public NavigationManager Navigation { get; init; } = default!;
    [Inject] public AuthenticationStateManager AuthenticationStateManager { get; init; } = default!;
    [Inject] public CartManager Cart { get; init; } = default!;
    
    MainNavigationSide? _sidebar;
    DotNetObjectReference<MainNavigationTop> _dotNetRef = default!;

    const string DefaultUserText = "Login/Register";
    int _screenWidth;
    int _screenHeight;

    bool _mobileView = false;
    bool _showDesktopCategories = false;
    bool _showUserOptions = false;
    bool _authenticated = false;
    string _username = DefaultUserText;
    int _cartCount = 0;

    public void Dispose()
    {
        _dotNetRef.Dispose();
        AuthenticationStateManager.OnStateChanged -= OnAuthStateChanged;
        Cart.OnCartCountChanged -= OnCartCountChanged;
    }
    protected override async Task OnInitializedAsync()
    {
        _dotNetRef = DotNetObjectReference.Create( this );
        AuthenticationStateManager.OnStateChanged += OnAuthStateChanged;
        Cart.OnCartCountChanged += OnCartCountChanged;
        var cartItems = await Cart.Get();
        _cartCount = cartItems
            ? cartItems.Data.Count()
            : 0;
        await JsRuntime.InvokeVoidAsync( "resizeObserverInterop.initialize", _dotNetRef );
    }
    [JSInvokable] public void OnResize( int width, int height )
    {
        _screenWidth = width;
        _screenHeight = height;
        _mobileView = _screenWidth < 900;
        StateHasChanged();
    }

    void OnCartCountChanged( int newCount )
    {
        _cartCount = newCount;
    }

    void OnAuthStateChanged( Task<AuthenticationState> state )
    {
        HandleNewSession( state.Result );
    }
    void HandleNewSession( AuthenticationState state )
    {
        _authenticated = state.User.Identity is not null && state.User.Identity.IsAuthenticated;
        _username = (_authenticated ? state.User.Identity!.Name : DefaultUserText)!;
        _sidebar?.OnAccountChange( _username );
        StateHasChanged();
    }
    void ShowDesktopCategories()
    {
        _showDesktopCategories = true;
        StateHasChanged();
    }
    void HideDesktopCategories()
    {
        _showDesktopCategories = false;
        StateHasChanged();
    }
    void ShowAccountDropdown()
    {
        _showUserOptions = _authenticated;
        StateHasChanged();
    }
    void HideAccountDropdown()
    {
        _showUserOptions = false;
        StateHasChanged();
    }
    void OnClickAccountButton()
    {
        string url = _authenticated
            ? Consts.PageAccountProfile
            : Consts.PageLoginOrRegister;

        Navigation.NavigateTo( url, true );
    }
    void GoHome()
    {
        Navigation.NavigateTo( Consts.PageHome, true );
    }
    void GoToCart()
    {
        Navigation.NavigateTo( Consts.PageCart, true );
    }
    void OpenSide()
    {
        _sidebar?.Open();
    }
}