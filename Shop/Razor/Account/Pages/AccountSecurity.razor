@page "/account/security"
@using System.ComponentModel.DataAnnotations
@using Shop.Infrastructure.Common.ReplyTypes
@using Shop.Utilities
@inherits AccountPageBase
@layout AccountLayout

<PageTitle>Account Security</PageTitle>

<!-- WRAPPER -->
<div class="user-container-small">
    <!-- PASSWORD -->
    <h3>Manage Account Password</h3>
    <!-- FORM -->
    <EditForm Model="@_passwordModel" FormName="change-password" OnValidSubmit="OnValidSubmitPassword" method="post">
        <DataAnnotationsValidator/>
        <ValidationSummary class="text-danger" role="alert"/>
        <!-- OLD PASSWORD -->
        <div class="form-floating mb-3">
            <InputText type="password" @bind-Value="@_passwordModel.OldPassword" id="old-password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="Please enter your old password."/>
            <label for="old-password" class="form-label">Old Password</label>
            <ValidationMessage For="@(() => _passwordModel.OldPassword)" class="text-danger"/>
        </div>
        <!-- NEW PASSWORD -->
        <div class="form-floating mb-3">
            <InputText type="password" @bind-Value="@_passwordModel.NewPassword" id="new-password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Please enter your new password."/>
            <label for="new-password" class="form-label">New Password</label>
            <ValidationMessage For="@(() => _passwordModel.NewPassword)" class="text-danger"/>
        </div>
        <!-- CONFIRM PASSWORD -->
        <div class="form-floating mb-3">
            <InputText type="password" @bind-Value="@_passwordModel.ConfirmPassword" id="confirm-password" class="form-control" autocomplete="confirm-password" aria-required="true" placeholder="Please confirm your new password."/>
            <label for="confirm-password" class="form-label">Confirm Password</label>
            <ValidationMessage For="@(() => _passwordModel.ConfirmPassword)" class="text-danger"/>
        </div>
        <!-- SUBMIT -->
        <button type="submit" class="btn btn-submit btn-icon">
            <i class="fa fa-key me-2"></i>Update Password
        </button>
    </EditForm>
    
    <hr/>
    
    <!-- RECOVERY CODES -->
    <h3>Generate Recovery Codes</h3>
    <p>Generate a list of one-time use codes that you may use to login/recover your account if you lose access to you password, email, or two-factor.</p>
    <p>This will invalidate any previously generated codes.</p>
    <button @onclick="@OnValidSubmitRecoveryCodes" class="btn btn-submit btn-icon">
        <i class="fa fa-key me-2"></i>Generate
    </button>
    <div class="mt-3 @GetRecoveryCodesCss()">
        <ul>
            @foreach ( string c in _generatedRecoveryCodes )
            {
                <li>@c</li>
            }
        </ul>
    </div>
    
    <hr/>
    
    <!-- TWO FACTOR -->
    <h3>Two-Factor Authentication</h3>
    <!-- TOGGLE -->
    <div class="form-check form-switch mb-3">
        <checkbox id="enable2fa" @onchange="@(async(e)=>await Toggle2Fa(e))" class="form-check-input" aria-required="true"/>
        <label for="enable2fa" class="form-check-label">@Get2FaText()</label>
    </div>
    @if (_twoFactorModel.IsEnabled)
    {
        <!-- FORM -->
        <EditForm Model="@_twoFactorModel" FormName="toggle2fa" OnValidSubmit="OnValidSubmitTwoFactor" method="post">
            <!-- EMAIL -->
            <div class="form-floating mb-3">
                <InputText @bind-Value="@_twoFactorModel.TwoFactorEmail" type="email" id="email" class="form-control" autocomplete="email" aria-required="true" placeholder="Email"/>
                <ValidationMessage For="@(() => _twoFactorModel.TwoFactorEmail)" class="text-danger"/>
                <label for="email" class="form-label">Two-Factor Email</label>
            </div>
            <!-- SUBMIT -->
            <button type="submit" class="btn btn-submit btn-icon">
                <i class="fa fa-key me-2"></i>Update Two Factor
            </button>
        </EditForm>
    }
</div>

@code 
{
    UpdatePasswordRequest _passwordModel = new();
    TwoFactorModel _twoFactorModel = new();
    IEnumerable<string> _generatedRecoveryCodes = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var httpReply = await Http.GetAsyncAuthenticated<ViewSecurityResponse>( Consts.ApiViewSecurity );
        if (!httpReply)
        {
            PushError( httpReply, "Failed to get account security information." );
            StopLoading();
            return;
        }

        _twoFactorModel = new TwoFactorModel() {
            IsEnabled = httpReply.Data.TwoFactorEnabled,
            TwoFactorEmail = httpReply.Data.TwoFactorEmail
        };
        StateHasChanged();
        StopLoading();
    }
    async Task OnValidSubmitPassword()
    {
        StartLoading( "Updating Password..." );
        
        var reply = await Http.PutAsyncAuthenticated<bool>( Consts.ApiUpdatePassword, _passwordModel );
        if (!reply) {
            PushError( reply, "Failed to update password." );
            StopLoading();
            return;
        }
        
        PushSuccess( "Password successfully updated." );
        _passwordModel = new UpdatePasswordRequest();
        StopLoading();
    }
    async Task OnValidSubmitRecoveryCodes()
    {
        StartLoading( "Generating recovery codes..." );

        var reply = await Http.PostAsyncAuthenticated<IEnumerable<string>>( Consts.ApiGenerateRecoveryCodes );
        if (!reply)
        {
            PushError( reply, "Failed to generate recovery codes." );
            StopLoading();
            return;
        }

        PushSuccess( "Successfully generated recovery codes." );
        _generatedRecoveryCodes = reply.Data;
        StateHasChanged();
        StopLoading();
    }
    async Task OnValidSubmitTwoFactor()
    {
        StartLoading( "Updating Two-Factor Authentication..." );
        
        var httpReply = await Http.PutAsyncAuthenticated<bool>( Consts.ApiUpdate2Fa, _twoFactorModel );
        if (!httpReply)
        {
            PushError( httpReply, "Failed to update two factor authentication." );
            StopLoading();
            return;
        }

        PushSuccess( "Updated two factor authentication." );
        StopLoading();
    }
    async Task Toggle2Fa( ChangeEventArgs e )
    {
        bool enabled = (bool) (e.Value ?? false);
        _twoFactorModel.IsEnabled = enabled;

        if (enabled)
        {
            StateHasChanged();
            return;
        }
        
        StartLoading( "Disabling two factor authentication..." );
        
        var reply = await Http.PutAsyncAuthenticated<bool>( Consts.ApiDisable2Fa );
        if (!reply)
        {
            PushError( reply, "Failed to disable two factor authentication." );
            StopLoading();
            return;
        }
        
        PushSuccess( "Updated two factor authentication." );
        _twoFactorModel = new TwoFactorModel() { IsEnabled = false};
        StopLoading();
    }

    string Get2FaText() =>
        _twoFactorModel.IsEnabled ? "Disable 2fa" : "Enable 2fa";
    string GetRecoveryCodesCss() =>
        _generatedRecoveryCodes.Any() ? "d-flex" : "d-none";

    readonly record struct ViewSecurityResponse(
        bool TwoFactorEnabled,
        string? TwoFactorEmail );
    sealed class TwoFactorModel
    {
        public bool IsEnabled { get; set; }
        [Required( ErrorMessage = "Email is required." ), EmailAddress( ErrorMessage = "Invalid email address." )] 
        public string? TwoFactorEmail { get; set; } = string.Empty;
    }
    sealed class UpdatePasswordRequest
    {
        [Required, DataType( DataType.Password ), Display( Name = "Current password" )]
        public string OldPassword { get; set; } = string.Empty;

        [Required, StringLength( 100, ErrorMessage = "The password must be at least 8 and at max 40 characters long.", MinimumLength = 8 ), DataType( DataType.Password ), Display( Name = "New password" )]
        public string NewPassword { get; set; } = string.Empty;

        [DataType( DataType.Password ), Display( Name = "Confirm new password" ), Compare( "NewPassword", ErrorMessage = "The new password and confirmation password do not match." )]
        public string ConfirmPassword { get; set; } = string.Empty;
    }
}