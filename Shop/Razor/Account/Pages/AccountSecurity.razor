@page "/account/security"
@using System.ComponentModel.DataAnnotations
@using Shop.Infrastructure.Common.ReplyTypes
@using Shop.Utilities
@inherits AccountPageBase
@layout AccountLayout

<PageTitle>Account Security</PageTitle>

<!-- PASSWORD -->
<h3>Password</h3>
<hr class="divider"/>
<!-- FORM -->
<EditForm Model="@_passwordModel" FormName="change-password" OnValidSubmit="OnValidSubmitPasswordAsync" method="post">
    <DataAnnotationsValidator/>
    <ValidationSummary class="text-danger" role="alert"/>
    <!-- OLD PASSWORD -->
    <div class="form-floating mb-3">
        <InputText type="password" @bind-Value="@_passwordModel.OldPassword" id="old-password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="Please enter your old password."/>
        <label for="old-password" class="form-label">Old Password</label>
        <ValidationMessage For="@(() => _passwordModel.OldPassword)" class="text-danger"/>
    </div>
    <!-- NEW PASSWORD -->
    <div class="form-floating mb-3">
        <InputText type="password" @bind-Value="@_passwordModel.NewPassword" id="new-password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Please enter your new password."/>
        <label for="new-password" class="form-label">New Password</label>
        <ValidationMessage For="@(() => _passwordModel.NewPassword)" class="text-danger"/>
    </div>
    <!-- CONFIRM PASSWORD -->
    <div class="form-floating mb-3">
        <InputText type="password" @bind-Value="@_passwordModel.ConfirmPassword" id="confirm-password" class="form-control" autocomplete="confirm-password" aria-required="true" placeholder="Please confirm your new password."/>
        <label for="confirm-password" class="form-label">Confirm Password</label>
        <ValidationMessage For="@(() => _passwordModel.ConfirmPassword)" class="text-danger"/>
    </div>
    <!-- SUBMIT -->
    <button type="submit" class="btn btn-submit btn-icon"><i class="fa fa-key me-2"></i>Update Password</button>
</EditForm>

<!-- TWO FACTOR -->
<h3>Two Factor</h3>
<hr class="divider"/>
<!-- CHECKBOX -->
<div class="form-check form-switch mb-3">
    <checkbox @onchange="@(async (e) => await On2faChange(e))" id="2fa" class="form-check-input" aria-required="true"/>
    <label for="2fa" class="form-check-label">Enable Two Factor Login?</label>
</div>

@code 
{
    UpdatePasswordRequest _passwordModel = new();
    
    async Task OnValidSubmitPasswordAsync()
    {
        StartLoading( "Updating Password..." );
        
        Reply<bool> result = await Http.PutAsyncAuthenticated<bool>( Consts.ApiUpdatePassword, _passwordModel );

        if (!result.IsOkay) {
            PushError( result, "Failed to update password." );
            StopLoading();
            return;
        }
        
        PushSuccess( "Password successfully updated." );
        _passwordModel = new UpdatePasswordRequest();
        StopLoading();
    }
    async Task On2faChange( ChangeEventArgs args )
    {
        bool value = (bool) (args.Value ?? throw new Exception( "Invalid 2fa ChangeEventArgs" ));
        
        StartLoading( value ? "Enabling Two Factor Authentication" : "Disabling Two Factor Authentication" );
        
        Reply<bool> httpReply = await Http.PutAsyncAuthenticated<bool>( Consts.ApiUpdate2Fa, _passwordModel );
        if (!httpReply.IsOkay)
        {
            PushError( httpReply, "Failed to update two factor authentication." );
            StopLoading();
            return;
        }

        PushSuccess( "Updated two factor authentication." );
        StopLoading();
    }
    
    sealed class TwoFactorModel
    {
        public bool IsEnabled { get; set; }
        public string TwoFactorEmail { get; set; } = string.Empty;
    }

    sealed class UpdatePasswordRequest
    {
        [Required, DataType( DataType.Password ), Display( Name = "Current password" )]
        public string OldPassword { get; set; } = string.Empty;

        [Required, StringLength( 100, ErrorMessage = "The password must be at least 8 and at max 40 characters long.", MinimumLength = 8 ), DataType( DataType.Password ), Display( Name = "New password" )]
        public string NewPassword { get; set; } = string.Empty;

        [DataType( DataType.Password ), Display( Name = "Confirm new password" ), Compare( "NewPassword", ErrorMessage = "The new password and confirmation password do not match." )]
        public string ConfirmPassword { get; set; } = string.Empty;
    }
}