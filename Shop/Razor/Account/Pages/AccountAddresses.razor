@page "/account/addresses"
@using Shop.Infrastructure.Common.Optionals
@using Shop.Utilities
@using Shop.Razor.Shared.Components
@using Shop.Infrastructure.Authentication.Types
@inherits AccountPageBase
@layout AccountLayout

<PageTitle>Manage Addresses</PageTitle>

@if (_isEditing) {
    <!-- EDIT -->
    <!-- TITLE -->
    <div class="d-flex flex-row align-items-center justify-content-between">
        <h3 class="mb-0">@GetEditTitle()</h3>
        <button class="btn btn-secondary btn-icon" @onclick="@OnClickCancelEdit">Cancel<i class="fa fa-window-close ms-2"></i></button>
    </div>
    <hr class="divider"/>
    <!-- FORM -->
    <EditForm Model="@_editModel" FormName="edit-address" OnValidSubmit="OnClickSave" method="post">
        <DataAnnotationsValidator/>
        <ValidationSummary class="text-danger" role="alert"/>
        <!-- GRID X -->
        <div class="form-floating mb-3">
            <InputNumber TValue="int" type="number" @bind-Value="@_editModel.PosX" id="gridX" class="form-control" autocomplete="gridX" aria-required="true" placeholder="GridX"/>
            <label for="gridX" class="form-label">GridX</label>
            <ValidationMessage For="@(() => _editModel.PosX)" class="text-danger"/>
        </div>
        <!-- GRID Y -->
        <div class="form-floating mb-3">
            <InputNumber TValue="int" type="number" @bind-Value="@_editModel.PosY" id="gridY" class="form-control" autocomplete="gridY" aria-required="true" placeholder="GridY"/>
            <label for="gridY" class="form-label">GridY</label>
            <ValidationMessage For="@(() => _editModel.PosY)" class="text-danger"/>
        </div>
        <!-- SUBMIT -->
        <button class="btn btn-submit btn-icon">Save Changes<i class="fa fa-paper-plane ms-2"></i></button>
    </EditForm>
}
else {
    <!-- VIEW -->
    <!-- VIEW TOP-->
    <div class="d-flex flex-row align-items-center justify-content-between">
        <!-- TOP LEFT -->
        <h3 class="mb-0">Addresses</h3>
        <!-- TOP RIGHT -->
        <div class="d-flex flex-row align-items-stretch justify-content-between">
            <!-- ROWS DROPDOWN -->
            <div class="dropdown me-3 h-100">
                <!-- DROPDOWN TOGGLE -->
                <button class="btn btn-secondary dropdown-toggle h-100" type="button" id="RowsPerPage" data-bs-toggle="dropdown" aria-expanded="false">
                    Display: @_rowsPerPageSelection
                </button>
                <!-- DROPDOWN LIST -->
                <ul class="dropdown-menu" aria-labelledby="RowsPerPage">
                    @for ( int i = 0; i < _rowCounts.Length; i++ ) {
                        int localIndex = i; // Create a local copy of the loop variable because of enumeration
                        <li><button class="dropdown-item" type="button" @onclick="async () => await UpdateRowsPerPage( localIndex )">@_rowCounts[localIndex]</button></li>
                    }
                </ul>
            </div>
            <!-- ADD ADDRESS -->
            <button class="btn btn-primary btn-icon" @onclick="@OnClickNew">Add Address<i class="fa fa-plus ms-2"></i></button>
        </div>
    </div>
    
    <hr class="divider"/>
    
    <!-- VIEW BOTTOM -->
    if (_pagedAddresses.Count < 1) {
        <p>No Addresses Found.</p>
    }
    else {
        <!-- VIEW HEADER -->
        <p class="mb-3 text-muted">@GetViewHeader()</p>
        <hr/>
        <!-- VIEW TABLE -->
        <table class="table">
            <!-- TABLE HEADER -->
            <thead>
            <tr>
                <th>Id</th>
                <th>GridX</th>
                <th>GridY</th>
                <th class="text-end">Actions</th>
            </tr>
            </thead>
            <!-- TABLE BODY -->
            <tbody>
            @foreach ( AddressModel address in _pagedAddresses ) {
                <tr>
                    <td>@address.Id</td>
                    <td>@address.PosX</td>
                    <td>@address.PosY</td>
                    <td class="text-end">
                        <div class="d-flex flex-row align-items-stretch justify-content-end">
                            <!-- Edit Address -->
                            <button class="btn btn-primary btn-sm btn-icon me-3" @onclick="() => OnClickEdit( address )">Edit<i class="fa fa-edit ms-2"></i></button>
                            <!-- Delete Address -->
                            <button class="btn btn-primary btn-sm btn-icon" @onclick="@(async () => await OnClickDelete( address ))">Delete<i class="fa fa-trash ms-2"></i></button>
                        </div>
                    </td>
                </tr>
            }
            </tbody>
        </table>
    }
    
    <!-- PAGINATION -->
    <PaginationPanel @ref="@_paginationPanel" OnPageChange="@OnPaginationChange"/>
}

@code {
    AddressModel _editModel = new();
    List<AddressModel> _pagedAddresses = [];
    readonly int[] _rowCounts = [5, 10, 20];
    int _rowsPerPageSelection = 5;
    int _currentPage = 1;
    int _totalCount = 0;
    bool _isEditing;
    bool _isNew;
    PaginationPanel _paginationPanel = default!;

    protected override async Task OnParametersSetAsync()
    {
        if (FirstLoad)
        {
            FirstLoad = false;
            await base.OnParametersSetAsync();
            await LoadFreshAddresses();
        }
    }

    async Task GetPagedAddresses( int page )
    {
        StartLoading( "Loading Addresses..." );
        
        Dictionary<string, object> parameters = [];
        parameters.Add( "Page", _currentPage );
        parameters.Add( "PageSize", _rowsPerPageSelection );
        Reply<AddressSearchResponse> result = await Http.TryGetRequest<AddressSearchResponse>( Consts.ApiGetAddresses, parameters, await GetAuthToken() );

        if (!result.IsOkay) {
            PushError( result, "An error occured while fetching addresses." );
            StopLoading();
            return;
        }
        
        UpdateLocalState( result, page );
        StopLoading();
    }
    async Task OnClickSave()
    {
        StartLoading( "Saving Address..." );

        Reply<bool> reply = _isNew
            ? await Http.TryPutRequest<bool>( Consts.ApiAddAddress, _editModel, await GetAuthToken() )
            : await Http.TryPostRequest<bool>( Consts.ApiUpdateAddress, _editModel, await GetAuthToken() );

        if (!reply.IsOkay) {
            PushError( reply, "Failed to save address." );
            StopLoading();
            return;
        }

        PushSuccess( "Address Saved." );
        
        if (_isNew)
            await LoadFreshAddresses();
        else
            StopLoading();
    }
    async Task OnClickDelete( AddressModel address )
    {
        StartLoading( "Deleting Address..." );

        Dictionary<string, object> parameters = new() { { "AddressId", address.Id } };
        Reply<bool> reply = await Http.TryDeleteRequest<bool>( Consts.ApiDeleteAddress, parameters, await GetAuthToken() );

        if (!reply.IsOkay) {
            PushError( reply, "Failed to delete address." );
            StopLoading();
            return;
        }
        
        PushSuccess( "Address Deleted." );
        await LoadFreshAddresses();
    }
    
    void UpdateLocalState( Reply<AddressSearchResponse> result, int page )
    {
        _pagedAddresses = result.Data.Addresses;
        _totalCount = result.Data.TotalCount;

        int count = result.IsOkay ? result.Data.TotalCount : 0;
        
        _paginationPanel.Set( page, _rowsPerPageSelection, count );

        _isEditing = false;
        _isNew = false;
        StateHasChanged();
    }
    void OnClickNew()
    {
        _editModel = new AddressModel();
        _isEditing = true;
        _isNew = true;
        StateHasChanged();
    }
    void OnClickEdit( AddressModel address )
    {
        _editModel = address;
        _isEditing = true;
        _isNew = false;
        StateHasChanged();
    }
    void OnClickCancelEdit()
    {
        _isEditing = false;
        _isNew = false;
        StateHasChanged();
    }

    async Task LoadFreshAddresses() =>
        await GetPagedAddresses( 0 );
    async Task UpdateRowsPerPage( int rows )
    {
        _rowsPerPageSelection = rows;
        await GetPagedAddresses( 0 );
    }
    async Task OnPaginationChange( int page )
    {
        _currentPage = page;
        await GetPagedAddresses( page );
    }

    string GetEditTitle() =>
        _isNew ? "New Address" : "Edit Address";
    string GetViewHeader() =>
        $"Viewing {Math.Min(_rowsPerPageSelection, _totalCount)} results of {_totalCount} total.";
    
    readonly record struct AddressSearchResponse(
        int TotalCount,
        List<AddressModel> Addresses );
    readonly record struct AddressDeleteRequest(
        Guid AddressId );
    
}