@page "/account/addresses"
@using Shop.Utilities
@using Shop.Razor.Shared.Components
@using Shop.Infrastructure.Common.ReplyTypes
@inherits AccountPageBase
@layout AccountLayout

<PageTitle>Manage Addresses</PageTitle>

<!-- EDIT -->
@if (_isEditing) {
    <!-- WRAPPER -->
    <div class="user-container-small">
        <!-- TITLE -->
        <div class="d-flex flex-row align-items-center justify-content-between">
            <h3 class="mb-0 fw-normal">@GetEditTitle()</h3>
            <button class="btn btn-link btn-icon text-decoration-none" @onclick="@(async () => await OnClickCancelEdit())">
                <i class="fa fa-arrow-left me-2"></i>Back
            </button>
        </div>
        <hr/>
        <!-- FORM -->
        <EditForm Model="@_editAddress" FormName="edit-address" OnValidSubmit="OnClickSave" method="post">
            <DataAnnotationsValidator/>
            <ValidationSummary class="text-danger" role="alert"/>
            <!-- IS PRIMARY -->
            <div class="form-check form-switch mb-3 text-start">
                <InputCheckbox @bind-Value="@_editAddress.IsPrimary" id="isPrimary" class="form-check-input" aria-required="true"/>
                <label for="isPrimary" class="form-check-label ms-1">Set as Primary?</label>
            </div>
            <!-- Name -->
            <div class="form-floating mb-3">
                <InputText type="name" @bind-Value="@_editAddress.Name" id="name" class="form-control" autocomplete="name" aria-required="true" placeholder="Name"/>
                <ValidationMessage For="@(() => _editAddress.Name)" class="text-danger"/>
                <label for="name" class="form-label">Name</label>
            </div>
            <!-- GRID X -->
            <div class="form-floating mb-3">
                <InputNumber TValue="int" type="number" @bind-Value="@_editAddress.WorldGridPosX" id="gridX" class="form-control" autocomplete="gridX" aria-required="true" placeholder="GridX"/>
                <label for="gridX" class="form-label">GridX</label>
                <ValidationMessage For="@(() => _editAddress.WorldGridPosX)" class="text-danger"/>
            </div>
            <!-- GRID Y -->
            <div class="form-floating mb-3">
                <InputNumber TValue="int" type="number" @bind-Value="@_editAddress.WorldGridPosY" id="gridY" class="form-control" autocomplete="gridY" aria-required="true" placeholder="GridY"/>
                <label for="gridY" class="form-label">GridY</label>
                <ValidationMessage For="@(() => _editAddress.WorldGridPosY)" class="text-danger"/>
            </div>
            <!-- SUBMIT -->
            <button class="btn btn-full btn-primary">
                <i class="fa fa-paper-plane me-2"></i>
                @GetSubmitText()
            </button>
        </EditForm>
    </div>
}
else {
    <!-- VIEW -->
    <!-- WRAPPER -->
    <div class="user-container-large">
        <!-- VIEW TOP-->
        <div class="d-flex flex-row align-items-center justify-content-between">
            <!-- TOP LEFT -->
            <h3 class="d-block mb-0 text-start fw-normal">Manage Addresses</h3>
            <!-- TOP RIGHT -->
            <div class="d-flex flex-row align-items-stretch justify-content-between">
                <!-- ROWS DROPDOWN -->
                <div class="dropdown me-3 h-100">
                    <!-- DROPDOWN TOGGLE -->
                    <button class="btn btn-icon btn-outline-secondary dropdown-toggle h-100" type="button" id="RowsPerPage" data-bs-toggle="dropdown" aria-expanded="false">
                        @_pageSize
                    </button>
                    <!-- DROPDOWN LIST -->
                    <ul class="dropdown-menu" aria-labelledby="RowsPerPage">
                        @foreach ( int pageSize in _pageSizes )
                        {
                            <li>
                                <button class="dropdown-item" type="button" @onclick="async () => await OnPageSizeChanged( pageSize )">
                                    @pageSize
                                </button>
                            </li>
                        }
                    </ul>
                </div>
                <!-- ADD ADDRESS -->
                <button class="btn btn-primary btn-icon" @onclick="@OnClickNew">
                    <i class="fa fa-plus"></i>
                </button>
            </div>
        </div>
        
        <!-- VIEW RESULT INFO -->
        <hr/>
        <span class="text-start text-muted">@GetViewHeader()</span>
        <hr/>
        
        <!-- VIEW BOTTOM -->
        @if (_pagedAddresses.Count > 0) {
            <!-- VIEW TABLE -->
            <div class="table-responsive">
                <table class="table align-middle table-striped table-hover">
                    <!-- TABLE HEADER -->
                    <thead>
                    <tr class="text-start">
                        <th>Name</th>
                        <th>GridX</th>
                        <th>GridY</th>
                        <th class="text-end">Actions</th>
                    </tr>
                    </thead>
                    <!-- TABLE BODY -->
                    <tbody>
                    @foreach ( AddressModel address in _pagedAddresses )
                    {
                        <tr class="text-start">
                            <td>
                                @if (address.IsPrimary)
                                {
                                    <i class="fa-solid fa-star fa-2xs text-warning me-1"></i>
                                }
                                @address.Name
                            </td>
                            <td class="ps-3">@address.WorldGridPosX</td>
                            <td class="ps-3">@address.WorldGridPosY</td>
                            <td>
                                <div class="d-flex flex-row align-items-stretch justify-content-end">
                                    <!-- Edit Address -->
                                    <button class="btn btn-sm btn-icon p-2 me-3 btn-primary" @onclick="() => OnClickEdit( address )">
                                        <i class="fa fa-edit"></i>
                                    </button>
                                    <!-- Delete Address -->
                                    <button class="btn btn-sm p-2 btn-icon btn-warning" @onclick="@(async () => await OnClickDelete( address ))">
                                        <i class="fa fa-trash"></i>
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>
            </div>
        }
        <!-- PAGINATION -->
        <div class="mx-auto">
            <PaginationPanel @ref="@_paginationPanel"/>
        </div>

        <!-- TESTING -->
        <div class="mx-auto">
            <hr/>
            <h4>Development</h4>
            <button class="btn btn-full btn-primary" @onclick="@(async () => await OnClickTestGenerate())">Test Generate</button>
        </div>
    </div>
}

@code {
    async Task OnClickTestGenerate()
    {
        for ( int i = 0; i < 20; i++ )
        {
            AddressModel testModel = new() {
                Name = $"Test Address: {i}",
                WorldGridPosX = i,
                WorldGridPosY = i * i
            };

            await Http.PutAsyncAuthenticated<bool>( Consts.ApiAddAddress, testModel );
        }

        await LoadFreshAddresses();
    }
    
    AddressModel _editAddress = new();
    List<AddressModel> _pagedAddresses = [];
    readonly int[] _pageSizes = [5, 10, 20];
    int _pageSize = 5;
    int _currentPage = 1;
    int _totalCount = 0;
    bool _isEditing;
    bool _isNew;
    PaginationPanel _paginationPanel = default!;

    protected override async Task OnParametersSetAsync()
    {
        if (FirstLoad)
        {
            FirstLoad = false;
            await base.OnParametersSetAsync();
            await LoadFreshAddresses();
        }
    }

    async Task GetPagedAddresses( int page )
    {
        StartLoading( "Loading Addresses..." );
        
        Dictionary<string, object> parameters = [];
        parameters.Add( "Page", _currentPage );
        parameters.Add( "PageSize", _pageSize );
        Reply<ViewPagedAddressesResponse> result = await Http.GetAsyncAuthenticated<ViewPagedAddressesResponse>( Consts.ApiGetAddresses, parameters );

        if (!result) {
            PushError( result, "An error occured while fetching addresses." );
            StopLoading();
            return;
        }
        
        UpdateLocalState( result, page );
        StopLoading();
    }
    async Task OnClickSave()
    {
        StartLoading( "Saving Address..." );

        Reply<bool> reply = _isNew
            ? await Http.PutAsyncAuthenticated<bool>( Consts.ApiAddAddress, _editAddress )
            : await Http.PutAsyncAuthenticated<bool>( Consts.ApiUpdateAddress, _editAddress );

        if (!reply) {
            PushError( reply, "Failed to save address." );
            StopLoading();
            return;
        }

        PushSuccess( "Address Saved." );

        if (!_isNew)
        {
            StopLoading();
            return;
        }
        
        _isNew = false;
        _isEditing = false;
        await LoadFreshAddresses();
    }
    async Task OnClickDelete( AddressModel address )
    {
        StartLoading( "Deleting Address..." );

        Dictionary<string, object> parameters = new() { { "AddressId", address.Id } };
        Reply<bool> reply = await Http.DeleteAsyncAuthenticated<bool>( Consts.ApiDeleteAddress, parameters );

        if (!reply) {
            PushError( reply, "Failed to delete address." );
            StopLoading();
            return;
        }
        
        PushSuccess( "Address Deleted." );
        await LoadFreshAddresses();
    }
    
    void UpdateLocalState( Reply<ViewPagedAddressesResponse> result, int page )
    {
        _pagedAddresses = result.Data.Addresses;
        _totalCount = result.Data.TotalCount;

        int count = result ? result.Data.TotalCount : 0;
        
        _paginationPanel.Set( page, _pageSize, count );

        _isEditing = false;
        _isNew = false;
        StateHasChanged();
    }
    void OnClickNew()
    {
        _editAddress = new AddressModel();
        _isEditing = true;
        _isNew = true;
        StateHasChanged();
    }
    void OnClickEdit( AddressModel address )
    {
        _editAddress = address;
        _isEditing = true;
        _isNew = false;
        StateHasChanged();
    }
    async Task OnClickCancelEdit()
    {
        _isEditing = false;
        _isNew = false;
        await LoadFreshAddresses();
        StateHasChanged();
    }

    async Task LoadFreshAddresses() =>
        await GetPagedAddresses( 0 );
    async Task OnPageSizeChanged( int pageSize )
    {
        _pageSize = pageSize;
        await GetPagedAddresses( 0 );
    }
    async Task OnPaginationChange( int page )
    {
        _currentPage = page;
        await GetPagedAddresses( page );
    }

    string GetEditTitle() =>
        _isNew ? "New Address" : "Edit Address";
    string GetViewHeader() =>
        $"Viewing {Math.Min(_pageSize, _totalCount)} results of {_totalCount} total.";
    string GetSubmitText() =>
        _isNew ? "Submit" : "Save Changes";
    
    readonly record struct ViewPagedAddressesResponse(
        int TotalCount,
        List<AddressModel> Addresses );
    sealed class AddressModel
    {
        public Guid Id { get; set; }
        public bool IsPrimary { get; set; }
        public string Name { get; set; } = string.Empty;
        public int WorldGridPosX { get; set; }
        public int WorldGridPosY { get; set; }
    }
}