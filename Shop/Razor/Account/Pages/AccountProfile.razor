@page "/account/profile"
@using System.ComponentModel.DataAnnotations
@using Shop.Infrastructure.Common.ReplyTypes
@using Shop.Utilities
@inherits AccountPageBase
@layout AccountLayout

<PageTitle>Manage Account</PageTitle>

<!-- TITLE -->
<h3>Profile</h3>
<hr class="divider"/>
<!-- FORM -->
<EditForm Model="@_accountModel" OnValidSubmit="@(async () => await UpdateAccount())" method="post">
    <DataAnnotationsValidator/>
    <ValidationSummary class="text-danger" role="alert"/>
    <!-- EMAIL -->
    <div class="form-floating mb-3">
        <InputText type="email" @bind-Value="@_accountModel.Email" id="email" class="form-control" autocomplete="email" aria-required="true" placeholder="Email"/>
        <ValidationMessage For="@(() => _accountModel.Email)" class="text-danger"/>
        <label for="email" class="form-label">Email</label>
    </div>
    <!-- USERNAME -->
    <div class="form-floating mb-3">
        <InputText type="name" @bind-Value="@_accountModel.Username" id="username" class="form-control" autocomplete="username" aria-required="true" placeholder="Username"/>
        <ValidationMessage For="@(() => _accountModel.Username)" class="text-danger"/>
        <label for="username" class="form-label">Username</label>
    </div>
    <!-- PHONE -->
    <div class="form-floating mb-3">
        <InputText type="phone" @bind-Value="@_accountModel.Phone" id="phone" class="form-control" autocomplete="phone" aria-required="true" placeholder="Phone"/>
        <ValidationMessage For="@(() => _accountModel.Phone)" class="text-danger"/>
        <label for="phone" class="form-label">Phone</label>
    </div>
    <!-- SUBMIT -->
    <button type="submit" class="btn btn-submit btn-icon"><i class="fa fa-user me-2"></i>Update Profile</button>
</EditForm>

@code {
    AccountModel _accountModel = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await FetchAccount();
    }
    async Task FetchAccount()
    {
        StartLoading( "Fetching account details..." );
        Reply<AccountModel> reply = await TryGetAccount();

        if (!reply.IsOkay) {
            PushError( reply, "Failed to get account details from the server." );
            StopLoading();
            return;
        }

        UpdateLocalProfile( reply );
        StopLoading();
    }
    async Task UpdateAccount()
    {
        StartLoading( "Updating Account..." );

        Reply<bool> reply = await TryUpdateAccount();
        
        if (!reply.IsOkay) {
            PushError( reply, "Failed to update account details." );
            StopLoading();
            return;
        }

        PushSuccess( "Account details successfully updated." );

        Reply<bool> refreshResult = await Authentication.RefreshSession();
        if (!refreshResult.IsOkay) {
            Console.WriteLine( refreshResult.Message() );
            await Authentication.ClearSession();
            Navigate( Consts.PageSessionExpired, true );
        }
        
        StopLoading();
    }
    
    async Task<Reply<AccountModel>> TryGetAccount() =>
        await Http.GetAsyncAuthenticated<AccountModel>( Consts.ApiGetAccountProfile );
    async Task<Reply<bool>> TryUpdateAccount() =>
        await Http.PutAsyncAuthenticated<bool>( Consts.ApiUpdateAccountProfile, _accountModel );
    
    void UpdateLocalProfile( Reply<AccountModel> reply )
    {
        _accountModel = reply.IsOkay
            ? reply.Data
            : new AccountModel();
        StateHasChanged();
    }
    
    sealed class AccountModel
    {
        [Required( ErrorMessage = "Email is required." ), EmailAddress( ErrorMessage = "Invalid email address." )]
        public string Email { get; set; } = string.Empty;

        [Required( ErrorMessage = "Username is required." )]
        public string Username { get; set; } = string.Empty;

        [Phone( ErrorMessage = "Invalid phone number." )]
        public string? Phone { get; set; } = string.Empty;
    }
}