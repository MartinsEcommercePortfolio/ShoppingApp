@page "/account/profile"
@using System.ComponentModel.DataAnnotations
@using Shop.Infrastructure.Common.Optionals
@using Shop.Utilities
@inherits AccountPageBase
@layout AccountLayout

<PageTitle>Manage Account</PageTitle>

<!-- WRAPPERS -->
<div class="content-container">
    <div class="auth-container">
        <!-- TITLE -->
        <h3>Profile</h3>
        <hr/>
        <!-- FORM -->
        <EditForm Model="@accountModel" OnValidSubmit="@(async () => await UpdateAccount())" method="post">
            <DataAnnotationsValidator/>
            <ValidationSummary class="text-danger" role="alert"/>
            <!-- EMAIL -->
            <div class="form-floating mb-3">
                <InputText type="email" @bind-Value="@accountModel.Email" id="email" class="form-control" autocomplete="email" aria-required="true" placeholder="Email"/>
                <ValidationMessage For="@(() => accountModel.Email)" class="text-danger"/>
                <label for="email" class="form-label">Email</label>
            </div>
            <!-- USERNAME -->
            <div class="form-floating mb-3">
                <InputText type="name" @bind-Value="@accountModel.Username" id="username" class="form-control" autocomplete="username" aria-required="true" placeholder="Username"/>
                <ValidationMessage For="@(() => accountModel.Username)" class="text-danger"/>
                <label for="username" class="form-label">Username</label>
            </div>
            <!-- PHONE -->
            <div class="form-floating mb-3">
                <InputText type="phone" @bind-Value="@accountModel.Phone" id="phone" class="form-control" autocomplete="phone" aria-required="true" placeholder="Phone"/>
                <ValidationMessage For="@(() => accountModel.Phone)" class="text-danger"/>
                <label for="phone" class="form-label">Phone</label>
            </div>
            <!-- 2FA -->
            <div class="form-check form-switch mb-3">
                <InputCheckbox @bind-Value="@accountModel.HasTwoFactor" id="2fa" class="form-check-input" aria-required="true"/>
                <ValidationMessage For="@(() => accountModel.HasTwoFactor)" class="text-danger"/>
                <label for="2fa" class="form-check-label">Enable Two Factor Login?</label>
            </div>
            <!-- SUBMIT -->
            <button type="submit" class="btn btn-submit btn-icon"><i class="fa fa-user me-2"></i>Update Profile</button>
        </EditForm>
    </div>
</div>

@code {
    AccountModel accountModel = new();
    string accessToken = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await UpdateAuthToken();
        await FetchAccount();
    }
    async Task FetchAccount()
    {
        StartLoading( "Fetching account details..." );
        Reply<AccountModel> reply = await TryGetAccount();

        if (!reply.IsOkay) {
            PushError( reply, "Failed to get account details from the server." );
            StopLoading();
            return;
        }

        UpdateLocalProfile( reply );
        StopLoading();
    }
    async Task UpdateAccount()
    {
        StartLoading( "Updating Account..." );

        Reply<bool> reply = await TryUpdateAccount();
        
        if (!reply.IsOkay) {
            PushError( reply, "Failed to update account details." );
            StopLoading();
            return;
        }

        PushSuccess( "Account details successfully updated." );

        Reply<bool> refreshResult = await Auth.RefreshStateFull();
        if (!refreshResult.IsOkay) {
            Console.WriteLine( refreshResult.Message() );
            await Auth.ClearState();
            Navigate( Urls.PageSessionExpired, true );
        }
        
        await UpdateAuthToken();
        StopLoading();
    }
    
    async Task<Reply<AccountModel>> TryGetAccount() =>
        await Http.TryGetRequest<AccountModel>( Urls.ApiGetAccountDetails, null, accessToken );
    async Task<Reply<bool>> TryUpdateAccount() =>
        await Http.TryPostRequest<bool>( Urls.ApiUpdateAccountDetails, accountModel, accessToken );

    async Task UpdateAuthToken()
    {
        Reply<string> token = await Auth.GetAccessToken();
        accessToken = token.IsOkay
            ? token.Data
            : string.Empty;
    }
    void UpdateLocalProfile( Reply<AccountModel> reply )
    {
        accountModel = reply.IsOkay
            ? reply.Data
            : new AccountModel();
        StateHasChanged();
    }
    
    sealed class AccountModel
    {
        [Required( ErrorMessage = "Email is required." ), EmailAddress( ErrorMessage = "Invalid email address." )]
        public string Email { get; set; } = string.Empty;

        [Required( ErrorMessage = "Username is required." )]
        public string Username { get; set; } = string.Empty;

        [Phone( ErrorMessage = "Invalid phone number." )]
        public string? Phone { get; set; } = string.Empty;

        public bool HasTwoFactor { get; set; }
    }
}