@page "/account/delete"
@using System.ComponentModel.DataAnnotations
@using Shop.Infrastructure.Common.ReplyTypes
@using Shop.Utilities
@inherits AccountPageBase
@layout  AccountLayout

<PageTitle>Delete Account</PageTitle>

<!-- WRAPPER -->
<div class="user-container-small">
    @if (_isWarning) {
        <!-- CONFIRM DELETE -->
        <div class="alert alert-warning auth-result-wrapper" role="alert">
            <!-- MESSAGE -->
            <i class="fa-solid fa-triangle-exclamation fa-4x text-warning auth-result-icon mx-auto"></i>
            <p><strong>Deleting this data will permanently remove your account, and this cannot be recovered.</strong></p>
            <hr/>
            <!-- YES -->
            <button class="btn btn-submit btn-warning btn-icon mx-auto" @onclick="@(async () => await OnConfirmSubmit())">
                <i class="fa fa-trash me-2"></i>Delete
            </button>
            <hr/>
            <!-- NO -->
            <button class="btn btn-submit btn-warning btn-icon mx-auto" @onclick="Cancel">
                <i class="fa-solid fa-x me-2"></i>Cancel
            </button>
        </div>
    }
    else {
        <!-- TITLE -->
        <h3>Delete Account</h3>
        <!-- FORM -->
        <EditForm Model="@_request" FormName="delete-user" OnValidSubmit="@(async () => await OnValidSubmitAsync())" method="post">
            <DataAnnotationsValidator/>
            <ValidationSummary class="text-danger" role="alert"/>
            <!-- PASSWORD -->
            <div class="form-floating mb-2">
                <InputText type="password" @bind-Value="@_request.Password" id="password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="Please enter your password."/>
                <label for="password" class="form-label">Password</label>
                <ValidationMessage For="@(() => _request.Password)" class="text-danger"/>
            </div>
            <!-- SUBMIT -->
             <button class="btn btn-submit btn-warning btn-icon"><i class="fa fa-trash me-2"></i>Delete Data</button>
        </EditForm>
    }
</div>

@code {
    readonly DeleteAccountRequest _request = new();
    bool _isWarning = false;

    async Task OnValidSubmitAsync()
    {
        await Task.Delay( 1000 ); // protect user from double click second confirm
        _isWarning = true;
        StateHasChanged();
    }
    async Task OnConfirmSubmit()
    {
        StartLoading( "Deleting Account..." );

        Dictionary<string, object> parameters = new() { { "password", _request.Password } };
        Reply<bool> reply = await Http.DeleteAsyncAuthenticated<bool>( Consts.ApiDeleteAccount, parameters );

        if (!reply) {
            PushError( reply, "Failed to delete your account." );
            Cancel();
            StopLoading();
            return;
        }

        await Authentication.ClearSession();
        StopLoading();
        Navigate( Consts.PageAccountDeleted );
    }
    void Cancel()
    {
        _isWarning = false;
        StateHasChanged();
    }

    sealed class DeleteAccountRequest
    {
        [Required, StringLength( 100, ErrorMessage = "The password must be at least 8 and at max 40 characters long.", MinimumLength = 8 ), DataType( DataType.Password ), Display( Name = "New password" )]
        public string Password { get; set; } = string.Empty;
    }
}