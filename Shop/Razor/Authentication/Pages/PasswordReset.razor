@page "/resetPassword"
@using System.ComponentModel.DataAnnotations
@using Shop.Infrastructure.Common.ReplyTypes
@using Shop.Utilities
@inherits AuthenticationPageBase
@layout AuthenticationLayout

<PageTitle>Reset Password</PageTitle>

@if (LinkError) {
    <!-- LINK ERROR -->
    <div class="auth-result-wrapper">
        <!-- MESSAGE -->
        <i class="fa-solid fa-circle-check fa-4x text-danger auth-result-icon"></i>
        <h3>Invalid password reset link</h3>
        <p>The reset code is null.</p>
        <p class="text-muted">Please try generating another reset link, or contact support.</p>
        <!-- RESEND -->
        <button class="btn btn-submit btn-info btn-icon" @onclick="GoToResend"><i class="fa-solid fa-envelope me-2"></i>Resend</button>
    </div>
    
}
else if (_resetSuccess) {
    <!-- RESET SUCCESS -->
    <div class="auth-result-wrapper">
        <!-- MESSAGE -->
        <i class="fa-solid fa-circle-check fa-4x text-success auth-result-icon"></i>
        <h3>Password reset successfully.</h3>
        <p class="text-muted">You password has been successfully. Please login.</p>
        <!-- LOGIN -->
        <button class="btn btn-submit btn-icon" @onclick="GoToLogin"><i class="fa fa-sign-in me-2"></i>Login</button>
    </div>
}
else {
    <!-- DEFAULT -->
    <!-- TITLE -->
    <h3>Reset your password</h3>
    <!-- FORM -->
    <EditForm Model="Request" FormName="reset-password" OnValidSubmit="@(async ()=> await OnValidSubmitAsync())" method="post">
        <DataAnnotationsValidator/>
        <ValidationSummary class="text-danger" role="alert"/>
        <!-- CODE -->
        <input type="hidden" name="Input.Code" value="@Request.Code"/>
        <!-- NEW PASSWORD -->
        <div class="form-floating mb-3">
            <InputText type="password" @bind-Value="@Request.NewPassword" id="password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Please enter your password."/>
            <label for="password" class="form-label">Password</label>
            <ValidationMessage For="@(() => Request.NewPassword)" class="text-danger"/>
        </div>
        <!-- CONFIRM PASSWORD -->
        <div class="form-floating mb-3">
            <InputText type="password" @bind-Value="@Request.ConfirmPassword" id="confirm-password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Please confirm your password."/>
            <label for="confirm-password" class="form-label">Confirm password</label>
            <ValidationMessage For="@(() => Request.ConfirmPassword)" class="text-danger"/>
        </div>
        <!-- SUBMIT -->
        <button class="btn btn-submit btn-icon" type="submit"><i class="fa fa-key me-2"></i>Reset</button>
    </EditForm>
}

@code 
{
    [SupplyParameterFromQuery]
    string? Email { get; } = null;
    [SupplyParameterFromQuery]
    string? Code { get; } = null;
    [SupplyParameterFromForm]
    PasswordResetRequest Request { get; } = new();

    public bool LinkError = false;
    bool _resetSuccess = false;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        
        if (!ValidateUrl( out string email, out string code, out string message )) {
            LinkError = true;
            PushError( message );
            StateHasChanged();
            return;
        }

        Request.Email = email;
        Request.Code = code;
    }
    async Task OnValidSubmitAsync()
    {
        StartLoading( "Resetting Password..." );

        Reply<bool> result = await TryResetPassword();

        if (!result) {
            PushError( result, "Failed to reset password." );
            StopLoading();
            return;
        }

        UpdateLocalState();
        StopLoading();
    }
    async Task<Reply<bool>> TryResetPassword() => 
        await Http.PutAsync<bool>( Consts.ApiResetPassword, Request );

    bool ValidateUrl( out string email, out string code, out string message )
    {
        email = string.Empty;
        code = string.Empty;
        message = string.Empty;
        
        if (string.IsNullOrWhiteSpace( Email )) {
            message = $"Invalid url, null parameter {nameof(Email)}";
            StateHasChanged();
            return false;
        }

        if (string.IsNullOrWhiteSpace( Email )) {
            message = $"Invalid url, null parameter {nameof( Code )}";
            StateHasChanged();
            return false;
        }
        
        return true;
    }
    void UpdateLocalState()
    {
        _resetSuccess = true;
        StateHasChanged();
    }
    void GoToResend() => 
        Navigate( Consts.PageForgotPassword );
    void GoToLogin() => 
        Navigate( Consts.PageLoginOrRegister );

    sealed class PasswordResetRequest
    {
        [Required, EmailAddress]
        public string Email { get; set; } = string.Empty;

        [Required] 
        public string Code { get; set; } = string.Empty;

        [Required, DataType( DataType.Password ), StringLength( 40, ErrorMessage = "The password must be at least {8} and at max {40} characters long.", MinimumLength = 8 )]
        public string NewPassword { get; set; } = string.Empty;

        [Required, DataType( DataType.Password ), Display( Name = "Confirm password" ), Compare( "Password", ErrorMessage = "The password and confirmation password do not match." )]
        public string ConfirmPassword { get; set; } = string.Empty;
    }
}