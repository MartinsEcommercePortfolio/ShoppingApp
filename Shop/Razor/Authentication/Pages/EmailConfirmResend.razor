@page "/resendEmailConfirmation"
@using Shop.Utilities
@using Shop.Types.Common.ReplyTypes
@inherits AuthenticationPageBase
@layout  AuthenticationLayout

<PageTitle>Resend Confirmation Email</PageTitle>

@if (_isSuccess) {
    <div class="auth-result-wrapper">
        <!-- MESSAGE -->
        <h3>Email confirm link sent!</h3>
        <i class="fa-solid fa-circle-check fa-4x text-success mb-3"></i>
        <p class="text-muted mb-0">Please click the link sent to your email to activate your account.</p>
        <hr/>
        <!-- RESEND -->
        <button class="btn btn-full btn-primary" @onclick="GoToResend">
            <i class="fa fa-repeat me-2"></i>Retry
        </button>
    </div>
}
else {
    <!-- TITLE -->
    <h3>Resend Email Confirmation</h3>
    <p class="text-muted mb-0">Enter your email to send another confirmation link.</p>
    <hr/>
    <!-- FORM -->
    <EditForm Model="Request" FormName="resend-email-confirmation" OnValidSubmit="SendConfirmationEmail" method="post">
        <DataAnnotationsValidator/>
        <ValidationSummary class="text-danger" role="alert"/>
        <!-- EMAIL -->
        <div class="form-floating mb-3">
            <InputText type="email" @bind-Value="@Request.Email" id="email" class="form-control" aria-required="true" placeholder="name@example.com"/>
            <label for="email" class="form-label">Email</label>
            <ValidationMessage For="@(() => Request.Email)" class="text-danger"/>
        </div>
        <!-- SUBMIT -->
        <button type="submit" class="btn btn-full btn-primary">
            <i class="fa fa-envelope me-2"></i>Send Email
        </button>
    </EditForm>
}

@code 
{
    [SupplyParameterFromForm]
    ResendConfirmationRequest Request { get; set; } = new();
    
    bool _isSuccess = false;

    async Task SendConfirmationEmail()
    {
        StartLoading( "Sending reset link..." );

        Reply<bool> result = await Http.PutAsync<bool>( Consts.ApiResendConfirm, Request.Email );

        if (!result) {
            PushError( result, "Failed to send reset link." );
            StopLoading();
            return;
        }
        
        PushSuccess( "Confirmation email link has been sent. Check your email." );
        _isSuccess = true;
        StateHasChanged();
        StopLoading();
    }
        
    sealed class ResendConfirmationRequest
    {
        public string Email { get; set; } = string.Empty;
        
        public static ResendConfirmationRequest With( string email ) =>
            new() {
                Email = email
            };
    }

    void GoToResend() =>
        Navigate( Consts.PageEmailConfirmResend, true );
}