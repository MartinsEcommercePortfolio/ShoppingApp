@page "/confirmEmail"
@using Shop.Utilities
@using Shop.Types.Common.ReplyTypes
@inherits Shop.Razor.Authentication.AuthenticationPageBase
@layout AuthenticationLayout

<PageTitle>Confirm Email</PageTitle>

@if (_confirmFailed) {
    <div class="auth-result-wrapper">
        <!-- MESSAGE -->
        <h3>Email Confirmation Failed!</h3>
        <i class="fa-solid fa-circle-exclamation fa-4x text-warning mb-3"></i>
        <p class="text-danger">Error Details: @_apiReply.GetMessage()</p>
        <p class="text-muted mb-0">Please try again or contact support.</p>
        <hr/>
        <!-- RESEND -->
        <button class="btn btn-full btn-primary" @onclick="GoToResend">
            <i class="fa fa-repeat me-2"></i>Retry
        </button>
    </div>
}
else if (_emailConfirmed) {
    <div class="auth-result-wrapper">
        <!-- MESSAGE -->
        <h3>Email Confirmed!</h3>
        <i class="fa-solid fa-circle-check fa-4x text-success"></i>
        <p class="text-muted mb-0">Your account has been verified and you can now login normally.</p>
        <hr/>
        <!-- LOGIN -->
        <button class="btn btn-full btn-primary" @onclick="GoToLogin">
            <i class="fa fa-user me-2"></i>Login
        </button>
    </div>
}
else
{
    <span class="d-block mt-3 mx-auto text-center fs-3 fw-bold">Nothing Here.</span>
}

@code 
{
    [SupplyParameterFromQuery] string? Email { get; set; }
    [SupplyParameterFromQuery] string? Code { get; set; }
    
    bool _emailConfirmed = false;
    bool _confirmFailed = false;
    Reply<bool> _apiReply;
    
    protected override async Task OnInitializedAsync()
    {
        StartLoading( "Confirming email..." );

        if (!TryValidateLink( out string userId, out string code, out string errorMessage )) {
            PushError( errorMessage );
            _confirmFailed = true;
            StateHasChanged();
            StopLoading();
            return;
        }
        
        _apiReply = await TryConfirmEmail( Http.Ordering( Consts.ApiConfirmEmail ), userId, code );
        _emailConfirmed = _apiReply;
        _confirmFailed = !_emailConfirmed;
        StateHasChanged();
        StopLoading();
    }
    
    async Task<Reply<bool>> TryConfirmEmail( string url, string email, string code ) =>
        await Http.PutAsync<bool>( url, new ConfirmEmailRequest( email, code ) );
    bool TryValidateLink( out string userId, out string code, out string errorMessage )
    {
        userId = string.Empty;
        code = string.Empty;
        errorMessage = string.Empty;

        if (string.IsNullOrEmpty( Email )) {
            errorMessage = InvalidLinkMessage( nameof( Email ) );
            return false;
        }

        if (string.IsNullOrEmpty( Code )) {
            errorMessage = InvalidLinkMessage( nameof( code ) );
            return false;
        }

        userId = Email;
        code = Code;

        return true;

        static string InvalidLinkMessage( string parameter ) =>
            $"Failed to confirm email address. {parameter} is invalid.";
    }
    void GoToResend() => 
        Navigate( Consts.PageEmailConfirmResend );
    void GoToLogin() => 
        Navigate( Consts.PageLoginOrRegister, true );
    
    readonly record struct ConfirmEmailRequest(
        string Email,
        string Code );
}