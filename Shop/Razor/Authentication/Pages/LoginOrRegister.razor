@page "/login-or-register"
@using System.ComponentModel.DataAnnotations
@using Shop.Infrastructure.Authentication.Types
@using Shop.Infrastructure.Common.Optionals
@using Shop.Utilities
@inherits AuthenticationPageBase
@layout AuthenticationLayout

<PageTitle>Login Or Register</PageTitle>

<!-- WRAPPERS -->
<div class="content-container">
    <div class="auth-container">
        @if (registered) {
            <!-- PENDING 2FA -->
            <!-- MESSAGE -->
            <i class="fa-solid fa-circle-check fa-4x text-success auth-icon"></i>
            <h1>Registration Success!</h1>
            <hr/>
            <!-- DETAILS -->
            <ul class="text-start">
                <li><strong>Id:</strong> <small>@( registerReply?.Id ?? "No id returned." )</small></li>
                <li><strong>Email:</strong> <small>@( registerReply?.Email ?? "No email returned." )</small></li>
                <li><strong>Username:</strong> <small>@( registerReply?.Username ?? "No username returned." )</small></li>
            </ul>
            <hr/>
            <p class="text-secondary text-center">Your account has been created and is awaiting confirmation. A link has been emailed to @( registerReply?.Email ?? "your email" ). Please verify your email before logging in.</p>
            <!-- LOGIN -->
            <button class="btn btn-submit btn-icon" @onclick="GoToLogin"><i class="fa fa-user me-2"></i>Login</button>
        }
        else if (pendingTwoFactor) {
            <!-- PENDING 2FA -->
            <!-- MESSAGE -->
            <i class="fa-solid fa-circle-check fa-4x text-info auth-icon"></i>
            <h1>Two-factor authentication</h1>
            <hr/>
            <p>Your login is protected by a two-step verification process. Enter your verification code below.</p>
            <hr/>
            <!-- FORM -->
            <EditForm Model="@twoFactorRequest" FormName="login-with-2fa" OnValidSubmit="OnValidTwoFactorSubmitAsync" method="post">
                <DataAnnotationsValidator/>
                <ValidationSummary class="text-danger" role="alert"/>
                <div class="form-floating">
                    <InputText @bind-Value="@twoFactorRequest.Code" id="two-factor-code" class="form-control" autocomplete="off"/>
                    <label for="two-factor-code" class="form-label">Authenticator code</label>
                    <ValidationMessage For="@(() => twoFactorRequest.Code)" class="text-danger"/>
                </div>
                <!-- SUBMIT -->
                <button class="btn btn-submit btn-icon" type="submit"><i class="fa fa-user me-2"></i>Log In</button>
            </EditForm>
        }
        else {
            <!-- LOGIN TITLE -->
            <h3>Sign In</h3>
            <hr/>
            <!-- LOGIN FORM -->
            <EditForm Model="@loginRequest" OnValidSubmit="@(async () => await OnValidLoginSubmitAsync())">
                <DataAnnotationsValidator/>
                <!-- EMAIL OR USERNAME-->
                <div class="form-floating mb-2">
                    <InputText type="name" class="form-control" id="emailOrUsername" @bind-Value="@loginRequest.EmailOrUsername">></InputText>
                    <label for="emailOrUsername">Email or Username</label>
                </div>
                <!-- PASSWORD -->
                <div class="form-floating mb-2">
                    <InputText type="password" class="form-control" id="password" @bind-Value="@loginRequest.Password"></InputText>
                    <label for="password">Password</label>
                </div>
                <!-- SUBMIT -->
                <button class="btn btn-submit btn-icon mb-2" type="submit"><i class="fa fa-sign-in me-2"></i>Sign in</button>
            </EditForm>

            <!-- BETWEEN FORMS -->
            <button class="btn btn-link" @onclick="GoToResend">Resend Confirmation Email</button>
            <button class="btn btn-link" @onclick="GoToForgot">Forgot Password</button>
            
            <span class="my-5 d-block text-muted">- Or -</span>

            <!-- REGISTER TITLE -->
            <h3>Register</h3>
            <hr/>
            <!-- REGISTER FORM -->
            <EditForm Model="@registerRequest" OnValidSubmit="@(async () => await OnValidRegisterSubmitAsync() )">
                <DataAnnotationsValidator/>
                <ValidationSummary class="text-danger" role="alert"/>
                <!-- EMAIL -->
                <div class="form-floating mb-2">
                    <InputText type="name" class="form-control" id="email" @bind-Value="@registerRequest.Email"></InputText>
                    <ValidationMessage For="@(() => registerRequest.Email)"/>
                    <label for="email">Email</label>
                </div>
                <!-- USERNAME -->
                <div class="form-floating mb-2">
                    <InputText type="name" class="form-control" id="username" @bind-Value="@registerRequest.Username"></InputText>
                    <ValidationMessage For="@(() => registerRequest.Username)"/>
                    <label for="emailOrUsername">Username</label>
                </div>
                <!-- PASSWORD -->
                <div class="form-floating mb-2">
                    <InputText type="password" class="form-control" id="registerPassword" @bind-Value="@registerRequest.Password"></InputText>
                    <ValidationMessage For="@(() => registerRequest.Password)"/>
                    <label for="registerPassword">Password</label>
                </div>
                <!-- CONFIRM PASSWORD -->
                <div class="form-floating mb-2">
                    <InputText type="password" class="form-control" id="confirmPassword" @bind-Value="@registerRequest.PasswordConfirm"></InputText>
                    <ValidationMessage For="@(() => registerRequest.PasswordConfirm)"/>
                    <label for="confirmPassword">Confirm Password</label>
                </div>
                <!-- SUBMIT -->
                <button class="btn btn-submit btn-icon mb-2" type="submit"><i class="fa fa-user-plus me-2"></i>Register</button>
            </EditForm>

            <!-- DEVELOPER -->
            <div class="row mt-3">
                <div class="col-12 d-flex flex-column align-items-center">
                    <hr/>
                    <h1>Development</h1>
                    <hr/>
                    <button class="btn-submit" onclick="@(async ()=> await TestRegister())">Test Register</button>
                    <button class="btn-submit" onclick="@(async ()=> await TestLogin())">Test Login</button>
                </div>
            </div>
        }
    </div>
</div>

@code 
{
    async Task TestRegister()
    {
        registerRequest.Email = "martygrof3708@gmail.com";
        registerRequest.Username = "MintTree117";
        registerRequest.Password = "Password1?";
        registerRequest.PasswordConfirm = "Password1?";

        await OnValidRegisterSubmitAsync();
    }
    async Task TestLogin()
    {
        loginRequest.EmailOrUsername = "martygrof3708@gmail.com";
        loginRequest.Password = "Password1?";

        await OnValidLoginSubmitAsync();
    }

    readonly LoginRequest loginRequest = new();
    readonly RegisterRequest registerRequest = new();
    readonly TwoFactorRequest twoFactorRequest = new();

    bool registered = false;
    bool pendingTwoFactor = false;
    RegisterReply? registerReply;

    async Task OnValidLoginSubmitAsync()
    {
        StartLoading( "Logging In..." );
        
        Reply<LoginReply> loginResult = await TryLogin();

        if (!loginResult.IsOkay) {
            PushError( loginResult, "Failed to login." );
            StopLoading();
            return;
        }

        if (loginResult.Data.IsPending2FA) {
            pendingTwoFactor = true;
            twoFactorRequest.EmailOrUsername = loginRequest.EmailOrUsername;
            StateHasChanged();
            StopLoading();
            return;
        }

        Reply<bool> updateResult = await TryUpdateLocalState( loginResult );
        
        if (!updateResult.IsOkay) {
            PushError( updateResult, "Failed to save login." );
            StopLoading();
            return;
        }

        //await CartManager.GetCart( reply.Data.Token );

        StartLoading( "Login Success! Redirecting..." );
        GoHome();
    }
    async Task OnValidTwoFactorSubmitAsync()
    {
        StartLoading( "Verifying Two Factor..." );
        
        twoFactorRequest.EmailOrUsername = loginRequest.EmailOrUsername;

        Reply<TwoFactorReply> result = await TryTwoFactorLogin();

        if (!result.IsOkay) {
            PushError( result, "Two factor authorization failed!" );
            StopLoading();
            return;
        }

        Reply<bool> updateResult = await TryUpdateLocalState( result );

        if (!updateResult.IsOkay) {
            PushError( result, "Two factor authorization succeeded on the server, but failed to save locally!" );
            StopLoading();
            return;
        }
        
        //await CartManager.GetCart( reply.Data.Token );

        StartLoading( "Two Factor Success! Redirecting..." );
        GoHome();
    }
    async Task OnValidRegisterSubmitAsync()
    {
        StartLoading( "Registering..." );
        
        Reply<RegisterReply> reply = await TryRegister();

        if (!reply.IsOkay) {
            PushError( reply, "Failed to register account." );
            Console.WriteLine( reply.Message() );
            StopLoading();
            return;
        }

        registered = true;
        registerReply = reply.Data;
        StateHasChanged();
        StopLoading();
    }
    
    async Task<Reply<LoginReply>> TryLogin() => 
        await Http.TryPostRequest<LoginReply>( Urls.ApiLogin, loginRequest );
    async Task<Reply<bool>> TryUpdateLocalState( Reply<LoginReply> loginResult ) =>
        await Auth.SetState( AuthRefreshEventArgs.With( loginResult.Data.AccessToken, loginResult.Data.RefreshToken ) );
    async Task<Reply<TwoFactorReply>> TryTwoFactorLogin() => 
        await Http.TryPostRequest<TwoFactorReply>( Urls.ApiTwoFactor, twoFactorRequest );
    async Task<Reply<bool>> TryUpdateLocalState( Reply<TwoFactorReply> twoFactorResult ) =>
        await Auth.SetState( AuthRefreshEventArgs.With( twoFactorResult.Data.AccessToken, twoFactorResult.Data.RefreshToken ) );
    async Task<Reply<RegisterReply>> TryRegister() => 
        await Http.TryPostRequest<RegisterReply>( Urls.ApiRegister, registerRequest );
    
    void GoToRecovery() => 
        Navigate( Urls.PageLoginWithRecovery );
    void GoToResend() => 
        Navigate( Urls.PageResendConfirm );
    void GoToForgot() => 
        Navigate( Urls.PageForgotPassword );
    void GoToLogin() =>
        Navigate( Urls.PageLoginOrRegister, true );

    sealed class LoginRequest
    {
        [Required( ErrorMessage = "Email or Username is required." )]
        public string EmailOrUsername { get; set; } = string.Empty;

        [Required( ErrorMessage = "Password is required." )]
        public string Password { get; set; } = string.Empty;
    }
    sealed class TwoFactorRequest
    {
        [Required] public string EmailOrUsername { get; set; } = string.Empty;
        
        [Required, DataType( DataType.Text ), Display( Name = "Authenticator code" ), StringLength( 40, ErrorMessage = "The two factor code must be at least 6 and at max 40 characters long.", MinimumLength = 6 )]
        public string Code { get; set; } = string.Empty;
    }
    sealed class RegisterRequest
    {
        [Required( ErrorMessage = "Email is required." ), EmailAddress( ErrorMessage = "Invalid email address." )] 
        public string Email { get; set; } = string.Empty;

        [Required( ErrorMessage = "Username is required." )]
        public string Username { get; set; } = string.Empty;

        [Required( ErrorMessage = "Password is required." ), MinLength( 8, ErrorMessage = "Password must be at least 8 characters." )] 
        public string Password { get; set; } = string.Empty;

        [Compare( "Password", ErrorMessage = "Passwords do not match." )]
        public string PasswordConfirm { get; set; } = string.Empty;
    }
    
    sealed record LoginReply(
        string? AccessToken,
        string? RefreshToken,
        bool IsPending2FA );
    readonly record struct TwoFactorReply(
        string AccessToken,
        string RefreshToken );
    sealed record RegisterReply(
        string Id,
        string Email,
        string Username );
}