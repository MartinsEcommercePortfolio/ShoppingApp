@page "/loginOrRegister"
@using System.ComponentModel.DataAnnotations
@using Shop.Infrastructure.Common.ReplyTypes
@using Shop.Utilities
@inherits AuthenticationPageBase
@layout AuthenticationLayout

<PageTitle>Login Or Register</PageTitle>

@if (_registered) {
    <!-- PENDING 2FA -->
    <!-- MESSAGE -->
    <i class="fa-solid fa-circle-check fa-4x text-success auth-icon"></i>
    <h1>Registration Success!</h1>
    <hr class="divider"/>
    <!-- DETAILS -->
    <ul class="text-start">
        <li><strong>Id:</strong> <small>@( _registerReply?.Id ?? "No id returned." )</small></li>
        <li><strong>Email:</strong> <small>@( _registerReply?.Email ?? "No email returned." )</small></li>
        <li><strong>Username:</strong> <small>@( _registerReply?.Username ?? "No username returned." )</small></li>
    </ul>
    <hr class="divider"/>
    <p class="text-secondary text-center">Your account has been created and is awaiting confirmation. A link has been emailed to @( _registerReply?.Email ?? "your email" ). Please verify your email before logging in.</p>
    <!-- LOGIN -->
    <button class="btn btn-submit btn-icon" @onclick="GoToLogin"><i class="fa fa-user me-2"></i>Login</button>
}
else if (_pendingTwoFactor) {
    <!-- PENDING 2FA -->
    <!-- MESSAGE -->
    <i class="fa-solid fa-circle-check fa-4x text-info auth-icon"></i>
    <h1>Two-factor authentication</h1>
    <hr class="divider"/>
    <p>Your login is protected by a two-step verification process. Enter your verification code below.</p>
    <hr class="divider"/>
    <!-- FORM -->
    <EditForm Model="@_twoFactorRequest" FormName="login-with-2fa" OnValidSubmit="OnValidTwoFactorSubmitAsync" method="post">
        <DataAnnotationsValidator/>
        <ValidationSummary class="text-danger" role="alert"/>
        <div class="form-floating">
            <InputText @bind-Value="@_twoFactorRequest.Code" id="two-factor-code" class="form-control" autocomplete="off"/>
            <label for="two-factor-code" class="form-label">Authenticator code</label>
            <ValidationMessage For="@(() => _twoFactorRequest.Code)" class="text-danger"/>
        </div>
        <!-- SUBMIT -->
        <button class="btn btn-submit btn-icon" type="submit"><i class="fa fa-user me-2"></i>Log In</button>
    </EditForm>
}
else {
    <!-- LOGIN TITLE -->
    <h3>Sign In</h3>
    <hr/>
    <!-- LOGIN FORM -->
    <EditForm Model="@_loginRequest" OnValidSubmit="@(async () => await OnValidLoginSubmitAsync())">
        <DataAnnotationsValidator/>
        <!-- EMAIL OR USERNAME-->
        <div class="form-floating mb-2">
            <InputText type="name" class="form-control" id="emailOrUsername" @bind-Value="@_loginRequest.EmailOrUsername">></InputText>
            <label for="emailOrUsername">Email or Username</label>
        </div>
        <!-- PASSWORD -->
        <div class="form-floating mb-2">
            <InputText type="password" class="form-control" id="password" @bind-Value="@_loginRequest.Password"></InputText>
            <label for="password">Password</label>
        </div>
        <!-- SUBMIT -->
        <button class="btn btn-submit btn-icon mb-2" type="submit"><i class="fa fa-sign-in me-2"></i>Sign in</button>
    </EditForm>

    <!-- BETWEEN FORMS -->
    <button class="btn btn-link" @onclick="GoToResend">Resend Confirmation Email</button>
    <button class="btn btn-link" @onclick="GoToForgot">Forgot Password</button>
    
    <span class="my-5 d-block text-muted">- Or -</span>

    <!-- REGISTER TITLE -->
    <h3>Register</h3>
    <hr class="divider"/>
    <!-- REGISTER FORM -->
    <EditForm Model="@_registerRequest" OnValidSubmit="@(async () => await OnValidRegisterSubmitAsync() )">
        <DataAnnotationsValidator/>
        <ValidationSummary class="text-danger" role="alert"/>
        <!-- EMAIL -->
        <div class="form-floating mb-2">
            <InputText type="name" class="form-control" id="email" @bind-Value="@_registerRequest.Email"></InputText>
            <ValidationMessage For="@(() => _registerRequest.Email)"/>
            <label for="email">Email</label>
        </div>
        <!-- USERNAME -->
        <div class="form-floating mb-2">
            <InputText type="name" class="form-control" id="username" @bind-Value="@_registerRequest.Username"></InputText>
            <ValidationMessage For="@(() => _registerRequest.Username)"/>
            <label for="emailOrUsername">Username</label>
        </div>
        <!-- PASSWORD -->
        <div class="form-floating mb-2">
            <InputText type="password" class="form-control" id="registerPassword" @bind-Value="@_registerRequest.Password"></InputText>
            <ValidationMessage For="@(() => _registerRequest.Password)"/>
            <label for="registerPassword">Password</label>
        </div>
        <!-- CONFIRM PASSWORD -->
        <div class="form-floating mb-2">
            <InputText type="password" class="form-control" id="confirmPassword" @bind-Value="@_registerRequest.PasswordConfirm"></InputText>
            <ValidationMessage For="@(() => _registerRequest.PasswordConfirm)"/>
            <label for="confirmPassword">Confirm Password</label>
        </div>
        <!-- SUBMIT -->
        <button class="btn btn-submit btn-icon mb-2" type="submit"><i class="fa fa-user-plus me-2"></i>Register</button>
    </EditForm>

    <!-- DEVELOPER -->
    <div class="row mt-3">
        <div class="col-12 d-flex flex-column align-items-center">
            <hr class="divider"/>
            <h1>Development</h1>
            <hr class="divider"/>
            <button class="btn-submit" onclick="@(async ()=> await TestRegister())">Test Register</button>
            <button class="btn-submit" onclick="@(async ()=> await TestLogin())">Test Login</button>
        </div>
    </div>
}

@code 
{
    async Task TestRegister()
    {
        _registerRequest.Email = "martygrof3708@gmail.com";
        _registerRequest.Username = "MintTree117";
        _registerRequest.Password = "Password1?";
        _registerRequest.PasswordConfirm = "Password1?";

        await OnValidRegisterSubmitAsync();
    }
    async Task TestLogin()
    {
        _loginRequest.EmailOrUsername = "martygrof3708@gmail.com";
        _loginRequest.Password = "Password1?";

        await OnValidLoginSubmitAsync();
    }

    readonly LoginRequest _loginRequest = new();
    readonly RegisterRequest _registerRequest = new();
    readonly TwoFactorRequest _twoFactorRequest = new();

    bool _registered = false;
    bool _pendingTwoFactor = false;
    RegisterReply? _registerReply;

    async Task OnValidLoginSubmitAsync()
    {
        StartLoading( "Logging In..." );
        
        Reply<LoginReply> loginResult = await TryLogin();

        if (!loginResult.IsOkay) {
            PushError( loginResult, "Failed to login." );
            StopLoading();
            return;
        }

        if (loginResult.Data.IsPending2Fa) {
            _pendingTwoFactor = true;
            _twoFactorRequest.EmailOrUsername = _loginRequest.EmailOrUsername;
            StateHasChanged();
            StopLoading();
            return;
        }

        Reply<bool> updateResult = await TryUpdateLocalState( loginResult );
        
        if (!updateResult.IsOkay) {
            PushError( updateResult, "Failed to save login." );
            StopLoading();
            return;
        }

        //await CartManager.GetCart( reply.Data.Token );

        StartLoading( "Login Success! Redirecting..." );
        GoHome();
    }
    async Task OnValidTwoFactorSubmitAsync()
    {
        StartLoading( "Verifying Two Factor..." );
        
        _twoFactorRequest.EmailOrUsername = _loginRequest.EmailOrUsername;

        Reply<TwoFactorReply> result = await TryTwoFactorLogin();

        if (!result.IsOkay) {
            PushError( result, "Two factor authorization failed!" );
            StopLoading();
            return;
        }

        Reply<bool> updateResult = await TryUpdateLocalState( result );

        if (!updateResult.IsOkay) {
            PushError( result, "Two factor authorization succeeded on the server, but failed to save locally!" );
            StopLoading();
            return;
        }
        
        //await CartManager.GetCart( reply.Data.Token );

        StartLoading( "Two Factor Success! Redirecting..." );
        GoHome();
    }
    async Task OnValidRegisterSubmitAsync()
    {
        StartLoading( "Registering..." );
        
        Reply<RegisterReply> reply = await TryRegister();

        if (!reply.IsOkay) {
            PushError( reply, "Failed to register account." );
            Console.WriteLine( reply.Message() );
            StopLoading();
            return;
        }

        _registered = true;
        _registerReply = reply.Data;
        StateHasChanged();
        StopLoading();
    }
    
    async Task<Reply<LoginReply>> TryLogin() => 
        await Http.PostAsync<LoginReply>( Consts.ApiLogin, _loginRequest );
    async Task<Reply<bool>> TryUpdateLocalState( Reply<LoginReply> loginResult ) =>
        await Authentication.UpdateSession( loginResult.Data.AccessToken );
    async Task<Reply<TwoFactorReply>> TryTwoFactorLogin() => 
        await Http.PostAsync<TwoFactorReply>( Consts.ApiTwoFactor, _twoFactorRequest );
    async Task<Reply<bool>> TryUpdateLocalState( Reply<TwoFactorReply> twoFactorResult ) =>
        await Authentication.UpdateSession( twoFactorResult.Data.AccessToken );
    async Task<Reply<RegisterReply>> TryRegister() => 
        await Http.PostAsync<RegisterReply>( Consts.ApiRegister, _registerRequest );
    
    // TODO: IMPLEMENT RECOVERY CODES
    void GoToRecovery() => 
        Navigate( "" );
    void GoToResend() => 
        Navigate( Consts.PageEmailConfirmResend );
    void GoToForgot() => 
        Navigate( Consts.PageForgotPassword );
    void GoToLogin() =>
        Navigate( Consts.PageLoginOrRegister, true );

    sealed class LoginRequest
    {
        [Required( ErrorMessage = "Email or Username is required." )]
        public string EmailOrUsername { get; set; } = string.Empty;

        [Required( ErrorMessage = "Password is required." )]
        public string Password { get; set; } = string.Empty;
    }
    sealed class TwoFactorRequest
    {
        [Required] public string EmailOrUsername { get; set; } = string.Empty;
        
        [Required, DataType( DataType.Text ), Display( Name = "Authenticator code" ), StringLength( 40, ErrorMessage = "The two factor code must be at least 6 and at max 40 characters long.", MinimumLength = 6 )]
        public string Code { get; set; } = string.Empty;
    }
    sealed class RegisterRequest
    {
        [Required( ErrorMessage = "Email is required." ), EmailAddress( ErrorMessage = "Invalid email address." )] 
        public string Email { get; set; } = string.Empty;

        [Required( ErrorMessage = "Username is required." )]
        public string Username { get; set; } = string.Empty;

        [Required( ErrorMessage = "Password is required." ), MinLength( 8, ErrorMessage = "Password must be at least 8 characters." )] 
        public string Password { get; set; } = string.Empty;

        [Compare( "Password", ErrorMessage = "Passwords do not match." )]
        public string PasswordConfirm { get; set; } = string.Empty;
    }
    
    sealed record LoginReply(
        string? AccessToken,
        bool IsPending2Fa );
    readonly record struct TwoFactorReply(
        string AccessToken );
    sealed record RegisterReply(
        string Id,
        string Email,
        string Username );
}