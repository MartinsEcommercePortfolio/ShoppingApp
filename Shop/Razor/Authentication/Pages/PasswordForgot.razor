@page "/forgotPassword"
@using System.ComponentModel.DataAnnotations
@using Shop.Types.Common.ReplyTypes
@using Shop.Utilities
@inherits AuthenticationPageBase
@layout AuthenticationLayout

<PageTitle>Forgot Password</PageTitle>

@if (_isSuccess) {
    <!-- EMAIL SENT -->
    <div class="auth-result-wrapper">
        <!-- MESSAGE -->
        <h3>Password reset link sent!</h3>
        <i class="fa-solid fa-circle-check fa-4x text-success mb-3"></i>
        <p class="mb-0">Please follow the instructions within the email we sent you to reset your password.</p>
        <hr/>
        <!-- RESEND -->
        <button class="btn btn-full btn-primary" @onclick="GoToResend">
            <i class="fa fa-repeat me-2"></i>Resend
        </button>
    </div>
}
else {
    <!-- DEFAULT -->
    <!-- MESSAGE -->
    <h3>Forgot your password?</h3>
    <p class="text-secondary mb-0">Enter your email to receive a password reset link.</p>
    <hr/>
    <!-- FORM -->
    <EditForm Model="Request" FormName="forgot-password" OnValidSubmit="OnValidSubmitAsync" method="post">
        <DataAnnotationsValidator/>
        <ValidationSummary class="text-danger" role="alert"/>
        <!-- EMAIL -->
        <div class="form-floating mb-2">
            <InputText type="email" @bind-Value="@Request.Email" id="email" class="form-control" aria-required="true" placeholder="name@example.com"/>
            <label for="email" class="form-label">Email</label>
            <ValidationMessage For="@(() => Request.Email)" class="text-danger"/>
        </div>
        <!-- SUBMIT -->
        <button type="submit" class="btn btn-full btn-primary mb-2">
            <i class="fa fa-envelope me-2"></i>Send Email
        </button>
    </EditForm>
}

@code
{
    [SupplyParameterFromForm]
    PasswordForgotRequest Request { get; set; } = new();

    bool _isSuccess = false;

    async Task OnValidSubmitAsync()
    {
        StartLoading( "Sending reset link..." );

        var reply = await TrySendResetLink();

        _isSuccess = reply;
        if (!_isSuccess)
            PushError( reply, "Failed to send reset link." );

        StateHasChanged();
        StopLoading();
    }
    async Task<Reply<bool>> TrySendResetLink() =>
        await Http.PutAsync<bool>( Http.Ordering( Consts.ApiForgotPassword ), Request.Email );
    void GoToResend() =>
        Navigate( Consts.PageForgotPassword, true );

    sealed class PasswordForgotRequest
    {
        [Required, EmailAddress]
        public string Email { get; set; } = string.Empty;
    }
}