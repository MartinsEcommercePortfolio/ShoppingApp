@page "/passwordForgot"
@using System.ComponentModel.DataAnnotations
@using Shop.Infrastructure.Common.Optionals
@using Shop.Utilities
@inherits AuthenticationPageBase
@layout AuthenticationLayout

<PageTitle>Forgot Password</PageTitle>

<!-- WRAPPERS -->
<div class="content-container">
    <div class="auth-container">
        @if (isSuccess) {
            <!-- EMAIL SENT -->
            <!-- MESSAGE -->
            <i class="fa-solid fa-circle-check fa-4x text-success auth-icon"></i>
            <h3 class="mb-3">Password reset link sent!</h3>
            <p class="mb-3">Please check your email.</p>
            <!-- RESEND -->
            <button class="btn btn-submit btn-info btn-icon" @onclick="GoToResend"><i class="fa fa-repeat me-2"></i>Resend</button>
        }
        else {
            <!-- DEFAULT -->
            <!-- MESSAGE -->
            <h3 class="mb-3">Forgot your password?</h3>
            <p class="text-secondary mb-3">Enter your email to receive a password reset link.</p>
            <!-- FORM -->
            <EditForm Model="Request" FormName="forgot-password" OnValidSubmit="OnValidSubmitAsync" method="post">
                <DataAnnotationsValidator/>
                <ValidationSummary class="text-danger" role="alert"/>
                <!-- EMAIL -->
                <div class="form-floating mb-3">
                    <InputText type="email" @bind-Value="@Request.Email" id="email" class="form-control" aria-required="true" placeholder="name@example.com"/>
                    <label for="email" class="form-label">Email</label>
                    <ValidationMessage For="@(() => Request.Email)" class="text-danger"/>
                </div>
                <!-- SUBMIT -->
                <button type="submit" class="btn btn-submit btn-icon"><i class="fa fa-envelope me-2"></i>Send Email</button>
            </EditForm>
        }
    </div>
</div>

@code
{
    [SupplyParameterFromForm] PasswordForgotRequest Request { get; set; } = new();
    
    bool isSuccess = false;
    
    async Task OnValidSubmitAsync()
    {
        StartLoading( "Sending reset link..." );

        Reply<bool> result = await TrySendResetLink();
        
        isSuccess = result.IsOkay;
        
        if (!isSuccess)
            PushError( result, "Failed to send reset link." );
        
        StateHasChanged();
        StopLoading();
    }
    async Task<Reply<bool>> TrySendResetLink() =>
        await Http.TryPostRequest<bool>( Consts.ApiForgotPassword, Request );
    void GoToResend() =>
        Navigate( Consts.PageForgotPassword );

    sealed class PasswordForgotRequest
    {
        [Required, EmailAddress]
        public string Email { get; set; } = string.Empty;
    }
}