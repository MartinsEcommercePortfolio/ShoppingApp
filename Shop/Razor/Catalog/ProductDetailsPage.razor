@page "/product"
@using Shop.Utilities
@using System.Xml.Linq
@using Shop.Infrastructure
@using Shop.Types.Brands
@using Shop.Types.Categories
@using Shop.Types.Products
@using Shop.Types.Products.Dtos
@using Shop.Types.Users
@using Shop.Razor.Shared.Components
@inherits Shop.Razor.Shared.ShopPage

<LoadingPanelPage @ref="@_loadingPanel"/>

@if (_productLoaded)
{
    <!-- CONTAINER -->
    <div class="product-details">
        
        <!-- TOP -->
        <div class="product-top">
            <ProductCard @ref="_productCard" Product="@_productModel" CardType="@ProductCard.Type.Details"/>
        </div>

        <!-- ADDRESS -->
        <div class="product-details-address-box">
            <AddressBox @ref="_addressBox"/>
        </div>

        <!-- CATEGORIES -->
        <div class="product-categories-container">
            <h3 class="product-categories-title">Categories</h3>
            <div class="product-categories">
                @foreach ( Category c in _productModel.Categories ?? [] )
                {
                    <a class="btn btn-sm btn-outline-secondary product-category shadow-sm" href="@GetCategoryUrl( c )">
                        @c.Name
                    </a>
                }
            </div>
        </div>

        <!-- DESCRIPTION -->
        <div class="product-description">
            <h3>Description</h3>
            <p class="mb-0">@_productModel.Description</p>
        </div>

        <!-- XML -->
        <div class="product-xml">
            <h3>Specifications</h3>
            <div class="product-xml-wrapper">
                <table class="table table-bordered">
                    <tbody>
                    @foreach ( var kvp in _productSpecs )
                    {
                        <tr>
                            <th class="product-xml-th bg-light">@kvp.Key</th>
                            <td class="product-xml-td @GetTdBgCss( kvp.Value )">@kvp.Value</td>
                        </tr>
                    }
                    </tbody>
                </table>
            </div>
        </div>

        <!-- SLIDERS -->
        <div class="product-details-sliders">
            <!-- SIMILAR BRANDS -->
            <ProductSlider @ref="_brandsSlider" Title="@GetBrandsSliderTitle()"/>
            <!-- SIMILAR PRODUCTS -->
            <ProductSlider @ref=" _similarSlider" Title="Similar Products"/>
        </div>
    </div>
}

@code 
{
    // SERVICES
    [Inject] public LocationManager LocationManager { get; set; } = default!;
    [Inject] public BrandsCache Brands { get; set; } = default!;
    [Inject] public CategoriesCache Categories { get; set; } = default!;
    [Inject] public CartManager CartManager { get; init; } = default!;
    
    // PARAMETERS
    [SupplyParameterFromQuery]
    public Guid ProductId { get; set; }
    Guid PreviousProductId = Guid.Empty;
    
    // COMPONENTS
    ProductCard _productCard = default!;
    AddressBox _addressBox = default!;
    ProductSlider _brandsSlider = default!;
    ProductSlider _similarSlider = default!;
    LoadingPanelPage _loadingPanel = default!;
    
    // DATA
    CategoriesCollection _categoriesCollection = default!;
    BrandsCollection _brandsCollection = default!;
    ProductModel? _productModel;
    Dictionary<string, string> _productSpecs = [];
    AddressModel? _address;
    bool _productLoaded = false;
    bool _set = false;
    bool _addressSubscribed = false;
    bool _cardSubscribed = false;
    
    // LIFECYCLES
    protected override void OnDispose()
    {
        base.OnDispose();
        LocationManager.OnLocationChanged -= OnAddressChanged;
        //_productCard.ToggleLoading -= ToggleLoading;
        _productCard.OnItemAddedToCart -= OnItemAddedToCart;
        _addressBox.ToggleLoading -= ToggleLoading;
    }
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var cats = Categories.GetCategories();
        var brands = Brands.GetBrands();
        await Task.WhenAll( cats, brands );
        if (!cats.Result.Succeeded || !brands.Result.Succeeded)
        {
            PushError( "Failed to load meta data." );
            return;
        }
        _categoriesCollection = cats.Result.Data;
        _brandsCollection = brands.Result.Data;
        _address = await LocationManager.GetCurrentAddress();
    }
    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if (!_set)
        {
            LocationManager.OnLocationChanged += OnAddressChanged;
        }
        _set = true;

        if (PreviousProductId == ProductId)
            return;

        PreviousProductId = ProductId;
        if (ProductId == Guid.Empty)
            return;
        
        await LoadDetails();
    }
    protected override async Task OnAfterRenderAsync( bool firstRender )
    {
        await base.OnAfterRenderAsync( firstRender );
        
        if (_productModel is not null && _addressBox is not null)
        {
            _addressBox.SetProduct( _productModel );
        }

        if (!_addressSubscribed && _addressBox is not null)
        {
            _addressBox.ToggleLoading += ToggleLoading;
            _addressSubscribed = true;
        }

        if (!_cardSubscribed && _productCard is not null)
        {
            //_productCard.ToggleLoading += ToggleLoading;
            _productCard.OnItemAddedToCart += OnItemAddedToCart;
            _cardSubscribed = true;
        }
    }

    // HELPERS
    async Task LoadDetails()
    {
        var reply = await Http.GetAsync<ProductDetailsDto>( Consts.ApiGetDetails, GetUrlParamsDetails() );
        if (!reply)
        {
            PushError( reply, "Failed to get product details." );
            return;
        }

        _productModel = ProductModel.From( reply.Data, _categoriesCollection, _brandsCollection );
        _productSpecs = ParseXmlToDictionary( _productModel.Xml );
        _productLoaded = true;

        _loadingPanel.ToggleLoading( false );

        /*var cartReply = await CartManager.Get();
        if (cartReply)
            _cartItems = cartReply.Data;*/

        FireAndForget();
        //StateHasChanged();

        async void FireAndForget()
        {
            await FetchSimilarProducts();
        }
    }
    async Task FetchSimilarProducts()
    {
        if (_productModel is null)
        {
            PushError( "Product is null." );
            return;
        }
        
        var param = new Dictionary<string, object>() {
            { "productId", ProductId },
            { "brandId", _productModel.BrandId}
        };
        var reply = await Http.GetAsync<ProductsSimilarDto>( Consts.ApiGetSimilarProducts, param );
        if (!reply)
        {
            PushWarning( $"Failed to find similar products. {reply.GetMessage()}" );
            return;
        }
        _brandsSlider.SetProducts( ProductModel.From( reply.Data.SimilarToBrand ) );
        _similarSlider.SetProducts( ProductModel.From( reply.Data.SimilarToProduct ) );
    }
    async Task OnAddressChanged( AddressModel? address )
    {
        _address = address;
        if (_productModel is null)
        {
            PushError( "Product model is null." );
            return;
        }
        
        var reply = await Http.GetAsync<List<int>>( Consts.ApiGetEstimates, GetUrlParamsEstimate() );
        if (!reply)
        {
            PushError( reply, "Failed to update delivery estimate." );
            return;
        }
        
        _productModel.ShippingDays = reply.Data.FirstOrDefault();
        PushSuccess( "Updated delivery estimate." );
        StateHasChanged();
    }

    void OnItemAddedToCart( bool succeeded, string? message )
    {
        if (succeeded) PushSuccess( "Item added to cart." );
        else PushError( $"Failed to add to cart. {message}" );
    }
    void ToggleLoading( bool value )
    {
        if (value) _loadingPanel.ToggleLoading( true );
        else _loadingPanel.ToggleLoading( false );

        StateHasChanged();
    }
    string GetBrandsSliderTitle() =>
        $"Similar To {_productModel?.BrandName}";
    Dictionary<string, object> GetUrlParamsDetails()
    {
        Dictionary<string, object> parameters = new() {
            { "ProductId", ProductId }
        };
        if (_address is null)
            return parameters;
        parameters.Add( "PosX", _address.PosX );
        parameters.Add( "PosY", _address.PosY );
        return parameters;
    }
    Dictionary<string, object> GetUrlParamsEstimate()
    {
        Dictionary<string, object> parameters = new() {
            { "ProductIds", new List<Guid>() { ProductId } }
        };
        if (_address is null)
            return parameters;
        parameters.Add( "PosX", _address.PosX );
        parameters.Add( "PosY", _address.PosY );
        return parameters;
    }
    static Dictionary<string, string> ParseXmlToDictionary( string? xmlString )
    {
        if (string.IsNullOrWhiteSpace( xmlString ))
            return [];

        var xmlDictionary = new Dictionary<string, string>();
        XDocument xDoc = XDocument.Parse( xmlString );

        foreach ( var element in xDoc.Root?.Elements() ?? [] )
        {
            xmlDictionary[element.Name.LocalName] = element.Value;
        }

        return xmlDictionary;
    }
    static string GetCategoryUrl( Category c ) =>
        Consts.GetProductSearchUrl( $"?CategoryId={c.Id}&" );
    static string GetTdBgCss( string value ) =>
        string.IsNullOrWhiteSpace( value )
            ? " td-empty"
            : " td-full";
}