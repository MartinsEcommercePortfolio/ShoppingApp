@page "/product"
@using Shop.Utilities
@using Shop.Infrastructure.Catalog.Products.Dtos
@using Shop.Infrastructure.Catalog.Categories
@using Shop.Infrastructure.Catalog.Brands
@using Shop.Infrastructure.Catalog.Categories.Types
@using System.Xml.Linq
@using Shop.Infrastructure.Catalog.Brands.Types
@using Shop.Infrastructure.Catalog.Products.Models
@using Shop.Infrastructure.Locations
@using Shop.Infrastructure.Ordering
@using Shop.Infrastructure.Ordering.Types
@inherits Shop.Razor.Shared.ShopPage
@inject CategoriesCache Categories;
@inject BrandsCache Brands;
@inject LocationManager LocationManager;

@if (_productLoaded)
{
    <!-- CONTAINER -->
    <div class="product-container">
        <!-- TOP -->
        <div class="product-top">
            
            <!-- IMAGE -->
            <div class="product-top-image">
                <img src="@_productDetails.Image" alt="@_productDetails.Name"/>
            </div>
            
            <!-- MAIN -->
            <div class="product-top-main">
                
                <!-- TITLE -->
                <h3 class="d-inline product-title">
                    @_productDetails.Name
                </h3>
                
                <!-- CONTENT -->
                <div class="product-top-main-content">
                    
                    <!-- SUMMARY -->
                    <div class="product-summary">

                        <!-- RATING & BRAND -->
                        <div class="rating-brand">
                            
                            <!-- RATING -->
                            <div class="rating">
                                <!-- STARS -->
                                @for ( int i = 1; i <= 5; i++ )
                                {
                                    <div>
                                        <i class="@Utils.GetRatingCss( _productDetails.Rating, i )"></i>
                                    </div>
                                }
                                <!-- COUNT -->
                                <a class="rating-count" href="@Consts.GetProductDetailsUrlRatings( _productDetails.Id )">
                                    @_productDetails.NumberRatings
                                </a>
                            </div>
                            <!-- BRAND -->
                            <div class="brand">
                                <span>
                                    Brand:&nbsp;
                                </span>
                                <a href="@GetBrandUrl( _productDetails.Brand )">
                                    @_productDetails.Brand.Name
                                </a>
                            </div>
                        </div>
                    </div>

                    <!-- CATEGORIES -->
                    <div class="product-categories d-flex flex-row flex-wrap align-items-center justify-content-start gap-2 py-3">
                        @foreach ( Category c in _productDetails.Categories )
                        {
                            <a class="d-inline-block btn btn-sm btn-outline-secondary mb-1" href="@GetCategoryUrl(c)">
                                @c.Name
                            </a>
                        }
                    </div>
                    
                    <!--<div class="product-top-main-spacer"></div>-->

                    <!-- PRICE & SHIPPING -->
                    <div class="shipping-pricing mb-2">
                        <!-- PRICING -->
                        <div class="pricing">
                            @if (_productDetails.SalePrice > 0)
                            {
                                <div class="price">$@_productDetails.SalePrice</div>
                                <div class="sale-price">$@_productDetails.Price</div>
                            }
                            else
                            {
                                <span class="price">$@_productDetails.Price</span>
                            }
                        </div>
                        <!-- SHIPPING -->
                        <div class="product-shipping">
                            <small class="@GetDeliveryEstimateColor( _productDetails )">
                                @GetDeliveryEstimateText( _productDetails )
                            </small>
                            <button class="btn btn-link btn-icon product-shipping-button" @onclick="OnClickAddress">
                                <div>
                                    <i class="fa fa-location-dot ms-1"></i>
                                    &nbsp;Deliver To:&nbsp;
                                </div>
                                <div>
                                    @GetDeliveryToText()
                                    <i class="fa ms-1 @GetDeliveryToIcon()"></i>
                                </div>
                            </button>
                        </div>
                    </div>
                    
                    @if (_showAddressBox)
                    {
                        <!-- ADDRESS FORM -->
                        <div class="product-address-form">
                            <div class="product-address-form-inputs mb-2">
                                <input type="number" min="0" max="100000" step="1" value="@_posX" @onchange="OnChangePosX" class="form-control"/>
                                <input type="number" min="0" max="100000" step="1" value="@_posY" @onchange="OnChangePosY" class="form-control"/>
                            </div>
                            <button class="btn btn-primary btn-icon search-filters-btn-main" @onclick="OnClickApplyLocation">
                                <i class="fa-solid fa-circle-check me-2"></i>
                                Save Address
                            </button>
                        </div>
                    }

                    <!-- CART -->
                    <div class="product-cart">
                        @if (IsProductInCart( _productDetails, out int count ))
                        {
                            <!-- CART BUTTON -->
                            <a class="btn btn-primary btn-icon w-100">
                                <i class="fa fa-shopping-cart me-2"></i>
                                <small>View In Cart (@count)</small>
                            </a>
                        }
                        else if (!_productDetails.IsInStock)
                        {
                            <!-- DISABLED BUTTON -->
                            <button disabled class="btn btn-secondary btn-icon w-100">
                                <i class="fa-solid fa-circle-xmark fa-xs"></i>
                                <small>Out of Stock</small>
                            </button>
                        }
                        else
                        {
                            <!-- DROPDOWN LIST -->
                            <div class="form-group w-50">
                                <select id="quantitySelect" class="btn btn-outline-secondary btn-icon form-select h-100 w-100" @onchange="OnQuantityChange" value="@_selectedQuantity">
                                    @foreach ( int quantity in Quantities )
                                    {
                                        <option value="@quantity" selected="@( _selectedQuantity == quantity )">Qty: @quantity</option>
                                    }
                                </select>
                            </div>
                            <!-- ADD BUTTON -->
                            <button class="btn btn-outline-primary btn-icon" @onclick="@(async () => await OnClickAddToCart())">
                                <i class="fa-solid fa-shopping-cart fa-xs"></i>
                                <small>Add To Cart</small>
                            </button>
                        }
                    </div>
                </div>
            </div>
        </div>
        
        <!-- DESCRIPTION -->
        <div class="product-description">
            <h3>Description</h3>
            <p class="mb-0">@_productDetails.Description</p>
        </div>
        
        <!-- XML -->
        <div class="product-xml">
            <h3>Specifications</h3>
            <div class="product-xml-wrapper">
                <table class="table table-bordered">
                    <tbody>
                    @foreach ( var kvp in _productSpecs )
                    {
                        <tr>
                            <th class="product-xml-th bg-light">@kvp.Key</th>
                            <td class="product-xml-td">@kvp.Value</td>
                        </tr>
                    }
                    </tbody>
                </table>
            </div>
        </div>
        
        <!-- SLIDERS -->
        <div class="product-details-sliders">
            <!-- SIMILAR PRODUCTS -->
            <ProductSlider @ref="_similarSlider" Title="Similar Products"/>
        </div>
    </div>
}

@code 
{
    [SupplyParameterFromQuery]
    public Guid ProductId { get; set; }

    [Inject] public CartManager CartManager { get; init; } = default!;
    CartItems _cartItems = CartItems.Empty();

    CategoriesCollection _categoriesCollection = default!;
    BrandsCollection _brandsCollection = default!;

    readonly int[] Quantities = [1, 2, 3, 5, 10];
    int _selectedQuantity = 1;

    ProductDetails _productDetails = default!;
    bool _productLoaded = false;
    bool _showAddressBox = false;
    Dictionary<string, string> _productSpecs = [];
    
    int? _posX;
    int? _posY;

    ProductSlider _similarSlider = default!;
    
    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        if (ProductId == Guid.Empty)
            return;
        
        var cats = Categories.GetCategories();
        var brands = Brands.GetBrands();
        await Task.WhenAll( cats, brands );
        if (!cats.Result.Succeeded || !brands.Result.Succeeded)
            return;
        _categoriesCollection = cats.Result.Data;
        _brandsCollection = brands.Result.Data;
        
        await LoadDetails();
    }

    async Task LoadDetails()
    {
        var reply = await Http.GetAsync<ProductDetailsDto>( Consts.ApiGetDetails, GetUrlParamsDetails() );
        if (!reply)
        {
            PushError( reply, "Failed to get product details." );
            return;
        }

        _productDetails = ProductDetails.From( reply.Data, _categoriesCollection, _brandsCollection );
        _productSpecs = ParseXmlToDictionary( _productDetails.Xml );
        _productLoaded = true;

        /*var cartReply = await CartManager.Get();
        if (cartReply)
            _cartItems = cartReply.Data;*/

        FireAndForget();
        //StateHasChanged();

        async void FireAndForget()
        {
            await FetchSimilarProducts();
        }
    }
    async Task OnClickAddToCart()
    {
        var cartReply = await CartManager.Add( _productDetails );
        if (!cartReply)
        {
            PushError( $"Failed to add item to cart. {cartReply.GetMessage()}" );
            return;
        }

        var newSummary = await CartManager.Get();
        if (!newSummary)
        {
            PushError( $"An error occured while getting updated cart information. {newSummary.GetMessage()}" );
            return;
        }

        _cartItems = newSummary.Data;
        StateHasChanged();
    }
    async Task FetchSimilarProducts()
    {
        var param = new Dictionary<string, object>() { { "productId", ProductId } };
        var reply = await Http.GetAsync<List<ProductSummaryDto>>( Consts.ApiGetSimilarProducts, param );
        if (!reply)
        {
            PushWarning( $"Failed to find similar products. {reply.GetMessage()}" );
            return;
        }
        _similarSlider.SetProducts( reply.Data );
    }
    async Task OnClickApplyLocation()
    {
        await LocationManager.SetLocation( _posX, _posY );
        var reply = await Http.GetAsync<List<int>>( Consts.ApiGetEstimates, GetUrlParamsEstimate() );
        if (!reply)
        {
            PushError( reply, "Failed to update delivery estimate." );
            return;
        }

        _productDetails.ShippingDays = reply.Data.FirstOrDefault();
        PushSuccess( "Updated delivery estimate." );
        StateHasChanged();
    }
    
    void OnClickAddress()
    {
        _showAddressBox = !_showAddressBox;
        StateHasChanged();
    }
    void OnChangePosX( ChangeEventArgs args )
    {
        if (!int.TryParse( args.Value?.ToString(), out int result ))
            _posX = null;
        else
            _posX = result;
    }
    void OnChangePosY( ChangeEventArgs args )
    {
        if (!int.TryParse( args.Value?.ToString(), out int result ))
            _posY = null;
        else
            _posY = result;
    }
    void OnQuantityChange( ChangeEventArgs e )
    {
        _selectedQuantity = int.Parse( e.Value?.ToString() ?? string.Empty );
    }
    bool IsProductInCart( ProductDetails p, out int count )
    {
        var isInCart = _cartItems.Contains( p.Id, out count );
        return isInCart;
    }
    Dictionary<string, object> GetUrlParamsDetails()
    {
        Dictionary<string, object> parameters = new() {
            { "ProductId", ProductId }
        };
        if (_posX is null || _posY is null)
            return parameters;
        parameters.Add( "PosX", _posX.Value );
        parameters.Add( "PosY", _posY.Value );
        return parameters;
    }
    Dictionary<string, object> GetUrlParamsEstimate()
    {
        Dictionary<string, object> parameters = new() {
            { "ProductIds", new List<Guid>() { ProductId } }
        };
        if (_posX is null || _posY is null)
            return parameters;
        parameters.Add( "PosX", _posX.Value );
        parameters.Add( "PosY", _posY.Value );
        return parameters;
    }
    static Dictionary<string, string> ParseXmlToDictionary( string? xmlString )
    {
        if (string.IsNullOrWhiteSpace( xmlString ))
            return [];

        var xmlDictionary = new Dictionary<string, string>();
        XDocument xDoc = XDocument.Parse( xmlString );

        foreach ( var element in xDoc.Root?.Elements() ?? [] )
        {
            xmlDictionary[element.Name.LocalName] = element.Value;
        }

        return xmlDictionary;
    }
    string GetDeliveryToText() =>
        _posX is null || _posY is null ? "(0 , 0)" : $"({_posX} , {_posY})";
    string GetDeliveryToIcon() =>
        _showAddressBox ? "fa-angle-up" : "fa-angle-down";
    static string GetBrandUrl( Brand b ) =>
        Consts.GetProductSearchUrl( $"?BrandIds={b.Id}&" );
    static string GetCategoryUrl( Category c ) =>
        Consts.GetProductSearchUrl( $"?CategoryId={c.Id}&" );
    static string GetDeliveryEstimateText( ProductDetails item )
    {
        if (item.ShippingDays <= 0)
            return "Enter an address";

        return item.IsInStock
            ? $"Get within {item.ShippingDays} days"
            : "Out of stock";
    }
    static string GetDeliveryEstimateColor( ProductDetails item ) =>
        item.IsInStock ? "text-success" : "text-danger";
}