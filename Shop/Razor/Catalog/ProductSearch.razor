@page "/search"
@using Shop.Infrastructure.Catalog.Brands
@using Shop.Infrastructure.Catalog.Brands.Types
@using Shop.Infrastructure.Catalog.Categories
@using Shop.Infrastructure.Catalog.Categories.Types
@using System.Text
@using System.Web
@using Shop.Infrastructure.Catalog.Search.Dtos
@using Shop.Infrastructure.Catalog.Search.Models
@using Shop.Razor.Shared.Components
@using Shop.Utilities
@inherits Shop.Razor.Shared.ShopPage
@inject CategoriesCache CategoriesCache
@inject BrandsCache BrandsCache

<div class="content-container">
    <ProductSearchHeader @ref="_headerRazor"/>
    <div class="search-body">
        <ProductSearchFilters @ref="_filtersRazor"/>
        <div class="search-body-main">
            <ProductSearchList @ref="_searchList"/>
            <PaginationPanel @ref="_paginationRazor"/>
        </div>
    </div>
</div>

@code {
    ProductSearchHeader _headerRazor = default!;
    ProductSearchFilters _filtersRazor = default!;
    ProductSearchList _searchList = default!;
    PaginationPanel _paginationRazor = default!;
    
    CategoriesCollection _categoryCollection = CategoriesCollection.None();
    BrandsCollection _brandCollection = BrandsCollection.None();

    Category? _currentCategory = null;
    LocalSearchFilters _filters = LocalSearchFilters.Empty();
    SearchResults _searchResults = SearchResults.Empty();

    protected override void OnDispose()
    {
        _headerRazor.ToggleMobileFiltersEvent -= OnToggleMobileFilters;
        _headerRazor.PreviousSelectedEvent -= OnPreviousCategorySelected;
        _headerRazor.PageSizeChangedEvent -= OnPageSizeChanged;
        _headerRazor.PageSortChangedEvent -= OnPageSortChanged;
        _filtersRazor.OnChangeFilters -= OnSearchFiltersRazorChanged;
    }
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var categoriesTask = CategoriesCache.GetCategories();
        var brandsTask = BrandsCache.GetBrands();
        
        await Task.WhenAll( categoriesTask, brandsTask );

        _categoryCollection = categoriesTask.Result
            ? categoriesTask.Result.Data
            : CategoriesCollection.None();
        _brandCollection = brandsTask.Result
            ? brandsTask.Result.Data
            : BrandsCollection.None();
        
        ParseQueryString();
        _filtersRazor.SetData( _currentCategory, _brandCollection.BrandsById.Values );
        await FetchProducts( _filters );
    }
    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        ParseQueryString();
        if (_filters.CategoryId.HasValue)
            _categoryCollection.Categories.TryGetValue( _filters.CategoryId.Value, out _currentCategory );

        _headerRazor.ToggleMobileFiltersEvent += OnToggleMobileFilters;
        _headerRazor.PreviousSelectedEvent += OnPreviousCategorySelected;
        _headerRazor.PageSizeChangedEvent += OnPageSizeChanged;
        _headerRazor.PageSortChangedEvent += OnPageSortChanged;
        _filtersRazor.OnChangeFilters += OnSearchFiltersRazorChanged;
    }
    
    async Task OnPreviousCategorySelected( Category? category )
    {
        _filters.CategoryId = category?.Id ?? null;
        await FetchProducts( _filters );
    }
    async Task OnPageChanged( int newPage )
    {
        _filters.Page = newPage;
        await FetchProducts( _filters );
    }
    async Task OnPageSizeChanged( int newPageSize )
    {
        _filters.PageSize = newPageSize;
        await FetchProducts( _filters );
    }
    async Task OnPageSortChanged( int newPageSortIndex )
    {
        _filters.SortBy = newPageSortIndex;
        await FetchProducts( _filters );
    }
    async Task OnSearchFiltersRazorChanged( LocalSearchFilters newLocalSearchFilters )
    {
        _filters = newLocalSearchFilters;
        await FetchProducts( _filters );
    }
    async Task FetchProducts( LocalSearchFilters filters )
    {
        Logger.Log( BuildSearchUrl( filters ) );
        var fetchReply = await Http.GetAsync<SearchResultsDto>( BuildSearchUrl( filters ) );
        if (!fetchReply)
        {
            PushWarning( "Failed to fetch products." );
            return;
        }
        
        _searchResults = SearchResults.From( fetchReply.Data, _brandCollection );
        _headerRazor.SetNavigation( _currentCategory, _currentCategory is null ? null : _categoryCollection.Categories );
        _searchList.ChangeSearchResults( _searchResults.Results );
        _paginationRazor.Set( _filters.Page, _filters.PageSize, _searchResults.TotalMatches );
    }
    static string BuildSearchUrl( LocalSearchFilters filters )
    {
        StringBuilder urlString = new();
        urlString.Append( Consts.ApiGetSearch );
        
        Dictionary<string, string> queryParams = new();
        
        if (filters.CategoryId.HasValue)
            queryParams["CategoryId"] = filters.CategoryId.Value.ToString();
        if (filters.BrandIds != null && filters.BrandIds.Any())
            queryParams["BrandIds"] = string.Join( ",", filters.BrandIds );
        
        if (filters.MinPrice.HasValue)
            queryParams["MinPrice"] = filters.MinPrice.Value.ToString();
        if (filters.MaxPrice.HasValue)
            queryParams["MaxPrice"] = filters.MaxPrice.Value.ToString();
        
        if (filters.IsInStock.HasValue)
            queryParams["IsInStock"] = filters.IsInStock.ToString()?.ToLower() ?? string.Empty;
        if (filters.IsFeatured.HasValue)
            queryParams["IsFeatured"] = filters.IsFeatured.ToString()?.ToLower() ?? string.Empty;
        if (filters.IsOnSale.HasValue)
            queryParams["IsOnSale"] = filters.IsOnSale.ToString()?.ToLower() ?? string.Empty;

        queryParams["Page"] = filters.Page.ToString();
        queryParams["PageSize"] = filters.PageSize.ToString();
        queryParams["SortBy"] = filters.SortBy.ToString();

        if (!queryParams.Any())
            return urlString.ToString();

        urlString.Append( "?" );

        int count = 0;
        foreach ( KeyValuePair<string, string> param in queryParams )
        {
            if (count != 0)
                urlString.Append( "&" );
            count++;
            urlString.AppendFormat( "{0}={1}", HttpUtility.UrlEncode( param.Key ), HttpUtility.UrlEncode( param.Value ) );
        }

        return urlString.ToString();
    }
    void OnToggleMobileFilters()
    {
        _filtersRazor.ToggleView();
    }
    void ParseQueryString()
    {

        var uri = Navigation.ToAbsoluteUri( Navigation.Uri );
        var query = HttpUtility.ParseQueryString( uri.Query );

        if (Guid.TryParse( query.Get( "CategoryId" ), out Guid categoryId ))
        {
            _filters.CategoryId = categoryId;
            if (_filters.CategoryId.HasValue)
                _categoryCollection.Categories.TryGetValue( _filters.CategoryId.Value, out _currentCategory );
            Console.WriteLine( $"CategoryId parsed: {_filters.CategoryId}" );
        }

        string? brandIds = query.Get( "BrandIds" );
        if (!string.IsNullOrWhiteSpace( brandIds ))
            _filters.BrandIds = brandIds.Split( ',' ).Select( Guid.Parse ).ToHashSet();

        if (int.TryParse( query.Get( "MinPrice" ), out int minPrice ))
            _filters.MinPrice = minPrice;

        if (int.TryParse( query.Get( "MaxPrice" ), out int maxPrice ))
            _filters.MaxPrice = maxPrice;

        if (bool.TryParse( query.Get( "IsInStock" ), out bool isInStock ))
            _filters.IsInStock = true;

        /*if (bool.TryParse( query.Get( "IsFeatured" ), out bool isFeatured ))
            _filters.IsFeatured = isFeatured;*/

        if (bool.TryParse( query.Get( "IsOnSale" ), out bool isOnSale ))
            _filters.IsOnSale = true;

        if (int.TryParse( query.Get( "Page" ), out int page ))
            _filters.Page = page;

        if (int.TryParse( query.Get( "PageSize" ), out int pageSize ))
            _filters.PageSize = pageSize;

        if (int.TryParse( query.Get( "SortBy" ), out int sortBy ))
            _filters.SortBy = sortBy;
    }
}