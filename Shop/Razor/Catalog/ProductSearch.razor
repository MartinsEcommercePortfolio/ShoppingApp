@page "/search"
@using Shop.Infrastructure.Catalog.Brands
@using Shop.Infrastructure.Catalog.Brands.Types
@using Shop.Infrastructure.Catalog.Categories
@using Shop.Infrastructure.Catalog.Categories.Types
@using System.Text
@using System.Web
@using Shop.Infrastructure.Catalog.Products.Dtos
@using Shop.Infrastructure.Catalog.Products.Models
@using Shop.Razor.Shared.Components
@using Shop.Utilities
@inherits Shop.Razor.Shared.ShopPage
@inject CategoriesCache CategoriesCache
@inject BrandsCache BrandsCache

<!-- MARKUP -->
<ProductSearchHeader @ref="_headerRazor"/>
<div class="content-container search-body">
    <ProductSearchFilters @ref="_filtersRazor"/>
    <div class="search-body-main">
        <ProductSearchList @ref="_searchList"/>
        <div class="d-flex align-items-center mx-auto mt-3">
            <PaginationPanel @ref="_paginationRazor"/>
        </div>
    </div>
</div>
<!-- MARKUP -->

@code 
{
    ProductSearchHeader _headerRazor = default!;
    ProductSearchFilters _filtersRazor = default!;
    ProductSearchList _searchList = default!;
    PaginationPanel _paginationRazor = default!;
    
    CategoriesCollection _categoryCollection = CategoriesCollection.None();
    BrandsCollection _brandCollection = BrandsCollection.None();

    Category? _currentCategory = null;
    SearchParameters _parameters = SearchParameters.Empty();
    SearchResults _searchResults = SearchResults.Empty();

    bool _parametersSet = false; // stop multiple event subscriptions on param set

    protected override void OnDispose()
    {
        _headerRazor.OnToggleMobileFilters -= OnToggleMobileFilters;
        _headerRazor.OnPreviousSelected -= OnBreadcrumbSelected;
        _headerRazor.OnPageSizeChanged -= OnPageSizeChanged;
        _headerRazor.OnPageSortChanged -= OnPageSortChanged;
        _filtersRazor.OnChangeFilters -= OnSearchFiltersRazorChanged;
        _filtersRazor.OnChangeLocation -= GetEstimates;
        _searchList.OnClickProductBrand -= OnClickProductBrand;
        _searchList.OnClickProductDetails -= OnClickProductDetails;
        _searchList.OnItemAddedToCart -= OnItemAddedToCart;
        _paginationRazor.OnPageChange -= OnPageChanged;
    }
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var categoriesTask = CategoriesCache.GetCategories();
        var brandsTask = BrandsCache.GetBrands();
        
        await Task.WhenAll( categoriesTask, brandsTask );

        _categoryCollection = categoriesTask.Result
            ? categoriesTask.Result.Data
            : CategoriesCollection.None();
        _brandCollection = brandsTask.Result
            ? brandsTask.Result.Data
            : BrandsCollection.None();
        
        ParseQueryString();
        _filtersRazor.SetData( _currentCategory, _categoryCollection, _brandCollection.BrandsById.Values, _parameters );
        await SearchProducts();
    }
    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        ParseQueryString();
        if (_parameters.CategoryId.HasValue)
            _categoryCollection.Categories.TryGetValue( _parameters.CategoryId.Value, out _currentCategory );

        if (!_parametersSet)
        {
            _headerRazor.OnToggleMobileFilters += OnToggleMobileFilters;
            _headerRazor.OnPreviousSelected += OnBreadcrumbSelected;
            _headerRazor.OnPageSizeChanged += OnPageSizeChanged;
            _headerRazor.OnPageSortChanged += OnPageSortChanged;
            _filtersRazor.OnChangeFilters += OnSearchFiltersRazorChanged;
            _filtersRazor.OnChangeLocation += GetEstimates;
            _searchList.OnClickProductBrand += OnClickProductBrand;
            _searchList.OnClickProductDetails += OnClickProductDetails;
            _searchList.OnItemAddedToCart += OnItemAddedToCart;
            _paginationRazor.OnPageChange += OnPageChanged;
            _parametersSet = true;
        }
    }

    async Task SearchProducts()
    {
        string apiUrl = BuildSearchQueryString( Consts.ApiGetSearch );
        var searchReply = await Http.GetAsync<ProductSearchDto>( apiUrl );
        SetCurrentCategory();
        if (!searchReply)
        {
            PushWarning( "Failed to fetch products." );
            return;
        }

        _searchResults = SearchResults.From( searchReply.Data, _brandCollection );
        _searchList.ChangeSearchResults( _searchResults.Results );
        _paginationRazor.Set( _parameters.Page, _parameters.PageSize, _searchResults.TotalMatches );
    }
    async Task GetEstimates()
    {
        string apiUrl = BuildEstimatesQueryString( Consts.ApiGetEstimates );
        string browserUrl = BuildSearchQueryString( Consts.PageProductSearch );
        var estimatesReply = await Http.GetAsync<List<int>>( apiUrl );
        SetCurrentCategory();
        
        if (!estimatesReply)
        {
            PushWarning( "Failed to get estimates." );
            return;
        }
        
        for ( int i = 0; i < estimatesReply.Data.Count; i++ )
        {
            // TODO: Remove In Production: For Testing Only
            if (i >= _searchResults.Results.Count())
            {
                PushWarning( "There was a miscount in the delivery time estimates. The displayed timings may not reflect the products they represent." );
                break;
            }

            _searchResults.Results[i].ShippingDays = estimatesReply.Data[i];
        }
        
        Navigation.NavigateTo( browserUrl, false, true );
        _searchList.RefreshState();
    }
    
    void Reload()
    {
        Navigation.NavigateTo( BuildSearchQueryString( Consts.PageProductSearch ), true );
    }
    void SetCurrentCategory()
    {
        if (_parameters.CategoryId.HasValue)
            _categoryCollection.Categories.TryGetValue( _parameters.CategoryId.Value, out _currentCategory );

        _headerRazor.SetNavigation( _currentCategory, _categoryCollection.Categories, _parameters, _searchResults.TotalMatches );
    }
    void ParseQueryString()
    {
        var uri = Navigation.ToAbsoluteUri( Navigation.Uri );
        var query = HttpUtility.ParseQueryString( uri.Query );

        if (Guid.TryParse( query.Get( "CategoryId" ), out Guid categoryId ))
            _parameters.CategoryId = categoryId;
        SetCurrentCategory();

        string? searchText = query.Get( "SearchText" );
        if (!string.IsNullOrWhiteSpace( searchText ))
            _parameters.SearchText = searchText;

        string? brandIds = query.Get( "BrandIds" );
        if (!string.IsNullOrWhiteSpace( brandIds ))
            _parameters.BrandIds = brandIds.Split( ',' ).Select( Guid.Parse ).ToHashSet();

        if (int.TryParse( query.Get( "MinPrice" ), out int minPrice ))
            _parameters.MinPrice = minPrice;

        if (int.TryParse( query.Get( "MaxPrice" ), out int maxPrice ))
            _parameters.MaxPrice = maxPrice;

        if (bool.TryParse( query.Get( "IsInStock" ), out bool isInStock ))
            _parameters.IsInStock = true;

        if (bool.TryParse( query.Get( "IsFeatured" ), out bool isFeatured ))
            _parameters.IsFeatured = true;

        if (bool.TryParse( query.Get( "IsOnSale" ), out bool isOnSale ))
            _parameters.IsOnSale = true;

        if (int.TryParse( query.Get( "Page" ), out int page ))
            _parameters.Page = page;

        if (int.TryParse( query.Get( "PageSize" ), out int pageSize ))
            _parameters.PageSize = pageSize;

        if (int.TryParse( query.Get( "SortBy" ), out int sortBy ))
            _parameters.SortBy = sortBy;

        if (int.TryParse( query.Get( "PosX" ), out int posX ))
            _parameters.PosX = posX;

        if (int.TryParse( query.Get( "PosY" ), out int posY ))
            _parameters.PosY = posY;
    }
    string BuildSearchQueryString( string baseUrl )
    {
        StringBuilder urlString = new();
        urlString.Append( baseUrl );

        Dictionary<string, string> queryParams = new();

        if (_parameters.CategoryId.HasValue)
            queryParams["CategoryId"] = _parameters.CategoryId.Value.ToString();
        if (_parameters.BrandIds != null && _parameters.BrandIds.Any())
            queryParams["BrandIds"] = string.Join( ",", _parameters.BrandIds );

        if (_parameters.MinPrice.HasValue)
            queryParams["MinPrice"] = _parameters.MinPrice.Value.ToString();
        if (_parameters.MaxPrice.HasValue)
            queryParams["MaxPrice"] = _parameters.MaxPrice.Value.ToString();

        if (_parameters.IsInStock.HasValue)
            queryParams["IsInStock"] = _parameters.IsInStock.ToString()?.ToLower() ?? string.Empty;
        if (_parameters.IsFeatured.HasValue)
            queryParams["IsFeatured"] = _parameters.IsFeatured.ToString()?.ToLower() ?? string.Empty;
        if (_parameters.IsOnSale.HasValue)
            queryParams["IsOnSale"] = _parameters.IsOnSale.ToString()?.ToLower() ?? string.Empty;

        if (_parameters.PosX.HasValue)
            queryParams["PosX"] = _parameters.PosX.ToString()?.ToLower() ?? string.Empty;
        if (_parameters.PosY.HasValue)
            queryParams["PosY"] = _parameters.PosY.ToString()?.ToLower() ?? string.Empty;

        queryParams["Page"] = _parameters.Page.ToString();
        queryParams["PageSize"] = _parameters.PageSize.ToString();
        queryParams["SortBy"] = _parameters.SortBy.ToString();

        if (!queryParams.Any())
            return urlString.ToString();

        urlString.Append( "?" );
        int count = 0;
        foreach ( KeyValuePair<string, string> param in queryParams )
        {
            if (count != 0)
                urlString.Append( "&" );
            count++;
            urlString.AppendFormat( "{0}={1}", HttpUtility.UrlEncode( param.Key ), HttpUtility.UrlEncode( param.Value ) );
        }

        return urlString.ToString();
    }
    string BuildEstimatesQueryString( string baseUrl )
    {
        StringBuilder urlString = new();
        urlString.Append( baseUrl );

        Dictionary<string, string> queryParams = new();
        string c = string.Join( ",", _searchResults.Results.Select( static p => p.Id ) );
        queryParams["ProductIds"] = c;
        
        if (_parameters.PosX.HasValue)
            queryParams["PosX"] = _parameters.PosX.ToString()?.ToLower() ?? string.Empty;
        if (_parameters.PosY.HasValue)
            queryParams["PosY"] = _parameters.PosY.ToString()?.ToLower() ?? string.Empty;

        if (!queryParams.Any())
            return urlString.ToString();

        urlString.Append( "?" );
        int count = 0;
        foreach ( KeyValuePair<string, string> param in queryParams )
        {
            if (count != 0)
                urlString.Append( "&" );
            count++;
            urlString.AppendFormat( "{0}={1}", HttpUtility.UrlEncode( param.Key ), HttpUtility.UrlEncode( param.Value ) );
        }

        return urlString.ToString();
    }
    
    void OnPageChanged( int newPage )
    {
        _parameters.Page = newPage;
        Reload();
    }
    void OnPageSizeChanged( int newPageSize )
    {
        _parameters.Page = 0;
        _parameters.PageSize = newPageSize;
        Reload();
    }
    void OnPageSortChanged( int newPageSortIndex )
    {
        _parameters.Page = 0;
        _parameters.SortBy = newPageSortIndex;
        Reload();
    }
    void OnSearchFiltersRazorChanged()
    {
        if (_parameters.CategoryId != _currentCategory?.Id)
        {  
            if (_parameters.CategoryId is not null)
            _categoryCollection.Categories.TryGetValue( _parameters.CategoryId.Value, out _currentCategory );
            Console.WriteLine("Not equal!!!!!!!!!!!!1");
            _parameters = SearchParameters.Empty();
            _parameters.CategoryId = _currentCategory?.Id;
        }
        else
        {
            Console.WriteLine("EQUAL");
        }
        
        SetCurrentCategory();
        Reload();
    }
    void OnBreadcrumbSelected( Category? category )
    {
        _parameters.Page = 0;
        _parameters.CategoryId = category?.Id ?? null;
        Reload();
    }
    void OnToggleMobileFilters()
    {
        _filtersRazor.ToggleView();
    }
    void OnClickProductBrand( Brand b )
    {
        Navigation.NavigateTo( $"{Consts.PageProductSearch}?BrandIds={b.Id}", true );
    }
    void OnClickProductDetails( Guid productId )
    {
        string url = $"{Consts.PageProductDetails}?ProductId={productId}";

        if (_parameters.PosX.HasValue && _parameters.PosY.HasValue)
            url += $"&PosX={_parameters.PosX.Value}&PosY={_parameters.PosY.Value}";

        Navigation.NavigateTo( url, true );
    }
    void OnItemAddedToCart( bool success, string? failureMessage )
    {
        if (success) PushSuccess( "Added item to cart." );
        else PushError( $"Failed to add item to cart. {failureMessage}" );
    }
}