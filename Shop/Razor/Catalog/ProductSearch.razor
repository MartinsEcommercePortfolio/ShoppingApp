@page "/search"
@using System.Text
@using System.Web
@using Shop.Infrastructure
@using Shop.Razor.Shared.Components
@using Shop.Types.Brands
@using Shop.Types.Categories
@using Shop.Types.Products
@using Shop.Types.Products.Dtos
@using Shop.Types.Users
@using Shop.Utilities
@inherits Shop.Razor.Shared.ShopPage
@inject CategoriesCache CategoriesCache
@inject BrandsCache BrandsCache
@inject LocationManager LocationManager;

<!-- MARKUP -->
<LoadingPanelPage/>
<div class="position-relative">
    <ProductSearchHeader @ref="@_headerRazor"/>
    <div class="content-container search-body">
        <ProductSearchFilters @ref="@_filtersRazor"/>
        <div class="search-body-main">
            <ProductSearchList @ref="@_searchList"/>
            <div class="d-flex align-items-center mx-auto mt-3">
                <PaginationPanel @ref="@_paginationRazor"/>
            </div>
        </div>
    </div>
</div>
<!-- MARKUP -->

@code
{
    ProductSearchHeader _headerRazor = default!;
    ProductSearchFilters _filtersRazor = default!;
    ProductSearchList _searchList = default!;
    PaginationPanel _paginationRazor = default!;
    
    CategoriesCollection _categoryCollection = CategoriesCollection.None();
    BrandsCollection _brandCollection = BrandsCollection.None();

    Category? _currentCategory;
    SearchParametersDto _parametersDto = SearchParametersDto.Empty();
    SearchResultsModel _searchResultsDto = SearchResultsModel.Empty();

    bool _isFetching = false;
    
    protected override void OnDispose()
    {
        _headerRazor.OnToggleMobileFilters -= OnToggleMobileFilters;
        _headerRazor.OnBreadcrumbSelected -= OnBreadcrumbSelected;
        _headerRazor.OnPageSizeChanged -= OnPageSizeChanged;
        _headerRazor.OnPageSortChanged -= OnPageSortChanged;
        _filtersRazor.OnChangeFilters -= OnSearchFiltersRazorChanged;
        _searchList.OnItemAddedToCart -= OnItemAddedToCart;
        _paginationRazor.OnPageChange -= OnPageChanged;

        LocationManager.OnLocationChangedAsync -= OnChangeLocation;
    }
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        
        var categoriesTask = CategoriesCache.GetCategories();
        var brandsTask = BrandsCache.GetBrands();
        
        await Task.WhenAll( categoriesTask, brandsTask );

        _categoryCollection = categoriesTask.Result
            ? categoriesTask.Result.Data
            : CategoriesCollection.None();
        _brandCollection = brandsTask.Result
            ? brandsTask.Result.Data
            : BrandsCollection.None();
    }
    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if (_isFetching)
            return;

        _isFetching = true;
        
        Loader.StartLoadingPage( "Loading products..." );
        ParseQueryString();
        await GetLocation();
        await SearchProducts();
        await Utils.Delay();

        _isFetching = false;
        Loader.StopLoadingPage();
    }
    protected override async Task OnAfterRenderAsync( bool firstRender )
    {
        await base.OnAfterRenderAsync( firstRender );

        if (_parametersDto.CategoryId.HasValue)
            _categoryCollection.Categories.TryGetValue( _parametersDto.CategoryId.Value, out _currentCategory );
        _headerRazor.SetNavigation( _currentCategory, _categoryCollection.Categories, _parametersDto, _searchResultsDto.TotalCount );
        _filtersRazor.SetData( _currentCategory, _categoryCollection, _brandCollection.BrandsById.Values, _parametersDto );
        
        if (firstRender)
        {
            _headerRazor.OnToggleMobileFilters += OnToggleMobileFilters;
            _headerRazor.OnBreadcrumbSelected += OnBreadcrumbSelected;
            _headerRazor.OnPageSizeChanged += OnPageSizeChanged;
            _headerRazor.OnPageSortChanged += OnPageSortChanged;
            _filtersRazor.OnChangeFilters += OnSearchFiltersRazorChanged;
            _searchList.OnItemAddedToCart += OnItemAddedToCart;
            _paginationRazor.OnPageChange += OnPageChanged;

            LocationManager.OnLocationChangedAsync += OnChangeLocation;
        }
    }
    
    void ParseQueryString()
    {
        _currentCategory = null;
        _parametersDto = SearchParametersDto.Empty();

        var uri = Navigation.ToAbsoluteUri( Navigation.Uri );
        var query = HttpUtility.ParseQueryString( uri.Query );

        if (Guid.TryParse( query.Get( "CategoryId" ), out Guid categoryId ))
            _parametersDto.CategoryId = categoryId;

        string? searchText = query.Get( "SearchText" );
        if (!string.IsNullOrWhiteSpace( searchText ))
            _parametersDto.SearchText = searchText;

        string? brandIds = query.Get( "BrandIds" );
        if (!string.IsNullOrWhiteSpace( brandIds ))
            _parametersDto.BrandIds = brandIds.Split( ',' ).Select( Guid.Parse ).ToHashSet();

        if (int.TryParse( query.Get( "MinPrice" ), out int minPrice ))
            _parametersDto.MinPrice = minPrice;

        if (int.TryParse( query.Get( "MaxPrice" ), out int maxPrice ))
            _parametersDto.MaxPrice = maxPrice;

        if (!string.IsNullOrWhiteSpace( query.Get( "IsInStock" ) ))
            _parametersDto.IsInStock = true;

        if (!string.IsNullOrWhiteSpace( query.Get( "IsFeatured" ) ))
            _parametersDto.IsFeatured = true;

        if (!string.IsNullOrWhiteSpace( query.Get( "IsOnSale" ) ))
            _parametersDto.IsOnSale = true;

        if (int.TryParse( query.Get( "Page" ), out int page ))
            _parametersDto.Page = page;

        if (int.TryParse( query.Get( "PageSize" ), out int pageSize ))
            _parametersDto.PageSize = pageSize;

        if (int.TryParse( query.Get( "SortBy" ), out int sortBy ))
            _parametersDto.SortBy = sortBy;
    }
    string BuildSearchQueryString( string baseUrl, bool isApi )
    {
        StringBuilder urlString = new();
        urlString.Append( baseUrl );

        Dictionary<string, string> queryParams = new();

        if (!string.IsNullOrWhiteSpace( _parametersDto.SearchText ))
            queryParams["SearchText"] = _parametersDto.SearchText;
        
        if (_parametersDto.CategoryId.HasValue)
            queryParams["CategoryId"] = _parametersDto.CategoryId.Value.ToString();
        if (_parametersDto.BrandIds != null && _parametersDto.BrandIds.Any())
            queryParams["BrandIds"] = string.Join( ",", _parametersDto.BrandIds );

        if (_parametersDto.MinPrice.HasValue)
            queryParams["MinPrice"] = _parametersDto.MinPrice.Value.ToString();
        if (_parametersDto.MaxPrice.HasValue)
            queryParams["MaxPrice"] = _parametersDto.MaxPrice.Value.ToString();

        if (_parametersDto.IsInStock.HasValue)
            queryParams["IsInStock"] = _parametersDto.IsInStock.ToString()?.ToLower() ?? string.Empty;
        if (_parametersDto.IsFeatured.HasValue)
            queryParams["IsFeatured"] = _parametersDto.IsFeatured.ToString()?.ToLower() ?? string.Empty;
        if (_parametersDto.IsOnSale.HasValue)
            queryParams["IsOnSale"] = _parametersDto.IsOnSale.ToString()?.ToLower() ?? string.Empty;

        if (isApi)
        {
            if (_parametersDto.PosX.HasValue)
                queryParams["PosX"] = _parametersDto.PosX.ToString()?.ToLower() ?? string.Empty;
            if (_parametersDto.PosY.HasValue)
                queryParams["PosY"] = _parametersDto.PosY.ToString()?.ToLower() ?? string.Empty;
        }

        queryParams["Page"] = _parametersDto.Page.ToString();
        queryParams["PageSize"] = _parametersDto.PageSize.ToString();
        queryParams["SortBy"] = _parametersDto.SortBy.ToString();

        if (!queryParams.Any())
            return urlString.ToString();

        urlString.Append( "?" );
        int count = 0;
        foreach ( KeyValuePair<string, string> param in queryParams )
        {
            if (count != 0)
                urlString.Append( "&" );
            count++;
            urlString.AppendFormat( "{0}={1}", HttpUtility.UrlEncode( param.Key ), HttpUtility.UrlEncode( param.Value ) );
        }

        return urlString.ToString();
    }
    string BuildEstimatesQueryString()
    {
        StringBuilder urlString = new();
        urlString.Append( Consts.ApiGetEstimates );

        Dictionary<string, string> queryParams = new();
        string c = string.Join( ",", _searchResultsDto.Products.Select( static p => p.Id ) );
        queryParams["ProductIds"] = c;
        
        if (_parametersDto.PosX.HasValue)
            queryParams["PosX"] = _parametersDto.PosX.ToString()?.ToLower() ?? string.Empty;
        if (_parametersDto.PosY.HasValue)
            queryParams["PosY"] = _parametersDto.PosY.ToString()?.ToLower() ?? string.Empty;

        if (!queryParams.Any())
            return urlString.ToString();

        urlString.Append( "?" );
        int count = 0;
        foreach ( KeyValuePair<string, string> param in queryParams )
        {
            if (count != 0)
                urlString.Append( "&" );
            count++;
            urlString.AppendFormat( "{0}={1}", HttpUtility.UrlEncode( param.Key ), HttpUtility.UrlEncode( param.Value ) );
        }

        return urlString.ToString();
    }
    
    void Reload()
    {
        Navigation.NavigateTo( BuildSearchQueryString( Consts.PageProductSearch, false ), false, true );
    }
    async Task SearchProducts()
    {
        var searchReply = await Http.GetAsync<SearchResultsDto>( 
            BuildSearchQueryString( Consts.ApiGetSearch, true ) );
        
        if (!searchReply)
            PushWarning( "Failed to fetch products." );

        _searchResultsDto = searchReply
            ? SearchResultsModel.From( searchReply.Data )
            : SearchResultsModel.Empty();

        _headerRazor.SetNavigation( _currentCategory, _categoryCollection.Categories, _parametersDto, _searchResultsDto.TotalCount );
        _searchList.ChangeSearchResults( _searchResultsDto.Products );
        _searchList.SetLocation( _parametersDto.PosX, _parametersDto.PosY );
        _paginationRazor.Set( _parametersDto.Page, _parametersDto.PageSize, _searchResultsDto.TotalCount );
    }
    async Task GetLocation()
    {
        AddressModel? reply = await LocationManager.GetCurrentAddress();
        if (reply is null)
        {
            _parametersDto.PosX = null;
            _parametersDto.PosY = null;
        }
        else
        {
            _parametersDto.PosX = reply.PosX;
            _parametersDto.PosY = reply.PosY;
        }
    }
    async Task OnChangeLocation( AddressModel? location )
    {
        Loader.StartLoadingPage( "Loading location..." );
        await Task.Delay( 500 );

        if (location is null)
        {
            _parametersDto.PosX = null;
            _parametersDto.PosY = null;
        }
        else
        {
            _parametersDto.PosX = location.PosX;
            _parametersDto.PosY = location.PosY;
        }
        
        var estimatesReply = await Http.GetAsync<List<int>>(
            BuildEstimatesQueryString() );

        if (!estimatesReply)
        {
            PushWarning( "Failed to get estimates." );
            Loader.StopLoadingPage();
            return;
        }
        
        try
        {
            for ( int i = 0; i < estimatesReply.Data.Count; i++ )
            {
                // TODO: Remove In Production: For Testing Only
                if (i >= _searchResultsDto.Products.Count())
                {
                    PushWarning( "There was a miscount in the delivery time estimates. The displayed timings may not reflect the products they represent." );
                    break;
                }

                _searchResultsDto.Products[i].ShippingDays = estimatesReply.Data[i];
            }
        }
        catch ( Exception e )
        {
            PushWarning( "There was a miscount in the delivery time estimates. The displayed timings may not reflect the products they represent." );
            Console.Error.WriteLine( e );
            Loader.StopLoadingPage();
        }
        
        _searchList.RefreshState();
        Loader.StopLoadingPage();
    }
    void OnBreadcrumbSelected( Category? category )
    {
        _parametersDto = SearchParametersDto.Empty();
        _parametersDto.CategoryId = category?.Id ?? null;
        
        Reload();
    }
    void OnPageChanged( int newPage )
    {
        _parametersDto.Page = newPage;
        Reload();
    }
    void OnPageSizeChanged( int newPageSize )
    {
        _parametersDto.Page = 0;
        _parametersDto.PageSize = newPageSize;
        Reload();
    }
    void OnPageSortChanged( int newPageSortIndex )
    {
        _parametersDto.Page = 0;
        _parametersDto.SortBy = newPageSortIndex;
        Reload();
    }
    void OnSearchFiltersRazorChanged()
    {
        if (_parametersDto.CategoryId != _currentCategory?.Id)
        {
            if (_parametersDto.CategoryId is not null)
                _categoryCollection.Categories.TryGetValue( _parametersDto.CategoryId.Value, out _currentCategory );
            _parametersDto = SearchParametersDto.Empty();
            _parametersDto.CategoryId = _currentCategory?.Id;
        }

        Reload();
    }
    void OnToggleMobileFilters()
    {
        _filtersRazor.ToggleView();
    }
    void OnItemAddedToCart( bool success, string? failureMessage )
    {
        if (success) PushSuccess( "Added item to cart." );
        else PushError( $"Failed to add item to cart. {failureMessage}" );
    }
}