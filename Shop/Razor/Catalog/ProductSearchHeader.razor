@using Shop.Infrastructure.Catalog.Categories.Types

<!-- CONTAINER -->
<div class="container">
    <div class="row d-flex flex-row align-items-center justify-content-between">
        <!-- BREADCRUMB -->
        <div class="col-12 col-md-auto">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    @foreach (string crumb in _breadcrumbStrings)
                    {
                        <li class="breadcrumb-item @GetActiveBreadcrumbCss(crumb)">
                            <button class="btn btn-link" @onclick="()=>OnClickBreadCrumb(crumb)">@crumb</button>
                        </li>
                    }
                </ol>
            </nav>
        </div>

        <!-- BUTTONS -->
        <div class="d-flex flex-row align-items-center justify-content-between col-12 col-md-auto">

            <!-- PAGE SIZE -->
            <div class="col-6 col-md-auto mb-2 mb-md-0">
                <div class="dropdown w-100">
                    <!-- TOGGLE -->
                    <button class="btn btn-outline-secondary dropdown-toggle w-100" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                        Page Size: @PageSizeOptions[_selectedPageSizeIndex];
                    </button>
                    <!-- LIST -->
                    <ul class="dropdown-menu w-100" aria-labelledby="Rows">
                        @for ( int i = 0; i < PageSizeOptions.Length; i++ ) {
                            int localIndex = i; // Create a local copy of the loop variable
                            <li>
                                <button class="dropdown-item" type="button" @onclick="() => OnSelectPageSize( localIndex )">
                                    @PageSizeOptions[localIndex]
                                </button>
                            </li>
                        }
                    </ul>
                </div>
            </div>

            <!-- SORT BY -->
            <div class="col-6 col-md-auto">
                <div class="dropdown w-100">
                    <!-- TOGGLE -->
                    <button class="btn btn-outline-secondary dropdown-toggle w-100" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                        Sort By: @PageSortOptions[_selectedPageSortIndex];
                    </button>
                    <!-- LIST -->
                    <ul class="dropdown-menu w-100" aria-labelledby="SortBy">
                        @for ( int i = 0; i < PageSortOptions.Length; i++ ) {
                            int localIndex = i; // Create a local copy of the loop variable
                            <li>
                                <button class="dropdown-item" type="button" @onclick="() => OnSelectPageSort( localIndex )">
                                    @PageSortOptions[localIndex]
                                </button>
                            </li>
                        }
                    </ul>
                </div>
            </div>
            
            <!-- MOBILE FILTERS -->
            <div class="d-block d-md-none col-12 mb-2">
                <button class="btn btn-primary w-100" @onclick="OnClickMobileFilters">Filters</button>
            </div>
            
        </div>
    </div>
</div>


@code {
    const string BaseBreadcrumbString = "Search/";
    static readonly int[] PageSizeOptions = [5, 10, 15, 20, 50, 100];
    static readonly string[] PageSortOptions = ["Featured, On Sale, Price Low, Price High"];
    readonly List<string> _breadcrumbStrings = [BaseBreadcrumbString];
    readonly List<Category> _categoryChain = [];
    int _selectedPageSizeIndex = 0;
    int _selectedPageSortIndex = 0;
    
    public event Func<Category?, Task>? PreviousSelectedEvent;
    public event Func<int, Task>? PageSizeChangedEvent;
    public event Func<int, Task>? PageSortChangedEvent;
    public event Action? ToggleMobileFiltersEvent;
    
    public void SetNavigation( Category? newCategory, IReadOnlyDictionary<Guid, Category>? categoriesById )
    {
        _breadcrumbStrings.Clear();
        _breadcrumbStrings.Add( BaseBreadcrumbString );
        
        _categoryChain.Clear();
        if (newCategory is null) {
            StateHasChanged();
            return;
        }

        Category currentCategory = newCategory;
        while ( true ) {
            _categoryChain.Add( currentCategory );
            if (currentCategory.ParentId is null)
                break;
            if (!categoriesById!.TryGetValue( currentCategory.ParentId.Value, out Category? parent ))
                break;
            currentCategory = parent;
        }

        _categoryChain.Reverse();

        foreach ( Category c in _categoryChain )
            _breadcrumbStrings.Add( c.Name );
        
        StateHasChanged();
    }
    
    string GetActiveBreadcrumbCss( string breadcrumb ) =>
        breadcrumb == _breadcrumbStrings.Last() ? "active" : string.Empty;
    void OnClickBreadCrumb( string breadcrumb )
    {
        Category? category = _categoryChain.FirstOrDefault( c => c.Name == breadcrumb );
        PreviousSelectedEvent?.Invoke( category );
    }
    void OnClickMobileFilters()
    {
        ToggleMobileFiltersEvent?.Invoke();
    }
    void OnSelectPageSize( int pageSizeOptionIndex )
    {
        _selectedPageSizeIndex = Math.Clamp( pageSizeOptionIndex, 0, PageSizeOptions.Length );
        PageSizeChangedEvent?.Invoke( pageSizeOptionIndex );
    }
    void OnSelectPageSort( int pageSortOptionIndex )
    {
        _selectedPageSortIndex = Math.Clamp( pageSortOptionIndex, 0, PageSortOptions.Length );
        PageSortChangedEvent?.Invoke( pageSortOptionIndex );
    }
}