@using Shop.Infrastructure.Catalog.Categories.Types

<!-- WRAPPER -->
<div class="search-header">
    <!-- BREADCRUMB -->
    <nav class="search-header-breadcrumb" aria-label="breadcrumb">
        <ol class="breadcrumb mb-0">
            @foreach (string crumb in _breadcrumbStrings)
            {
                <li class="breadcrumb-item @GetActiveBreadcrumbCss(crumb)">
                    <button class="btn btn-link p-0 fw-bold" @onclick="()=>OnClickBreadCrumb(crumb)">@crumb</button>
                </li>
            }
        </ol>
    </nav>

    <!-- SORT BUTTONS -->
    <div class="search-header-sort-buttons">
        <!-- PAGE SIZE -->
        <div class="dropdown w-100">
            <!-- TOGGLE -->
            <button class="btn btn-outline-secondary dropdown-toggle w-100" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                Page Size: @PageSizeOptions[_selectedPageSizeIndex]
            </button>
            <!-- LIST -->
            <ul class="dropdown-menu w-100" aria-labelledby="Rows">
                @foreach ( int pageSize in PageSizeOptions )
                {
                    <li>
                        <button class="dropdown-item" type="button" @onclick="() => OnSelectPageSize( pageSize )">
                            @pageSize
                        </button>
                    </li>
                }
            </ul>
        </div>
        <!-- SORT BY -->
        <div class="dropdown w-100">
            <!-- TOGGLE -->
            <button class="btn btn-outline-secondary dropdown-toggle w-100" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                Sort By: @PageSortOptions[_selectedPageSortIndex]
            </button>
            <!-- LIST -->
            <ul class="dropdown-menu w-100" aria-labelledby="SortBy">
                @for ( int i = 0; i < PageSortOptions.Length; i++ ) {
                    int localIndex = i; // Create a local copy of the loop variable
                    <li>
                        <button class="dropdown-item" type="button" @onclick="() => OnSelectPageSort( localIndex )">
                            @PageSortOptions[localIndex]
                        </button>
                    </li>
                }
            </ul>
        </div>
    </div>
    
     <!-- MOBILE FILTERS -->
    <button class="btn btn-primary w-100 search-header-filters" @onclick="OnClickMobileFilters">
        Filters
    </button>
</div>


@code {
    const string BaseBreadcrumbString = "Search Catalog";
    static readonly int[] PageSizeOptions = [5, 10, 15, 20, 50, 100];
    static readonly string[] PageSortOptions = ["Price Low", "Price High"];
    readonly List<string> _breadcrumbStrings = [BaseBreadcrumbString];
    readonly List<Category> _categoryChain = [];
    int _selectedPageSizeIndex = 0;
    int _selectedPageSortIndex = 0;
    
    public event Action<Category?>? PreviousSelectedEvent;
    public event Action<int>? PageSizeChangedEvent;
    public event Action<int>? PageSortChangedEvent;
    public event Action? ToggleMobileFiltersEvent;
    
    public void SetNavigation( Category? newCategory, IReadOnlyDictionary<Guid, Category>? categoriesById )
    {
        _breadcrumbStrings.Clear();
        _breadcrumbStrings.Add( BaseBreadcrumbString );
        _categoryChain.Clear();
        
        if (newCategory is null) {
            StateHasChanged();
            return;
        }

        Category currentCategory = newCategory;
        while ( true ) {
            _categoryChain.Add( currentCategory );
            if (currentCategory.ParentId is null)
                break;
            if (!categoriesById!.TryGetValue( currentCategory.ParentId.Value, out Category? parent ))
                break;
            currentCategory = parent;
        }

        _categoryChain.Reverse();

        foreach ( Category c in _categoryChain )
            _breadcrumbStrings.Add( c.Name );
        
        StateHasChanged();
    }
    
    string GetActiveBreadcrumbCss( string breadcrumb ) =>
        breadcrumb == _breadcrumbStrings.Last() ? "active" : string.Empty;
    void OnClickBreadCrumb( string breadcrumb )
    {
        Category? category = _categoryChain.FirstOrDefault( c => c.Name == breadcrumb );
        PreviousSelectedEvent?.Invoke( category );
    }
    void OnClickMobileFilters()
    {
        ToggleMobileFiltersEvent?.Invoke();
    }
    void OnSelectPageSize( int pageSize )
    {
        _selectedPageSizeIndex = Math.Clamp( pageSize, 0, PageSizeOptions.Last() );
        PageSizeChangedEvent?.Invoke( pageSize );
    }
    void OnSelectPageSort( int pageSortOptionIndex )
    {
        _selectedPageSortIndex = Math.Clamp( pageSortOptionIndex, 0, PageSortOptions.Length - 1 );
        PageSortChangedEvent?.Invoke( pageSortOptionIndex );
    }
}