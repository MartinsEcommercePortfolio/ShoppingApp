@using Shop.Utilities
@using Shop.Infrastructure.Catalog.Products.Models
@using Shop.Infrastructure.Catalog.Brands.Types
@using Shop.Infrastructure.Ordering;
@using Shop.Infrastructure.Ordering.Types
@using Shop.Infrastructure.Authentication

<!-- CONTAINER -->
<div class="search-list">
    @foreach ( ProductDetails p in _searchItems )
    {
        <!-- ITEM -->
        <div class="search-item">
            
            <!-- IMAGE -->
            <div class="search-item-img">
                <button class="btn" @onclick="@(()=>OnClickDetails(p))">
                    <img src="@p.Image" alt="@p.Name"/>
                </button>
            </div>

            <!-- BODY -->
            <div class="search-item-body ">
                
                <!-- TITLE -->
                <button class="btn search-item-title" @onclick="@(()=>OnClickDetails(p))">
                    <h3>@p.Name</h3>
                </button>

                <!-- RATING -->
                <div class="search-item-rating mb-1">
                    @for ( int i = 1; i <= 5; i++ )
                    {
                        <div>
                            <i class="fa fa-star fa-xs @GetRatingCss( p, i )"></i>
                        </div>
                    }
                    <small class="d-block ms-1 text-muted">
                        @p.NumberRatings
                    </small>
                </div>

                <!-- BRAND -->
                <div class="search-item-brand mb-2">
                    <span class="d-block text-muted">
                        Brand:&nbsp;
                    </span>
                    <button class="d-block btn btn-link" @onclick="@(() => OnClickBrand( p.Brand ))">
                        @p.Brand.Name
                    </button>
                </div>
                
                <!-- SHIPPING -->
                <div class="search-item-shipping mb-1">
                    <small class="@GetDeliveryEstimateColor( p )">
                        @GetDeliveryEstimateText( p )
                    </small>
                </div>
                
                <!-- PRICING -->
                <div class="search-item-pricing mb-3">
                    @if (p.SalePrice > 0)
                    {
                        <span class="search-item-price">
                            $@p.SalePrice
                        </span>
                        <span class="ms-2 text-muted text-decoration-line-through">
                            $@p.Price
                        </span>
                    }
                    else
                    {
                        <span class="search-item-price">
                            $@p.Price
                        </span>
                    }
                </div>
                
                <!-- CART -->
                @if (IsProductInCart( p, out int count ))
                {
                    <a class="btn btn-info btn-icon search-item-cart-button" href="@Consts.PageCart">
                        <i class="fa-solid fa-circle-check fa-xs"></i>
                        <small>View In Cart (@count)</small>
                    </a>
                }
                else if (p.IsInStock)
                {
                    <button class="btn btn-primary btn-icon search-item-cart-button" @onclick="@(async ()=> await AddToCart(p))">
                        <i class="fa-solid fa-shopping-cart fa-xs"></i>
                        <small>Add To Cart</small>
                    </button>
                }
                else
                {
                    <button disabled class="btn btn-secondary btn-icon search-item-cart-button">
                        <i class="fa-solid fa-circle-xmark fa-xs"></i>
                        <small>Out of Stock</small>
                    </button>
                }
            </div>
        </div>
    }
</div>

@code 
{
    [Inject] public CartManager CartManager { get; init; } = default!;
    CartItems _cartItems = CartItems.Empty();
    
    public event Action<Brand>? OnClickProductBrand; 
    public event Action<Guid>? OnClickProductDetails;
    public event Action<bool,string?>? OnItemAddedToCart; 
    public void ChangeSearchResults( List<ProductDetails> items )
    {
        _searchItems = items;
        StateHasChanged();
    }

    List<ProductDetails> _searchItems = [];

    public void RefreshState()
    {
        StateHasChanged();
    }

    async Task AddToCart( ProductDetails p )
    {
        var cartReply = await CartManager.Add( p );
        if (!cartReply)
        {
            OnItemAddedToCart?.Invoke( false, cartReply.GetMessage() );
            return;
        }

        var newSummary = await CartManager.Get();
        if (!newSummary)
        {
            OnItemAddedToCart?.Invoke( false, cartReply.GetMessage() );
            return;
        }
        
        _cartItems = newSummary.Data;
        OnItemAddedToCart?.Invoke( true, null );
        StateHasChanged();
    }
    void OnClickBrand( Brand brand )
    {
        OnClickProductBrand?.Invoke( brand );
    }
    void OnClickDetails( ProductDetails p )
    {
        OnClickProductDetails?.Invoke( p.Id );
    }
    bool IsProductInCart( ProductDetails p, out int count )
    {
        bool isInCart = _cartItems.Contains( p.Id, out count );
        return isInCart;
    }
    
    static string GetDeliveryEstimateText( ProductDetails item ) =>
        item.IsInStock ? $"Get within {item.ShippingDays} days." : "Out of stock.";
    static string GetDeliveryEstimateColor( ProductDetails item ) =>
        item.IsInStock ? "text-success" : "text-danger";
    static string GetDetailsLink( ProductDetails item ) =>
        $"{Consts.PageProductDetails}?ProductId={item.Id}";
    static string GetRatingCss( ProductDetails item, int level ) =>
        item.Rating >= level ? "rating-star-full" : "rating-star-empty";
    static string GetShippingText( ProductDetails item ) =>
        item.IsInStock ? $"Get within {item.ShippingDays} days." : "Out of stock.";
}