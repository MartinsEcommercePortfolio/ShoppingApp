@using Shop.Utilities
@using Shop.Infrastructure.Authentication
@using Shop.Types.Cart
@using Shop.Infrastructure
@using Shop.Types.Products
@using Shop.Types.Products.Dtos

<!-- CONTAINER -->
<div class="search-list">
    @foreach ( ProductModel p in _products )
    {
        <!-- PRODUCT -->
        <ProductCard Product="@p"/>
    }
</div>

@code 
{
    [Inject] public CartManager CartManager { get; init; } = default!;
    CartItems _cartItems = CartItems.Empty();
    List<ProductModel> _products = [];
    
    public event Action<bool,string?>? OnItemAddedToCart;
    public void SetLocation( int? x, int? y )
    {
        StateHasChanged();
    }
    public void ChangeSearchResults( List<ProductModel> products )
    {
        _products = products;
        StateHasChanged();
    }
    public void RefreshState()
    {
        StateHasChanged();
    }
    
    async Task AddToCart( ProductModel p )
    {
        ArgumentNullException.ThrowIfNull( p );
        var cartReply = await CartManager.Add( p.Id );
        if (!cartReply)
        {
            OnItemAddedToCart?.Invoke( false, cartReply.GetMessage() );
            return;
        }

        var newSummary = await CartManager.Get();
        if (!newSummary)
        {
            OnItemAddedToCart?.Invoke( false, cartReply.GetMessage() );
            return;
        }
        
        _cartItems = newSummary.Data;
        OnItemAddedToCart?.Invoke( true, null );
        StateHasChanged();
    }
    bool IsProductInCart( ProductModel p, out int count )
    {
        bool isInCart = _cartItems.Contains( p.Id, out count );
        return isInCart;
    }
    
    static string GetDeliveryEstimateText( ProductModel p ) =>
        p.IsInStock ? $"Get within {p.ShippingDays} days." : "Out of stock.";
    static string GetDeliveryEstimateColor( ProductModel p ) =>
        p.IsInStock ? "text-success" : "text-danger";
    static string GetShippingText( ProductModel p ) =>
        p.IsInStock ? $"Get within {p.ShippingDays} days." : "Out of stock.";
}