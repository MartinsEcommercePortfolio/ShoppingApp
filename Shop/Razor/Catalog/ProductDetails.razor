@page "/product"
@using Shop.Infrastructure.Catalog.Products.Models
@using Shop.Utilities
@using Shop.Infrastructure.Catalog.Products.Dtos
@using Shop.Infrastructure.Catalog.Categories
@using Shop.Infrastructure.Catalog.Brands
@using Shop.Infrastructure.Catalog.Categories.Types
@using System.Xml.Linq
@using Shop.Infrastructure.Catalog.Brands.Types
@inherits Shop.Razor.Shared.ShopPage
@inject CategoriesCache Categories;
@inject BrandsCache Brands;

@if (_productLoaded)
{
    <!-- CONTAINER -->
    <div class="product-container">
        <!-- TOP -->
        <div class="product-top">
            
            <!-- IMAGE -->
            <div class="product-top-image">
                <img src="@_product.Image" alt="@_product.Name"/>
            </div>
            
            <!-- MAIN -->
            <div class="product-top-main">
            
                <!-- TITLE -->
                <h3 class="product-title">
                    @_product.Name
                </h3>
                
                <!-- SUMMARY -->
                <div class="product-summary">

                    <!-- RATING & BRAND -->
                    <div class="product-rating-brand">
                        <!-- RATING -->
                        <div class="product-rating">
                            @for ( int i = 1; i <= 5; i++ )
                            {
                                <div>
                                    <i class="fa fa-star fa-xs @GetRatingCss( _product, i )"></i>
                                </div>
                            }
                            <small class="d-block ms-1 text-muted">(@_product.NumberRatings Ratings)</small>
                        </div>
                        <!-- BRAND -->
                        <div class="product-brand">
                            <span class="d-block text-muted">Brand:&nbsp;</span>
                            <button class="d-block btn btn-link" @onclick="@(()=>OnClickBrand(_product.Brand))">@_product.Brand.Name</button>
                        </div>
                    </div>
                </div>
                
                <!-- CATEGORIES -->
                <div class="product-categories d-flex flex-row flex-wrap align-items-center justify-content-start gap-2 py-3">
                    @foreach ( Category c in _product.Categories )
                    {
                        <button class="d-inline-block btn btn-sm btn-outline-secondary mb-1" @onclick="() => OnClickCategory( c )">@c.Name</button>
                    }
                </div>
                
                <!-- PRICE & SHIPPING -->
                <div class="product-pricing-shipping">
                    <!-- PRICING -->
                    <div class="product-pricing">
                        @if (_product.SalePrice > 0)
                        {
                            <span class="product-price">$@_product.SalePrice</span>
                            <span class="text-muted text-decoration-line-through">$@_product.Price</span>
                        }
                        else
                        {
                            <span class="product-price">$@_product.Price</span>
                        }
                    </div>
                    <!-- SHIPPING -->
                    <div class="product-shipping">
                        <small class="@GetDeliveryEstimateColor(_product)">
                            @GetDeliveryEstimateText( _product )
                        </small>
                        <button class="btn btn-link btn-icon">
                            <i class="fa fa-location-dot ms-1"></i>
                            &nbsp;Delivery To: @GetDeliveryToText()
                        </button>
                    </div>
                </div>
                
                <!-- CART -->
                <div class="product-cart">
                    <!-- ADD -->
                    @if (_product.IsInStock)
                    {
                        <button class="btn btn-primary btn-icon w-50">
                            <i class="fa fa-shopping-cart me-2"></i>
                            <small>Add To Cart</small>
                        </button>
                    }
                    else
                    {
                        <button disabled class="btn btn-primary btn-icon w-50">
                            <i class="fa fa-x me-2"></i>
                            <small>Out of Stock</small>
                        </button>
                    }
                    <!-- QUANTITY DROPDOWN -->
                    <div class="dropdown w-50">
                        <!-- DROPDOWN TOGGLE -->
                        <button class="btn btn-icon btn-secondary dropdown-toggle w-100" type="button" id="quantity" data-bs-toggle="dropdown" aria-expanded="false">
                            Quantity @_selectedQuantity
                        </button>
                        <!-- DROPDOWN LIST -->
                        <ul class="dropdown-menu" aria-labelledby="quantity">
                            @foreach ( int quantity in Quantities )
                            {
                                <li>
                                    <button class="dropdown-item" type="button" @onclick="() => OnClickQuantity( quantity )">
                                        @quantity
                                    </button>
                                </li>
                            }
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- DESCRIPTION -->
        <div class="product-description mb-3">
            <p>@_product.Description</p>
        </div>
        
        <!-- XML -->
        <div class="product-xml">
            <table class="table table-bordered">
                <tbody>
                @foreach ( var kvp in _productSpecs )
                {
                    <tr>
                        <th class="bg-white p-3">@kvp.Key</th>
                        <td class="p-3">@kvp.Value</td>
                    </tr>
                }
                </tbody>
            </table>
        </div>
    </div>
}

@code 
{
    [SupplyParameterFromQuery]
    public Guid ProductId { get; set; }
    [SupplyParameterFromQuery]
    public int? PosX { get; set; }
    [SupplyParameterFromQuery]
    public int? PosY { get; set; }

    readonly int[] Quantities = [1, 2, 3, 5, 10];
    int _selectedQuantity = 0;
    
    Product _product = default!;
    bool _productLoaded = false;
    Dictionary<string, string> _productSpecs = [];

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Dictionary<string, object> parameters = new() {
            { "ProductId", ProductId }
        };
        if (PosX is not null && PosY is not null)
        {
            parameters.Add( nameof( PosX ), PosX );
            parameters.Add( nameof( PosY ), PosY );
        }
        var reply = await Http.GetAsync<ProductDto>( Consts.ApiGetDetails, parameters );
        if (!reply)
        {
            PushError( reply, "Failed to get product details." );
            return;
        }

        var cats = Categories.GetCategories();
        var brands = Brands.GetBrands();

        await Task.WhenAll( cats, brands );
        
        if (!cats.Result.Succeeded || !brands.Result.Succeeded)
            return;

        _product = Product.From( reply.Data, cats.Result.Data, brands.Result.Data );
        _productSpecs = ParseXmlToDictionary( _product.Xml );
        _productLoaded = true;
        StateHasChanged();
    }

    void OnClickCategory( Category c )
    {
        Navigation.NavigateTo( $"{Consts.PageProductSearch}?CategoryId={c.Id}", true );
    }
    void OnClickBrand( Brand b )
    {
        Navigation.NavigateTo( $"{Consts.PageProductSearch}?BrandIds={b.Id}", true );
    }
    void OnClickAddress()
    {
        
    }
    void OnChangePosX( ChangeEventArgs args )
    {
        if (!int.TryParse( args.Value?.ToString(), out int result ))
            PosX = null;
        else
            PosX = result;
    }
    void OnChangePosY( ChangeEventArgs args )
    {
        if (!int.TryParse( args.Value?.ToString(), out int result ))
            PosY = null;
        else
            PosY = result;
    }
    void OnClickApplyLocation()
    {
        //OnChangeFilters?.Invoke();
    }
    void OnClickQuantity( int quantity )
    {
        _selectedQuantity = quantity;
    }

    static Dictionary<string, string> ParseXmlToDictionary( string? xmlString )
    {
        if (string.IsNullOrWhiteSpace( xmlString ))
            return [];
        
        var xmlDictionary = new Dictionary<string, string>();
        XDocument xDoc = XDocument.Parse( xmlString );

        foreach ( var element in xDoc.Root?.Elements() ?? [] )
        {
            xmlDictionary[element.Name.LocalName] = element.Value;
        }

        return xmlDictionary;
    }
    static string GetDetailsLink( Product item ) =>
        $"{Consts.PageProductDetails}?ProductId={item.Id}";
    static string GetRatingCss( Product item, int level ) =>
        item.Rating >= level ? "rating-star-full" : "rating-star-empty";
    string GetDeliveryToText() =>
        PosX is null || PosY is null ? "(0 , 0)" : $"({PosX} , {PosY})";
    static string GetDeliveryEstimateText( Product item ) =>
        item.IsInStock ? $"Get within {item.ShippingDays} days." : "Out of stock.";
    static string GetDeliveryEstimateColor( Product item ) =>
        item.IsInStock ? "text-success" : "text-danger";
}