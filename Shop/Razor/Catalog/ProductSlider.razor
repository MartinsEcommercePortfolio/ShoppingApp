@using Shop.Infrastructure.Catalog.Products.Dtos
@using System.Timers
@using Shop.Utilities

<!-- CONTAINER -->
<div class="product-slider-container shadow-sm">
    
    <!-- LEFT BUTTON -->
    <button class="btn btn-outline-secondary product-slider-button" @onclick="OnClickPrevious">❮</button>

    <!-- SLIDER -->
    <div class="product-slider">
        
        <!-- TITLE -->
        <h6 class="product-slider-heading">
            @Title
        </h6>

        <!-- ITEMS -->
        <div class="product-slider-list">
            @foreach ( ProductSummaryDto dto in _showProducts )
            {
                <!-- ITEM -->
                <div class="product-slider-item">

                    <!-- TOP -->
                    <div class="product-slider-item-top">
                        <!-- IMAGE -->
                        <a class="product-slider-image" href="@GetDetailsUrl( dto )">
                            <img src="@dto.Image" alt="@dto.Name"/>
                        </a>

                        <!-- TITLE -->
                        <a class="product-slider-title" href="@GetDetailsUrl( dto )">
                            @dto.Name
                        </a>
                        <hr class="product-slider-divider"/>
                    </div>

                    <!-- BOTTOM -->
                    <div class="product-slider-item-bottom">
                        <!-- RATING -->
                        <div class="rating">
                            @for ( int i = 1; i <= 5; i++ )
                            {
                                <div>
                                    <i class="@Utils.GetRatingCss( dto.Rating, i )"></i>
                                </div>
                            }
                            
                            <a class="rating-count" href="@Consts.GetProductDetailsUrlRatings( dto.Id )">
                                @dto.NumberRatings
                            </a>
                        </div>

                        <!-- PRICING -->
                        <div class="product-slider-pricing">
                            @if (dto.SalePrice > 0)
                            {
                                <span class="product-slider-price">
                                    $@dto.SalePrice
                                </span>
                                <span class="text-muted product-slider-sale-price">
                                    $@dto.Price
                                </span>
                            }
                            else
                            {
                                <span class="product-slider-price">
                                    $@dto.Price
                                </span>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
    
    <!-- RIGHT BUTTON -->
    <button class="btn btn-outline-secondary product-slider-button" @onclick="OnClickNext">❯</button>
</div>

@code
{
    [Parameter] public string Title { get; set; } = string.Empty;
    List<ProductSummaryDto> _products = [];
    List<ProductSummaryDto> _showProducts = [];
    Timer _timer = default!;
    int _currentIndex = 0;
    int? _posX;
    int? _posY;

    public void SetLocation( int? x, int? y )
    {
        _posX = x;
        _posY = y;
        StateHasChanged();
    }
    public void SetProducts( List<ProductSummaryDto> products )
    {
        _products = products;
        _currentIndex = 0;
        UpdateVisibleProducts();
        StateHasChanged();
    }
    void UpdateVisibleProducts()
    {
        List<ProductSummaryDto> newProducts = [];

        for ( int i = _currentIndex; i < _products.Count; i++ )
            newProducts.Add( _products[i] );
        for ( int i = 0; i < _currentIndex; i++ )
            newProducts.Add( _products[i] );
        _showProducts = newProducts;
        StateHasChanged();
    }
    void OnClickNext()
    {
        _currentIndex++;
        if (_currentIndex >= _products.Count)
            _currentIndex = 0;
        UpdateVisibleProducts();
    }
    void OnClickPrevious()
    {
        _currentIndex--;
        if (_currentIndex < 0)
            _currentIndex = _products.Count - 1;
        UpdateVisibleProducts();
    }
    string GetDetailsUrl( ProductSummaryDto p ) =>
        Consts.GetProductDetailsUrl( p.Id );
}