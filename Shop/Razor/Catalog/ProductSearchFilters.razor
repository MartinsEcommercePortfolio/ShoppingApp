@using Shop.Infrastructure.Catalog.Categories
@using Shop.Infrastructure.Catalog.Brands
@using Shop.Infrastructure.Catalog
@using Shop.Infrastructure.Catalog.Brands.Types
@using Shop.Infrastructure.Catalog.Categories.Types
@using Shop.Infrastructure.Catalog.Search.Models

<!-- CONTAINER -->
<div class="search-filters">
    
    <!-- MOBILE HEADER -->
    <div class="search-filters-header-mobile">
        <div class="d-flex flex-row justify-content-between mb-3">
            <!-- TITLE AND CLOSE -->
            <h3 class="text-decoration-underline m-0 mb-lg-3 p-0">Filters</h3>
            <button class="btn btn-close-white ms-3" @onclick="() => ToggleView( false )">
                <i class="fa-solid fa-x"></i>
            </button>
        </div>
        <!-- CLEAR ALL -->
        <button class="btn btn-close-white ms-3 @GetClearAllCss()" @onclick="Clear">
            Clear All
        </button>
    </div>

    <!-- DESKTOP HEADER -->
    <div class="search-filters-header-desktop">
        <h3>Filters</h3>
        <hr/>
        <button class="btn btn-primary ms-3 @GetClearAllCss()" @onclick="Clear">
            Clear All
        </button>
        <hr/>
    </div>

    <!-- CATEGORIES -->
    @if (ShouldShowCategories())
    {
        <div class="product-filters-section d-grid">
            <button class="btn search-filters-list-header" type="button" @onclick="() => ToggleSectionCollapse( SectionCategories )">
                <span>@GetCategoriesTitle()</span>
                <i class="fa @GetCollapseIconCss( SectionCategories )"></i>
            </button>
            <div class="@GetCollapseDisplayCss( SectionCategories )">
                <ul class="search-filters-list">
                    @foreach ( Category c in _parentCategory?.Children ?? [] )
                    {
                        <button class="btn btn-link" @onclick="() => OnClickCategory( c )">@c.Name</button>
                    }
                </ul>
            </div>
        </div>
    }

    <!-- BRANDS -->
    <div class="product-filters-section d-grid">
        <button class="btn search-filters-list-header" type="button" @onclick="() => ToggleSectionCollapse( SectionBrands )">
            <span>Brands</span>
            <i class="fa @GetCollapseIconCss( SectionBrands )"></i>
        </button>
        <div class="@GetCollapseDisplayCss( SectionBrands )">
            <ul class="search-filters-list">
                @foreach ( Brand b in _brands )
                {
                    <button class="btn btn-link text-start" @onclick="() => OnClickBrand( b )">@b.Name</button>
                }
            </ul>
        </div>
    </div>

    <!-- TOGGLES FOR FILTERS -->
    <div class="product-filters-section d-grid">
        <label>
            <input type="checkbox" @onchange="OnChangeIsInStock"/> In Stock
        </label>
        <label>
            <input type="checkbox" @onchange="OnChangeIsFeatured"/> Featured
        </label>
        <label>
            <input type="checkbox" @onchange="OnChangeIsOnSale"/> On Sale
        </label>
    </div>

    <!-- PRICE RANGE SLIDER -->
    <div class="product-filters-section d-grid">
        <label>
            Price Range: @GetPriceRangeLabel()
        </label>
        <input type="range" min="0" max="10000" step="1" @onchange="OnChangeMinPrice"/>
        <input type="range" min="0" max="10000" step="1" @onchange="OnChangeMaxPrice"/>
        <div class="d-flex justify-content-between">
            <input type="number" min="0" max="10000" step="1" @onchange="OnChangeMinPrice" class="form-control"/>
            <input type="number" min="0" max="10000" step="1" @onchange="OnChangeMaxPrice" class="form-control"/>
        </div>
    </div>

</div>

@code {
    const string SectionCategories = "Categories";
    const string SectionBrands = "Brands";
    List<Brand> _brands = [];
    
    bool _altered = false;
    bool _hidden = false;
    Category? _parentCategory = null;
    LocalSearchFilters _filters = LocalSearchFilters.Empty();

    readonly Dictionary<string, bool> _collapsedSections = new Dictionary<string, bool>() {
        { SectionCategories, false },
        { SectionBrands, false }
    };
    readonly HashSet<Guid> _selectedBrands = [];

    public event Func<LocalSearchFilters, Task>? OnChangeFilters;
    public void SetData( Category? category, IEnumerable<Brand> brands )
    {
        Clear();
        _parentCategory = category;
        _brands = brands.ToList();
        StateHasChanged();
    }
    public void ToggleView( bool? shouldShow = null )
    {
        shouldShow ??= !_hidden;
        _hidden = shouldShow.Value;
        Console.WriteLine("_________________________________________________-TOGGLE VIEW");
        StateHasChanged();
    }
    
    string GetDisplayCss() =>
        _hidden ? "d-none" : "d-flex";
    string GetCollapseIconCss( string sectionName ) => 
        _collapsedSections[sectionName] ? "fa-plus" : "fa-minus";
    string GetCollapseDisplayCss( string sectionName ) => 
        _collapsedSections[sectionName] ? "collapse" : "collapse-show";
    string GetClearAllCss() =>
        _altered ? "d-block" : "d-none";
    string GetCategoriesTitle() =>
        _parentCategory?.ParentId is null ? "Categories" : "Sub-Categories";
    string GetPriceRangeLabel() =>
        $"{(_filters.MinPrice.HasValue ? _filters.MinPrice.Value.ToString() : "0")} - {(_filters.MaxPrice.HasValue ? _filters.MaxPrice.Value.ToString() : "Any")}";

    bool ShouldShowCategories() =>
        _parentCategory is null || _parentCategory.Children.Any();

    void Clear()
    {
        _parentCategory = null;
        _selectedBrands.Clear();
        _altered = false;
    }
    void ToggleSectionCollapse( string sectionName )
    {
        if (!_collapsedSections.TryGetValue( sectionName, out bool value ))
        {
            Console.WriteLine( "Invalid Section Name" );
            return;
        }
        bool newValue = !value;
        _collapsedSections[sectionName] = newValue;
    }
    void OnClickCategory( Category category )
    {
        _altered = true;
        _filters = LocalSearchFilters.Empty();
        InvokeChange();
    }
    void OnClickBrand( Brand brand )
    {
        _altered = true;
        _selectedBrands.Add( brand.Id );
    }
    void OnChangeIsInStock( ChangeEventArgs args ) { }
    void OnChangeIsFeatured( ChangeEventArgs args ) { }
    void OnChangeIsOnSale( ChangeEventArgs args ) { }
    void OnChangeMinPrice( ChangeEventArgs args ) { }
    void OnChangeMaxPrice( ChangeEventArgs args ) { }

    void InvokeChange()
    {
        OnChangeFilters?.Invoke( _filters );
    }
}