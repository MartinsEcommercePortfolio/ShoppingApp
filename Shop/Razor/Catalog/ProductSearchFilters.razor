@using Shop.Infrastructure.Catalog.Categories
@using Shop.Infrastructure.Catalog.Brands
@using Shop.Infrastructure.Catalog
@using Shop.Infrastructure.Catalog.Brands.Types
@using Shop.Infrastructure.Catalog.Categories.Types
@using Shop.Infrastructure.Catalog.Search.Models

<!-- CONTAINER -->
<div class="search-filters @GetDisplayCss()">
    <!-- HEADER -->
    <div class="search-filters-top">
        <!-- TITLE AND CLOSE -->
        <div class="search-filters-top-title">
            <h3 class="search-filters-title">Filters</h3>
            <button class="btn btn-icon search-filters-close" @onclick="() => ToggleView( false )">
                <i class="fa-solid fa-x"></i>
            </button>
        </div>
        <!-- CLEAR ALL -->
        <button class="btn btn-primary btn-icon search-filters-btn-main search-filters-clear" @onclick="Clear">
            <i class="fa-solid fa-eraser me-2"></i>
            Clear All
        </button>
    </div>
    
    <!-- TRENDS -->
    <div class="search-filters-section">
        <button class="btn search-filters-header" type="button" @onclick="() => ToggleSectionCollapse( SectionTrends )">
            <span>Trends</span>
            <i class="fa @GetCollapseIconCss( SectionTrends )"></i>
        </button>
        <div class="search-filters-body @GetCollapseDisplayCss( SectionTrends )">
            <label>
                <input type="checkbox" checked="@_initToggleStock" @onchange="OnChangeIsInStock"/> In Stock
            </label>
            <label>
                <input type="checkbox" checked="@_initToggleFeatured" @onchange="OnChangeIsFeatured"/> Featured
            </label>
            <label>
                <input type="checkbox" checked="@_initToggleSale" @onchange="OnChangeIsOnSale"/> On Sale
            </label>
        </div>
    </div>

    <!-- PRICE RANGE -->
    <div class="search-filters-section">
        <button class="btn search-filters-header" type="button" @onclick="() => ToggleSectionCollapse( SectionPricing )">
            <span>Pricing</span>
            <i class="fa @GetCollapseIconCss( SectionPricing )"></i>
        </button>
        <div class="search-filters-body @GetCollapseDisplayCss( SectionPricing ) px-2">
            <div class="d-flex justify-content-between gap-1 mb-2">
                <input type="number" min="0" max="10000" step="1" @onchange="OnChangeMinPrice" class="form-control"/>
                <input type="number" min="0" max="10000" step="1" @onchange="OnChangeMaxPrice" class="form-control"/>
            </div>
            <button class="btn btn-primary btn-icon search-filters-btn-main" @onclick="OnClickApplyPricing">
                <i class="fa-solid fa-circle-check me-2"></i>
                Apply
            </button>
        </div>
    </div>

    <!-- CATEGORIES -->
    <div class="search-filters-section">
        <button class="btn search-filters-header" type="button" @onclick="() => ToggleSectionCollapse( SectionCategories )">
            <span>@GetCategoriesTitle()</span>
            <i class="fa @GetCollapseIconCss( SectionCategories )"></i>
        </button>
        <div class="search-filters-body @GetCollapseDisplayCss( SectionCategories )">
            <ul class="search-filters-list">
                @foreach ( Category c in _categories )
                {
                    <li @key="@c.Id">
                        <button class="btn" @onclick="@(() => OnClickCategory( c ))">@c.Name</button>
                    </li>
                }
            </ul>
        </div>
    </div>

    <!-- BRANDS -->
    <div class="search-filters-section">
        <button class="btn search-filters-header" type="button" @onclick="() => ToggleSectionCollapse( SectionBrands )">
            <span>Brands</span>
            <i class="fa @GetCollapseIconCss( SectionBrands )"></i>
        </button>
        <div class="search-filters-body @GetCollapseDisplayCss( SectionBrands )">
            <ul class="search-filters-list">
                @foreach ( Brand b in _brands )
                {
                    <li>
                        <label>
                            @if (GetCheckedBrand( b ))
                            {
                                <input type="checkbox" checked @onclick="() => OnClickBrand( b )"/>
                                @b.Name
                            }
                            else
                            {
                                <input type="checkbox" @onclick="()=>OnClickBrand(b)"/>
                                @b.Name
                            }
                        </label>
                    </li>
                }
            </ul>
        </div>
    </div>
</div>

@code
{
    const string SectionTrends = "Trends";
    const string SectionPricing = "Pricing";
    const string SectionCategories = "Categories";
    const string SectionBrands = "Brands";
    
    List<Brand> _brands = [];
    List<Category> _categories = [];
    Category? _parentCategory = null;
    
    bool _altered = false;
    bool _shouldShow = true;
    SearchParameters _filters = SearchParameters.Empty();
    Dictionary<Brand, bool> _selectedBrands = [];

    bool _initToggleStock = false;
    bool _initToggleFeatured = false;
    bool _initToggleSale = false;

    readonly Dictionary<string, bool> _collapsedSections = new() {
        { SectionTrends, false },
        { SectionPricing, false },
        { SectionCategories, true },
        { SectionBrands, true }
    };

    public event Action? OnChangeFilters;
    public void SetData( Category? parentCategory, CategoriesCollection categories, IEnumerable<Brand> brands, SearchParameters filters )
    {
        Clear();
        _filters = filters;
        _categories = parentCategory is null 
            ? categories.PrimaryCategories 
            : parentCategory.Children;
        _parentCategory = parentCategory;
        _brands = brands.ToList();
        _selectedBrands = [];
        foreach ( var b in _brands )
        {
            bool state = (filters.BrandIds ?? []).Any( i => i == b.Id );
            _selectedBrands.TryAdd( b, state );
        }
        _initToggleStock = filters.IsInStock is true;
        _initToggleFeatured = filters.IsFeatured is true;
        _initToggleSale = filters.IsOnSale is true;
        StateHasChanged();
    }
    public void ToggleView( bool? shouldShow = null )
    {
        if (shouldShow is null)
            _shouldShow = !_shouldShow;
        else
            _shouldShow = shouldShow.Value;
        StateHasChanged();
    }

    bool ShouldShowCategories() =>
        _parentCategory is null || _parentCategory.Children.Any();
    bool GetCheckedBrand( Brand b )
    {
        return _selectedBrands.TryGetValue( b, out bool brand ) && brand;
    }
    
    string GetDisplayCss() =>
        _shouldShow ? "d-flex" : "d-none";
    string GetCollapseIconCss( string sectionName ) => 
        _collapsedSections[sectionName] ? "fa-plus" : "fa-minus";
    string GetCollapseDisplayCss( string sectionName ) =>
        _collapsedSections[sectionName] ? "d-none" : "d-flex";
    string GetClearAllCss() =>
        _altered ? "d-block" : "d-none";
    string GetCategoriesTitle() =>
        _parentCategory?.ParentId is null ? "Categories" : "Sub-Categories";
    
    void Clear()
    {
        _parentCategory = null;
        _selectedBrands.Clear();
        _altered = false;
    }
    void ToggleSectionCollapse( string sectionName )
    {
        if (!_collapsedSections.TryGetValue( sectionName, out bool value ))
        {
            Console.WriteLine( "Invalid Section Name" );
            return;
        }
        bool newValue = !value;
        _collapsedSections[sectionName] = newValue;
    }
    void OnChangeIsInStock( ChangeEventArgs args )
    {
        if (_altered)
            return;
        _altered = true;
        bool value = (bool) (args.Value ?? false);
        _filters.IsInStock = value ? true : null;
        OnChangeFilters?.Invoke();
    }
    void OnChangeIsFeatured( ChangeEventArgs args )
    {
        if (_altered)
            return;
        _altered = true;
        bool value = (bool) (args.Value ?? false);
        _filters.IsFeatured = value ? true : null;
        OnChangeFilters?.Invoke();
    }
    void OnChangeIsOnSale( ChangeEventArgs args )
    {
        if (_altered)
            return;
        _altered = true;
        bool value = (bool) (args.Value ?? false);
        _filters.IsOnSale = value ? true : null;
        OnChangeFilters?.Invoke();
    }
    void OnChangeMinPrice( ChangeEventArgs args )
    {
        _altered = true;
        if (!int.TryParse( args.Value?.ToString(), out int result ))
            _filters.MinPrice = null;
        else
            _filters.MinPrice = result;
    }
    void OnChangeMaxPrice( ChangeEventArgs args )
    {
        _altered = true;
        if (!int.TryParse( args.Value?.ToString(), out int result ))
            _filters.MaxPrice = null;
        else
            _filters.MaxPrice = result;
    }
    void OnClickApplyPricing()
    {
        OnChangeFilters?.Invoke();
    }
    void OnClickCategory( Category category )
    {
        if (_altered)
            return;
        _altered = true;
        _filters.CategoryId = category.Id;
        OnChangeFilters?.Invoke();
    }
    void OnClickBrand( Brand b )
    {
        if (_altered)
            return;
        _altered = true;
        _filters.BrandIds ??= [];

        if (!_filters.BrandIds.Add( b.Id ))
            _filters.BrandIds.Remove( b.Id );

        OnChangeFilters?.Invoke();
    }
}