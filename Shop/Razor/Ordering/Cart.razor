@page "/cart"
@using Shop.Utilities
@using Shop.Types.Cart
@using Shop.Infrastructure
@using Shop.Types.Products.Dtos
@using Shop.Razor.Catalog
@using Shop.Types.Products
@using Shop.Razor.Shared.Components
@inherits Shop.Razor.Shared.ShopPage

<LoadingPanelPage/>

<!-- CONTAINER -->
<div class="content-container cart-container">
    <!-- ITEMS -->
    <div class="cart-items">
        <div class="cart-items-header">
            <h3 class="mb-0">Shopping Cart</h3>
            <button class="btn btn-outline-primary btn-icon">
                <i class="fa fa-trash me-2"></i>
                Empty Cart
            </button>
        </div>
        @foreach ( var item in _itemsAndSummaries.Keys )
        {
            <ProductCard Product="@ProductModel.From( _itemsAndSummaries[item] )" CardType="@ProductCard.Type.Cart"/>
            <!-- BUTTONS -->
            <div class="cart-item-buttons">
                <!-- QUANTITY -->
                @if (item.Quantity < 10)
                {
                    <!-- SMALL QUANTITY DROPDOWN -->
                    <div class="form-group">
                        <select id="quantitySelect" type="number" class="btn btn-outline-secondary btn-icon form-select h-100 w-100" @onchange="@(async ( e ) => await OnChangeQuantitySmall( item, e ))" value="@item.Quantity">
                            @foreach ( int quantity in ItemQuantityOptions )
                            {
                                <option value="@quantity" selected="@( item.Quantity == quantity )">Qty: @quantity</option>
                            }
                        </select>
                    </div>
                }
                else
                {
                    <!-- LARGE QUANTITY INPUT -->
                    <div class="cart-large-quantity">
                        <input class="form-control" type="number" @onchange="@(( e ) => OnChangeQuantityLarge( item, e ))"/>
                    </div>
                    <!-- SAVE CHANGES -->
                    if (_changedItems.Contains( item ))
                    {
                        <button class="btn btn-primary" @onchange="@(async () => await SaveChanges())">
                            Save Changes
                        </button>
                    }
                }
                <!-- REMOVE -->
                <button class="btn btn-outline-primary btn-icon cart-delete-button" @onclick="@(async () => await OnClickDelete( item ))">
                    <i class="fa fa-trash me-2"></i>
                    <span>Remove</span>
                </button>
            </div>
        }
    </div>

    <div class="cart-checkout">
        <div class="cart-checkout-title">
            <h3 class="mb-0">Summary</h3>
        </div>
        <div class="cart-checkout-section">
            <span>Items:</span>
            <span>$0</span>
        </div>
        <div class="cart-checkout-section">
            <span>Shipping:</span>
            <span>$0</span>
        </div>
        <div class="cart-checkout-section">
            <span>Tax:</span>
            <span>$0</span>
        </div>
        <hr/>
        <div class="cart-checkout-section">
            <span>Total:</span>
            <span>$0</span>
        </div>
        <a class="btn btn-outline-primary btn-icon mt-2" href="@Consts.PageCheckout">
            Checkout
        </a>
    </div>
</div>

@code
{
    [Inject] public CartManager CartManager { get; init; } = default!;

    static readonly int[] ItemQuantityOptions = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
    Dictionary<CartItem, ProductSummaryDto> _itemsAndSummaries = [];
    HashSet<CartItem> _changedItems = [];
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await GetCart();
    }
    
    void OnChangeQuantityLarge( CartItem item, ChangeEventArgs args )
    {
        if (!int.TryParse( args.Value?.ToString(), out int quantity ))
        {
            PushError( $"Failed to update quantity. Invalid quantity arguments." );
            return;
        }
        
        item.Quantity = quantity;
        _changedItems.Add( item );
    }
    async Task OnChangeQuantitySmall( CartItem item, ChangeEventArgs args )
    {
        if (!int.TryParse( args.Value?.ToString(), out int quantity ))
        {
            PushError( $"Failed to update quantity. Invalid quantity arguments." );
            return;
        }
        
        Loader.StartLoadingPage( "Updating cart..." );
        
        item.Quantity = quantity;
        
        var cartReply = await CartManager.Update( item );
        if (!cartReply)
        {
            Loader.StopLoadingPage();
            PushError( $"Failed to update quantity. {cartReply.GetMessage()}" );
            return;
        }

        Loader.StopLoadingPage();
        PushSuccess( "Quantity updated." );
        await GetCart();
    }
    async Task SaveChanges()
    {
        Loader.StartLoadingPage( "Saving changes..." );
        
        var cartReply = await CartManager.UpdateBulk( _changedItems.ToList() );
        if (!cartReply)
        {
            Loader.StopLoadingPage();
            PushError( $"Failed to save changes. {cartReply.GetMessage()}" );
            return;
        }

        Loader.StopLoadingPage();
        PushSuccess( "Changes saved." );
    }
    async Task OnClickDelete( CartItem item )
    {
        Loader.StartLoadingPage( "Removing item..." );
        
        var cartReply = await CartManager.Delete( item );
        if (!cartReply)
        {
            Loader.StopLoadingPage();
            PushError( $"Failed to remove item from cart. {cartReply.GetMessage()}" );
            return;
        }

        Loader.StopLoadingPage();
        PushSuccess( "Item removed." );

        await GetCart();
    }
    async Task OnClickClear()
    {
        Loader.StartLoadingPage( "Clearing cart..." );
        
        var cartReply = await CartManager.Clear();

        Loader.StopLoadingPage();
        
        if (cartReply) PushSuccess( "Cart cleared." );
        else PushError( $"Failed to clear cart. {cartReply.GetMessage()}" );
    }
    async Task OnClickChangeLocation()
    {
        // await get estimates
    }

    async Task GetCart()
    {
        Loader.StartLoadingPage( "Loading cart..." );
        
        // clear
        _itemsAndSummaries = [];
        _changedItems = [];
        
        // get cart
        var cartReply = await CartManager.Get();
        if (!cartReply)
        {
            Loader.StopLoadingPage();
            PushError( $"An error occured while getting cart. {cartReply.GetMessage()}" );
            return;
        }
        
        // get products
        var summary = cartReply.Data;
        var url = $"{Consts.ApiGetProductsByIds}?ProductIds={string.Join( ",", summary.GetIds() )}";
        var productsReply = await Http.GetAsync<List<ProductSummaryDto>>( url );
        if (!productsReply)
        {

            Loader.StopLoadingPage();
            PushWarning( $"Failed to fetch product details. {productsReply.GetMessage()}" );
            return;
        }
        
        // merge data
        List<ProductSummaryDto> dtos = productsReply.Data;
        foreach ( CartItem c in summary.Items )
        {
            var dto = dtos.FirstOrDefault( d => d.Id == c.ProductId );
            _itemsAndSummaries.TryAdd( c, dto );
        }
        
        Loader.StopLoadingPage();
    }
}