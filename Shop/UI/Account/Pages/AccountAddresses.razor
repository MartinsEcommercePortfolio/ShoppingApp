@page "/account/addresses"
@using Shop.Infrastructure.Common.Optionals
@using Shop.UI.Shared.Components
@using Shop.Utilities
@using Shop.Infrastructure.Authentication.Types
@inherits Shop.UI.Account.AccountPageBase
@layout AccountLayout

<PageTitle>Manage Addresses</PageTitle>

<div class="content-container">
    <div class="auth-container" style="max-width: 900px;">
        <!-- EDIT -->
        @if (_isEditing) {
            <div class="d-flex flex-row align-items-center justify-content-between">
                <h3 class="mb-0">@GetEditTitle()</h3>
                <button class="btn btn-secondary btn-icon" @onclick="@OnClickCancelEdit">Cancel<i class="fa fa-window-close ms-2"></i></button>
            </div>
            <hr/>
            <!-- FORM -->
            <EditForm Model="@_editModel" FormName="edit-address" OnValidSubmit="OnClickSave" method="post">
                <DataAnnotationsValidator/>
                <ValidationSummary class="text-danger" role="alert"/>
                <!-- COUNTRY -->
                <div class="form-floating mb-3">
                    <InputText type="text" @bind-Value="@_editModel.Country" id="country" class="form-control" autocomplete="country" aria-required="true" placeholder="Country"/>
                    <label for="country" class="form-label">Country</label>
                    <ValidationMessage For="@(() => _editModel.Country)" class="text-danger"/>
                </div>
                <!-- CITY -->
                <div class="form-floating mb-3">
                    <InputText type="text" @bind-Value="@_editModel.City" id="city" class="form-control" autocomplete="city" aria-required="true" placeholder="City"/>
                    <label for="city" class="form-label">City</label>
                    <ValidationMessage For="@(() => _editModel.Country)" class="text-danger"/>
                </div>
                <!-- GRID X -->
                <div class="form-floating mb-3">
                    <InputNumber TValue="int" type="number" @bind-Value="@_editModel.GridX" id="gridX" class="form-control" autocomplete="gridX" aria-required="true" placeholder="GridX"/>
                    <label for="gridX" class="form-label">GridX</label>
                    <ValidationMessage For="@(() => _editModel.GridX)" class="text-danger"/>
                </div>
                <!-- GRID Y -->
                <div class="form-floating mb-3">
                    <InputNumber TValue="int" type="number" @bind-Value="@_editModel.GridY" id="gridY" class="form-control" autocomplete="gridY" aria-required="true" placeholder="GridY"/>
                    <label for="gridY" class="form-label">GridY</label>
                    <ValidationMessage For="@(() => _editModel.GridX)" class="text-danger"/>
                </div>
                <!-- SUBMIT -->
                <button class="btn btn-primary btn-icon">Save Changes<i class="fa fa-paper-plane ms-2"></i></button>
            </EditForm>
        }
        else {
            <!-- VIEW TOP-->
            <div class="d-flex flex-row align-items-center justify-content-between">
                <!-- TOP LEFT -->
                <h3 class="mb-0">Addresses</h3>
                <!-- TOP RIGHT -->
                <div class="d-flex flex-row align-items-stretch justify-content-between">
                    <!-- ROWS DROPDOWN -->
                    <div class="dropdown me-3 h-100">
                        <button class="btn btn-secondary dropdown-toggle h-100" type="button" id="RowsPerPage" data-bs-toggle="dropdown" aria-expanded="false">
                            Display: @_rowsPerPageSelection
                        </button>
                        <ul class="dropdown-menu" aria-labelledby="RowsPerPage">
                            @for ( int i = 0; i < _rowCounts.Length; i++ ) {
                                int localIndex = i; // Create a local copy of the loop variable because of enumeration
                                <li><button class="dropdown-item" type="button" @onclick="async () => await UpdateRowsPerPage( localIndex )">@_rowCounts[localIndex]</button></li>
                            }
                        </ul>
                    </div>
                    <!-- ADD ADDRESS -->
                    <button class="btn btn-primary btn-icon" @onclick="@OnClickNew">Add Address<i class="fa fa-plus ms-2"></i></button>
                </div>
            </div>
            <hr/>
            
            <!-- VIEW BOTTOM -->
            if (_pagedAddresses.Count < 1) {
                <p>No Addresses Found.</p>
            }
            else {
                <!-- VIEW HEADER -->
                <p class="mb-3 text-muted">@GetViewHeader()</p>
                <hr/>
                <!-- VIEW TABLE -->
                <table class="table">
                    <!-- TABLE HEADER -->
                    <thead>
                    <tr>
                        <th>Country</th>
                        <th>City</th>
                        <th>GridX</th>
                        <th>GridY</th>
                        <th class="text-end">Actions</th>
                    </tr>
                    </thead>
                    <!-- TABLE BODY -->
                    <tbody>
                    @foreach ( AddressModel address in _pagedAddresses ) {
                        <tr>
                            <td>@address.Country</td>
                            <td>@address.City</td>
                            <td>@address.GridX</td>
                            <td>@address.GridY</td>
                            <td class="text-end">
                                <div class="d-flex flex-row align-items-stretch justify-content-end">
                                    <!-- Edit Address -->
                                    <button class="btn btn-primary btn-sm btn-icon me-3" @onclick="() => OnClickEdit( address )">Edit<i class="fa fa-edit ms-2"></i></button>
                                    <!-- Delete Address -->
                                    <button class="btn btn-primary btn-sm btn-icon" @onclick="@(async () => await OnClickDelete( address ))">Delete<i class="fa fa-trash ms-2"></i></button>
                                </div>
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>
            }
            
            <!-- PAGINATION -->
            <PaginationPanel @ref="@_paginationPanel" OnPageChange="@OnPaginationChange"/>
        }
    </div>
</div>

<div class="content-container mt-3">

</div>

@code {
    AddressModel _editModel = new();
    List<AddressModel> _pagedAddresses = [];
    readonly int[] _rowCounts = [5, 10, 20];
    int _rowsPerPageSelection = 5;
    int _currentPage = 1;
    int _totalCount = 0;
    bool _isEditing;
    bool _isNew;
    PaginationPanel _paginationPanel = default!;
    string _authToken = string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        _authToken = await AwaitAccessToken();
        await LoadFreshAddresses();
    }

    async Task GetPagedAddresses( int page )
    {
        StartLoading( "Loading Addresses..." );

        Opt<AddressSearchResponse> result = await TryGetPagedAddresses();

        if (!result.IsOkay) {
            PushError( result, "Failed to get account details." );
            StopLoading();
            return;
        }
        
        UpdateLocalState( result, page );
        StopLoading();
    }
    async Task OnClickSave()
    {
        StartLoading( "Saving Address..." );

        Opt<bool> reply = await TrySaveAddress();

        if (!reply.IsOkay) {
            PushError( reply, "Failed to save address." );
            StopLoading();
            return;
        }

        PushSuccess( "Address Saved." );
        
        if (_isNew)
            await LoadFreshAddresses();
        else
            StopLoading();
    }
    async Task OnClickDelete( AddressModel address )
    {
        StartLoading( "Deleting Address..." );
        
        Opt<bool> reply = await TryDeleteAddress( address );

        if (!reply.IsOkay) {
            PushError( reply, "Failed to delete address." );
            StopLoading();
            return;
        }
        
        PushSuccess( "Address Deleted." );
        await LoadFreshAddresses();
    }

    async Task<Opt<AddressSearchResponse>> TryGetPagedAddresses()
    {
        Dictionary<string, object> parameters = [];
        parameters.Add( "page", _currentPage );
        parameters.Add( "rows", _rowsPerPageSelection );
        return await Http.TryGetRequest<AddressSearchResponse>( Urls.ApiGetAddresses, parameters, _authToken );
    }
    async Task<Opt<bool>> TrySaveAddress() => _isNew
        ? await Http.TryPutRequest<bool>( Urls.ApiAddAddress, _editModel, _authToken )
        : await Http.TryPostRequest<bool>( Urls.ApiUpdateAddress, _editModel, _authToken );
    async Task<Opt<bool>> TryDeleteAddress( AddressModel address ) =>
        await Http.TryPostRequest<bool>( Urls.ApiDeleteAddress, new AddressDeleteRequest( address.Id ), _authToken );
    
    void UpdateLocalState( Opt<AddressSearchResponse> result, int page )
    {
        _pagedAddresses = result.Data.Addresses;
        _totalCount = result.Data.TotalCount;

        int count = result.IsOkay ? result.Data.TotalCount : 0;
        
        _paginationPanel.Set( page, _rowsPerPageSelection, count );

        _isEditing = false;
        _isNew = false;
        StateHasChanged();
    }
    void OnClickNew()
    {
        _editModel = new AddressModel();
        _isEditing = true;
        _isNew = true;
        StateHasChanged();
    }
    void OnClickEdit( AddressModel address )
    {
        _editModel = address;
        _isEditing = true;
        _isNew = false;
        StateHasChanged();
    }
    void OnClickCancelEdit()
    {
        _isEditing = false;
        _isNew = false;
        StateHasChanged();
    }

    async Task LoadFreshAddresses() =>
        await GetPagedAddresses( 0 );
    async Task UpdateRowsPerPage( int rows )
    {
        _rowsPerPageSelection = rows;
        await GetPagedAddresses( 0 );
    }
    async Task OnPaginationChange( int page )
    {
        _currentPage = page;
        await GetPagedAddresses( page );
    }

    string GetEditTitle() =>
        _isNew ? "New Address" : "Edit Address";
    string GetViewHeader() =>
        $"Viewing {Math.Min(_rowsPerPageSelection, _totalCount)} results of {_totalCount} total.";
    
    readonly record struct AddressSearchResponse(
        int TotalCount,
        List<AddressModel> Addresses );
    readonly record struct AddressDeleteRequest(
        Guid AddressId );
    
}