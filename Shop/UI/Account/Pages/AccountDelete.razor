@page "/account/delete"
@using System.ComponentModel.DataAnnotations
@using Shop.Infrastructure.Authentication
@using Shop.Infrastructure.Common.Optionals
@using Shop.Utilities
@inherits Shop.UI.Account.AccountPageBase
@layout AccountLayout

<PageTitle>Delete Account</PageTitle>

<!-- WRAPPERS -->
<div class="content-container">
    <div class="auth-container">
        @if (isWarning) {
            <!-- CONFIRM DELETE -->
            <div class="alert alert-warning p-3" role="alert">
                <!-- MESSAGE -->
                <i class="fa-solid fa-triangle-exclamation fa-4x text-warning auth-icon"></i>
                <p class="mb-3">
                    <strong>Deleting this data will permanently remove your account, and this cannot be recovered.</strong>
                </p>
                <!-- YES -->
                <button class="btn btn-warning btn-icon mx-auto px-3" @onclick="@(async () => await OnConfirmSubmit())"><i class="fa fa-trash me-2"></i>Delete</button>
                <hr/>
                <!-- NO -->
                <button class="btn btn-warning btn-icon mx-auto px-3" @onclick="Cancel"><i class="fa-solid fa-x me-2"></i>Cancel</button>
            </div>
        }
        else {
            <!-- TITLE -->
            <h3>Delete Personal Data</h3>
            <hr/>
            <!-- FORM -->
            <EditForm Model="@request" FormName="delete-user" OnValidSubmit="@(async () => await OnValidSubmitAsync())" method="post">
                <DataAnnotationsValidator/>
                <ValidationSummary class="text-danger" role="alert"/>
                <!-- PASSWORD -->
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="@request.Password" id="password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="Please enter your password."/>
                    <label for="password" class="form-label">Password</label>
                    <ValidationMessage For="@(() => request.Password)" class="text-danger"/>
                </div>
                <!-- SUBMIT -->
                 <button class="btn btn-submit btn-warning btn-icon"><i class="fa fa-trash me-2"></i>Delete Data</button>
            </EditForm>
        }
    </div>
</div>

@code {
    readonly DeleteAccountRequest request = new();
    bool isWarning = false;

    async Task OnValidSubmitAsync()
    {
        await Task.Delay( 1000 ); // protect user from double click second confirm
        isWarning = true;
        StateHasChanged();
    }
    async Task OnConfirmSubmit()
    {
        StartLoading( "Deleting Account..." );
        
        Opt<string> token = await Auth.GetAccessToken();
        if (!token.IsOkay) {
            PushError( "Invalid Credentials" );
            StopLoading();
            return;
        }
        Opt<bool> reply = await Http.TryPostRequest<bool>( Urls.ApiDeleteAccount, request, token.Data );

        if (!reply.IsOkay) {
            PushError( reply, "Failed to delete your account." );
            Cancel();
            StopLoading();
            return;
        }

        await Auth.ClearState();
        StopLoading();
        Navigate( Urls.PageAccountDeleted );
    }
    void Cancel()
    {
        isWarning = false;
        StateHasChanged();
    }

    sealed class DeleteAccountRequest
    {
        [Required, StringLength( 100, ErrorMessage = "The password must be at least 8 and at max 40 characters long.", MinimumLength = 8 ), DataType( DataType.Password ), Display( Name = "New password" )]
        public string Password { get; set; } = string.Empty;
    }
}