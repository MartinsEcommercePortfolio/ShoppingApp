@implements IDisposable
@inject IJSRuntime JsRuntime

@if (mobileView) {
    <h1>MOBILE</h1>
}
else {
    <h1>DESKTOP</h1>
    <div class="container-fluid border-bottom py-3 top-nav background-light">
        <div class="d-flex flex-nowrap align-items-center justify-content-between top-nav-inner">
        </div>

        <div class="d-flex flex-nowrap align-items-center justify-content-between top-nav-inner">
            <div class="d-flex align-items-center justify-content-between gap-3">
                <a class="logo" href="/">
                    <img src="/Images/Logo.svg" alt="Blazor">
                </a>
            </div>
            <div class="d-none d-lg-flex big-searchbar mx-lg-auto">
                <ProductSearchBar></ProductSearchBar>
            </div>
            <div class="d-flex align-items-center justify-content-between gap-3">
                <div class="d-none d-lg-block">
                    <UserButton></UserButton>
                </div>
                <CartCounter></CartCounter>
            </div>
        </div>

        <!-- Second row exclusively for search bar on small screens -->
        <div class="container-fluid d-lg-none mt-3">
            <ProductSearchBar></ProductSearchBar>
        </div>
    </div>
}

@code {
    DotNetObjectReference<MainNavigationTop> dotNetRef = default!;
    int screenWidth;
    int screenHeight;
    bool mobileView = false;

    public void Dispose()
    {
        dotNetRef?.Dispose();
    }
    protected override async Task OnInitializedAsync()
    {
        dotNetRef = DotNetObjectReference.Create( this );
        await JsRuntime.InvokeVoidAsync( "resizeObserverInterop.initialize", dotNetRef );
    }
    [JSInvokable] public void OnResize( int width, int height )
    {
        screenWidth = width;
        screenHeight = height;

        mobileView = screenWidth < 900;
        
        StateHasChanged();
    }
}