@using Shop.Infrastructure.Common
@using Shop.Utilities
@implements IDisposable

<div class="@displayCss">
    @switch ( state ) {
        case LoadingState.Loading:
            <div class="loading-container">
                <div class="loading-circle"></div>
                <p>Loading...</p>
                @if (!string.IsNullOrEmpty( message )) {
                    <p>@message</p>   
                }
            </div>
            break;
        case LoadingState.Redirecting:
            <div class="loading-container">
                <div class="loading-circle"></div>
                <p>Redirecting...</p>
                @if (!string.IsNullOrEmpty( message )) {
                    <p>@message</p>   
                }
            </div>
            break;
        case LoadingState.Ready:
            break;
        default:
            throw new ArgumentOutOfRangeException();
    }
</div>

@code
{
    [Inject] public LoadingService LoadingService { get; set; } = default!;

    public void Dispose()
    {
        LoadingService.OnChange -= OnLoadingStateChanged;
    }
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        LoadingService.OnChange += OnLoadingStateChanged;
    }

    void OnLoadingStateChanged()
    {
        if (!LoadingService.IsLoading) {
            StopLoading();
            return;
        }
        
        StartLoading( LoadingService.Message );
    }

    void StartRedirecting( int seconds, string? m = null )
    {
        redirectSeconds = seconds;
        this.message = m ?? string.Empty;
        displayCss = ShowCss;
        StateHasChanged();
    } 
    void TickRedirect()
    {
        state = LoadingState.Redirecting;
        redirectSeconds--;
        StateHasChanged();
    }
    void StartLoading( string? m = null )
    {
        this.message = m ?? string.Empty;
        state = LoadingState.Loading;
        displayCss = ShowCss;
        StateHasChanged();
    }
    void StopLoading()
    {
        state = LoadingState.Ready;
        displayCss = HideCss;
        StateHasChanged();
    }
    
    LoadingState state = LoadingState.Loading;
    string message = string.Empty;
    int redirectSeconds = 0;
    string displayCss = HideCss;

    const string HideCss = "d-none";
    const string ShowCss = "d-flex";
}