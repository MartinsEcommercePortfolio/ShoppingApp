@using Microsoft.AspNetCore.Components.Authorization
@using Shop.Infrastructure.Catalog
@using Shop.Infrastructure.Common.Optionals
@using System.Security.Claims
@using Shop.Infrastructure.Authentication
@using Shop.Infrastructure.Http
@using Shop.Utilities
@using Shop.UI.Shared.Components
@implements IDisposable

@if ( _show ) {
    <!-- CONTAINER -->
    <div class="nav-sidebar">
        <!-- HEADER -->
        <div class="p-3 bg-dark d-flex align-items-center justify-content-between">
            <div>
                <AuthorizeView>
                    <Authorized>
                        <a class="text-decoration-none link-light fs-5" href="@Urls.PageAccountProfile">
                            <i class="fa fa-user"></i>
                            <span class="ms-2">Welcome, @_userName</span>
                        </a>
                    </Authorized>
                    <NotAuthorized>
                        <a class="text-decoration-none link-light fs-5" href="@Urls.PageLoginOrRegister">
                            <i class="fa fa-user"></i>
                            <span class="ms-2">Hello, Sign In</span>
                        </a>
                    </NotAuthorized>
                </AuthorizeView>
            </div>
            <button class="btn btn-close-white" @onclick="Close">
                <i class="fa-solid fa-x"></i>
            </button>
        </div>

        <!-- NAV -->
        <nav>
            @if (_viewingCategories) {
                <MainNavigationCategories OnExitCallback="ExitCategories" ShowExitButton="@(true)"/>
            }
            else {
                <!-- SHOP -->
                <h4 class="nav-sidebar-header">Shop Products</h4>
                <ul class="nav flex-column">
                    <li class="nav-item">
                        <button class="btn btn-link nav-link" @onclick="@OnClickCategories">
                            <i class="fa-solid fa-list nav-icon"></i><strong>Categories</strong>
                        </button>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#">
                            <i class="fa-solid fa-gift nav-icon"></i><strong>Featured</strong>
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#">
                            <i class="fa-solid fa-dollar-sign nav-icon"></i><strong>On Sale</strong>
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#">
                            <i class="fa-solid fa-shop nav-icon"></i><strong>All Products</strong>
                        </a>
                    </li>
                </ul>
                <!-- ACCOUNT -->
                <h4 class="nav-sidebar-header">Account</h4>
                <ul class="nav flex-column">
                    <AuthorizeView>
                        <Authorized>
                            <AccountMenuOptions/>
                        </Authorized>
                        <NotAuthorized>
                            <li class="nav-item">
                                <a class="nav-link" href="@Urls.PageLoginOrRegister">
                                    <i class="fa fa-user nav-icon"></i><strong>Sign In</strong>
                                </a>
                            </li>
                        </NotAuthorized>
                    </AuthorizeView>
                </ul>
            }
        </nav>
    </div>
}


@code {
    [Inject] public NavigationManager Navigation { get; set; } = default!;
    [Parameter] public MainNavigationTop TopMenu { get; set; } = default!;

    const string DefaultUsername = "Login";

    bool _authenticated = false;
    string _userName = DefaultUsername;
    bool _show = false;
    bool _viewingCategories = false;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        Navigation.LocationChanged += OnPageChanged;
    }
    public void Dispose()
    {
        Navigation.LocationChanged -= OnPageChanged;
    }
    public void OnAccountChange( string? name )
    {
        _userName = name ?? DefaultUsername;
        _authenticated = name is not null;
        StateHasChanged();
    }
    public void Open()
    {
        _show = true;
        StateHasChanged();
    }
    public void Close()
    {
        _show = false;
        StateHasChanged();
    }

    void OnClickCategories()
    {
        // show categories
        _viewingCategories = true;
        StateHasChanged();
    }
    void ExitCategories()
    {
        // hide categories
        _viewingCategories = false;
        StateHasChanged();
    }
    void OnPageChanged( object? obj, LocationChangedEventArgs args )
    {
        Close();
    }
}