@using Microsoft.AspNetCore.Components.Authorization
@using Shop.Infrastructure.Catalog
@using Shop.Infrastructure.Common.Optionals
@using System.Security.Claims
@using Shop.Infrastructure.Authentication
@using Shop.Infrastructure.Http
@using Shop.Utilities
@implements IDisposable

@if ( show ) {
    <!-- CONTAINER -->
    <div class="nav-sidebar">
        <!-- HEADER -->
        <div class="p-3 bg-dark d-flex align-items-center justify-content-between">
            <div>
                <AuthorizeView>
                    <Authorized>
                        <a class="text-decoration-none link-light fs-5" href="@Urls.PageAccountProfile">
                            <i class="oi oi-person"></i>
                            <span class="ms-2">Welcome, @userName</span>
                        </a>
                    </Authorized>
                    <NotAuthorized>
                        <a class="text-decoration-none link-light fs-5" href="@Urls.PageLoginOrRegister">
                            <i class="oi oi-person"></i>
                            <span class="ms-2">Hello, Sign In</span>
                        </a>
                    </NotAuthorized>
                </AuthorizeView>
            </div>
            <button class="btn btn-close-white" @onclick="Close">
                <i class="fa-solid fa-x"></i>
            </button>
        </div>
        <!-- NAV -->
        <nav>
            <!-- FEATURES -->
            <h4 class="nav-sidebar-header">Shop Products</h4>
            <ul class="nav flex-column">
                <li class="nav-item">
                    <a class="nav-link" href="#">All Products</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="#">On Sale</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="#">Featured</a>
                </li>
            </ul>
            <!-- CATEGORIES -->
            <MainNavigationCategories/>
            <!-- ACCOUNT -->
            <h4 class="nav-sidebar-header">Account</h4>
            <ul class="nav flex-column">
                <AuthorizeView>
                    <Authorized>
                        <li class="nav-item">
                            <a class="nav-link" href="@Urls.PageAccountProfile">Profile</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="@Urls.PageOrdersManage">Password</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="@Urls.PageOrdersManage">Addresses</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="@Urls.PageOrdersManage">Orders</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="@Urls.PageLogout">Logout</a>
                        </li>
                    </Authorized>
                    <NotAuthorized>
                        <li class="nav-item">
                            <a class="nav-link" href="@Urls.PageLoginOrRegister">Sign In</a>
                        </li>
                    </NotAuthorized>
                </AuthorizeView>
            </ul>
        </nav>
    </div>
}

@code {
    [Inject] public NavigationManager Navigation { get; set; } = default!;
    [Parameter] public MainNavigationTop TopMenu { get; set; } = default!;

    bool authenticated = false;
    const string DefaultUsername = "Login";
    string userName = DefaultUsername;
    bool show = false;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        Navigation.LocationChanged += OnPageChanged;
    }
    public void Dispose()
    {
        Navigation.LocationChanged -= OnPageChanged;
    }
    public void OnAccountChange( string? name )
    {
        userName = name ?? DefaultUsername;
        authenticated = name is not null;
        StateHasChanged();
    }
    public void Open()
    {
        show = true;   
        StateHasChanged();
    }
    public void Close()
    {
        show = false;
        StateHasChanged();
    }

    void OnPageChanged( object? obj, LocationChangedEventArgs args )
    {
        Close();
    }
}