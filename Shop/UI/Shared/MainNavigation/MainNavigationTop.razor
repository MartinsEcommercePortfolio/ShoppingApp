@using Shop.Utilities
@implements IDisposable
@inject IJSRuntime JsRuntime

@if (mobileView) {
    <!-- MOBILE -->
    <div class="top-nav-mobile">
        <!-- TOP ROW -->
        <div class="top-nav-content content-container top-nav-mobile-top">
            <!-- LOGO -->
            <a class="logo" href="home">
                <img class="top-nav-item p-2" src="/images/logo.svg" alt="Blazor">
            </a>
            <div class="top-nav-mobile-right">
                <button class="btn btn-icon" @onclick="@OnClickAccountButton">
                    <i class="fa-solid fa-user fa-lg"></i>
                </button>
                <button class="btn btn-icon" @onclick="@GoToCart">
                    <i class="fa-solid fa-cart-shopping fa-lg"></i>
                </button>
                <button class="btn btn-icon pe-0" @onclick="@OpenSide">
                    <i class="fa-solid fa-bars fa-lg"></i>
                </button>
            </div>
        </div>

        <!-- BOTTOM ROW -->
        <div class="top-nav-content content-container pb-2">
            <MainNavigationSearchBar/>
        </div>
    </div>

    <MainNavigationSide @ref="sidebar" TopMenu="@this"/>
}
else {
    <!-- UPPER -->
    <div class="top-nav-upper">
        <div class="top-nav-content content-container">
            <!-- TOP LEFT -->
            <nav class="top-nav-upper-left">
                <a href=""><small>Help & Contact</small></a>
                <a href=""><small>Featured Items</small></a>
                <a href=""><small>Top Deals</small></a>
            </nav>
            <!-- TOP RIGHT -->
            <div class="top-nav-upper-right">
                <!-- ACCOUNT -->
                <button class="btn top-nav-button" @onclick="OnClickAccountButton">
                    <div class="btn btn-icon">
                        <i class="fa fa-user"></i>
                    </div>
                    <div class="top-nav-upper-right-label">
                        <span class="d-block"><small>@GetAccountButtonText()</small></span>
                    </div>
                </button>
                <!-- CART -->
                <button class="btn top-nav-button" @onclick="GoToCart">
                    <div class="btn btn-icon">
                        <i class="fa-solid fa-cart-shopping"></i>
                    </div>
                    <div class="d-flex flex-column align-items-start justify-content-end">
                        <span class="d-block"><small>@cartCount</small></span>
                    </div>
                </button>
            </div>
        </div>
    </div>
    <!-- LOWER -->
    <div class="top-nav-lower">
        <div class="top-nav-content content-container">
            <!-- LOGO -->
            <a class="logo" href="home">
                <img class="top-nav-item" src="/images/logo.svg" alt="Blazor">
            </a>
            <!-- CATEGORIES -->
            <div class="btn position-relative mx-2 top-nav-categories-button" @onmouseenter="ShowDesktopCategories" @onmouseleave="HideDesktopCategories">
                <strong>Shop By Category</strong> &#9662
                @if (showDesktopCategories) {
                    <div class="top-nav-categories-wrapper position-absolute">
                        <MainNavigationCategories/>
                    </div>
                }
            </div>
            <!-- SEARCH BAR -->
            <div class="d-flex flex-grow-1 mx-0 top-nav-item">
                <MainNavigationSearchBar/>
            </div>
        </div>
    </div>
}

@code {
    [Inject] public NavigationManager navigation { get; set; } = default!;
    MainNavigationSide? sidebar;

    DotNetObjectReference<MainNavigationTop> dotNetRef = default!;
    int screenWidth;
    int screenHeight;
    bool mobileView = false;
    bool showDesktopCategories = false;

    decimal cartPrice = decimal.Zero;
    int cartCount = 0;

    public void Dispose()
    {
        dotNetRef?.Dispose();
    }
    protected override async Task OnInitializedAsync()
    {
        dotNetRef = DotNetObjectReference.Create( this );
        await JsRuntime.InvokeVoidAsync( "resizeObserverInterop.initialize", dotNetRef );
    }
    [JSInvokable] public void OnResize( int width, int height )
    {
        screenWidth = width;
        screenHeight = height;

        mobileView = screenWidth < 900;

        StateHasChanged();
    }
    void ShowDesktopCategories()
    {
        showDesktopCategories = true;
        StateHasChanged();
    }
    void HideDesktopCategories()
    {
        showDesktopCategories = false;
        StateHasChanged();
    }
    void OnClickAccountButton()
    {
        navigation.NavigateTo( Urls.PageAccountManage, true );
    }
    void GoToCart()
    {
        navigation.NavigateTo( Urls.PageCart, true );
    }
    void OpenSide()
    {
        sidebar?.Open();
    }
    
    string GetAccountButtonText()
    {
        return "Sign In";
    }
}