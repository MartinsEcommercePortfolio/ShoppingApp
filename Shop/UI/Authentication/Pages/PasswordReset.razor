@page "/reset-password"
@using System.ComponentModel.DataAnnotations
@using Shop.Infrastructure.Common.Optionals
@using Shop.UI.Shared
@using Shop.Utilities
@inherits Shop.UI.Authentication.AuthenticationPageBase
@layout MainLayout

<PageTitle>Reset Password</PageTitle>

<!-- WRAPPERS -->
<div class="content-container">
    <div class="auth-container">
        @if (linkError) {
            <!-- LINK ERROR -->
            <!-- MESSAGE -->
            <i class="fa-solid fa-circle-check fa-4x text-danger auth-icon"></i>
            <h3 class="mb-3">Invalid password reset link</h3>
            <p class="mb-3">The reset code is null.</p>
            <p class="mb-3 text-muted">Please try generating another reset link, or contact support.</p>
            <!-- RESEND -->
            <button class="btn btn-info btn-icon" @onclick="GoToResend"><i class="fa fa-repeat me-2"></i>Resend</button>
        }
        else if (resetSuccess) {
            <!-- RESET SUCCESS -->
            <!-- MESSAGE -->
            <i class="fa-solid fa-circle-check fa-4x text-success auth-icon"></i>
            <h3 class="mb-3">Password reset successfully.</h3>
            <p class="mb-3 text-muted">You password has been successfully. Please login.</p>
            <!-- LOGIN -->
            <button class="btn btn-info btn-icon" @onclick="GoToLogin"><i class="fa fa-user me-2"></i>Login</button>
        }
        else {
            <!-- DEFAULT -->
            <!-- TITLE -->
            <h3 class="mb-3">Reset your password</h3>
            <!-- FORM -->
            <EditForm Model="Request" FormName="reset-password" OnValidSubmit="@(async ()=> await OnValidSubmitAsync())" method="post">
                <DataAnnotationsValidator/>
                <ValidationSummary class="text-danger" role="alert"/>
                <!-- CODE -->
                <input type="hidden" name="Input.Code" value="@Request.Code"/>
                <!-- NEW PASSWORD -->
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="@Request.NewPassword" id="password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Please enter your password."/>
                    <label for="password" class="form-label">Password</label>
                    <ValidationMessage For="@(() => Request.NewPassword)" class="text-danger"/>
                </div>
                <!-- CONFIRM PASSWORD -->
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="@Request.ConfirmPassword" id="confirm-password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Please confirm your password."/>
                    <label for="confirm-password" class="form-label">Confirm password</label>
                    <ValidationMessage For="@(() => Request.ConfirmPassword)" class="text-danger"/>
                </div>
                <!-- SUBMIT -->
                <button class="btn btn-submit btn-icon" type="submit"><i class="fa fa-key me-2"></i>Reset</button>
            </EditForm>
        }
    </div>
</div>

@code 
{
    [SupplyParameterFromQuery]
    string? Email { get; } = null;
    [SupplyParameterFromQuery]
    string? Code { get; } = null;
    [SupplyParameterFromForm]
    PasswordResetRequest Request { get; } = new();

    bool linkError = false;
    bool resetSuccess = false;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        
        if (!ValidateUrl( out string email, out string code, out string message )) {
            linkError = true;
            PushError( message );
            StateHasChanged();
            return;
        }

        Request.Email = email;
        Request.Code = code;
    }
    async Task OnValidSubmitAsync()
    {
        StartLoading( "Resetting Password..." );

        Opt<bool> result = await TryResetPassword();

        if (!result.IsOkay) {
            PushError( result, "Failed to reset password." );
            StopLoading();
            return;
        }

        UpdateLocalState();
        StopLoading();
    }
    async Task<Opt<bool>> TryResetPassword() => 
        await Http.TryPostRequest<bool>( Urls.ApiResetPassword, Request );

    bool ValidateUrl( out string email, out string code, out string message )
    {
        email = string.Empty;
        code = string.Empty;
        message = string.Empty;
        
        if (string.IsNullOrWhiteSpace( Email )) {
            message = $"Invalid url, null parameter {nameof(Email)}";
            StateHasChanged();
            return false;
        }

        if (string.IsNullOrWhiteSpace( Email )) {
            message = $"Invalid url, null parameter {nameof( Code )}";
            StateHasChanged();
            return false;
        }
        
        return true;
    }
    void UpdateLocalState()
    {
        resetSuccess = true;
        StateHasChanged();
    }
    void GoToResend() => 
        Navigate( Urls.PageForgotPassword );
    void GoToLogin() => 
        Navigate( Urls.PageLoginOrRegister );

    sealed class PasswordResetRequest
    {
        [Required, EmailAddress]
        public string Email { get; set; } = string.Empty;

        [Required] 
        public string Code { get; set; } = string.Empty;

        [Required, DataType( DataType.Password ), StringLength( 40, ErrorMessage = "The password must be at least {8} and at max {40} characters long.", MinimumLength = 8 )]
        public string NewPassword { get; set; } = string.Empty;

        [Required, DataType( DataType.Password ), Display( Name = "Confirm password" ), Compare( "Password", ErrorMessage = "The password and confirmation password do not match." )]
        public string ConfirmPassword { get; set; } = string.Empty;
    }
}