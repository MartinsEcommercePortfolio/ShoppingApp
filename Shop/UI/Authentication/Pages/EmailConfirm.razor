@page "/confirm-email"
@using Shop.Infrastructure.Common.Optionals
@using Shop.Utilities
@inherits Shop.UI.Authentication.AuthenticationPageBase
@layout AuthenticationLayout

<PageTitle>Confirm Email</PageTitle>

@if (confirmFailed) {
    <h1>Email Confirmation Failed!</h1>
    <h2>Error Details: @apiReply.Message()</h2>
    <p>Please click <button class="btn btn-link" @onclick="GoToResend">here</button> to try sending another confirmation link, or contact support.</p>
}
else if (emailConfirmed) {
    <h1>Email Confirmed!</h1>
    <p>Your account has been verified and you can now <button class="btn btn-link" @onclick="GoToLogin">login normally.</button></p>
}

@code 
{
    [SupplyParameterFromQuery] string? Email { get; set; }
    [SupplyParameterFromQuery] string? Code { get; set; }
    
    bool emailConfirmed = false;
    bool confirmFailed = false;
    Opt<bool> apiReply;
    
    protected override async Task OnParametersSetAsync()
    {
        StartLoading( "Confirming email..." );

        if (!TryValidateLink( out string userId, out string code, out string errorMessage )) {
            PushError( errorMessage );
            StopLoading();
            return;
        }
        
        apiReply = await TryConfirmEmail( Urls.ApiConfirmEmail, userId, code );
        emailConfirmed = apiReply.IsOkay;
        confirmFailed = !emailConfirmed;
        StateHasChanged();
        StopLoading();
    }
    
    async Task<Opt<bool>> TryConfirmEmail( string url, string userId, string code ) =>
        await Http.TryPutRequest<bool>( url, new ConfirmEmailRequest( userId, code ) );
    bool TryValidateLink( out string userId, out string code, out string errorMessage )
    {
        userId = string.Empty;
        code = string.Empty;
        errorMessage = string.Empty;

        if (string.IsNullOrEmpty( Email )) {
            errorMessage = InvalidLinkMessage( nameof( Email ) );
            return false;
        }

        if (string.IsNullOrEmpty( Code )) {
            errorMessage = InvalidLinkMessage( nameof( code ) );
            return false;
        }

        userId = Email;
        code = Code;

        return true;

        static string InvalidLinkMessage( string parameter ) =>
            $"Failed to confirm email address. {parameter} is invalid.";
    }
    void GoToResend() => 
        Navigate( Urls.PageResendConfirm );
    void GoToLogin() => 
        Navigate( Urls.PageLoginOrRegister );
    
    readonly record struct ConfirmEmailRequest(
        string Email,
        string Token );
}