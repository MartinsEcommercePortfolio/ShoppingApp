@page "/login-or-register"
@using System.ComponentModel.DataAnnotations
@using Shop.Infrastructure.Common.Optionals
@using Shop.Infrastructure.Identity
@using Shop.Utilities
@inherits Shop.UI.Authentication.AuthenticationPageBase

<PageTitle>Login Or Register</PageTitle>

@if (registered) {
    <div class="row">
        <div class="col-md-4">
            <h1>Account Registered.</h1>
            <h2>Id: @( registerReply?.Id ?? "No id returned." )</h2>
            <h2>Email: @(registerReply?.Email ?? "No email returned.")</h2>
            <h2>Username: @( registerReply?.Username ?? "No username returned." )</h2>
            <p>A confirmation link has been emailed to @( registerReply?.Email ?? "your email" ). Please verify your email before logging in.</p>
        </div>
    </div>
}
else if (pendingTwoFactor) {
    <h1>Two-factor authentication</h1>
    <hr/>
    <p>Your login is protected by a two-step verification process. Enter your verification code below.</p>
    <div class="row">
        <div class="col-md-4">
            <EditForm Model="@twoFactorRequest" FormName="login-with-2fa" OnValidSubmit="OnValidTwoFactorSubmitAsync" method="post">
                <DataAnnotationsValidator/>
                <ValidationSummary class="text-danger" role="alert"/>
                <div class="form-floating mb-3">
                    <InputText @bind-Value="@twoFactorRequest.Code" id="two-factor-code" class="form-control" autocomplete="off"/>
                    <label for="two-factor-code" class="form-label">Authenticator code</label>
                    <ValidationMessage For="@(() => twoFactorRequest.Code)" class="text-danger"/>
                </div>
                <div>
                    <button type="submit" class="w-100 btn btn-lg btn-primary">Log In</button>
                </div>
            </EditForm>
        </div>
    </div>
    <p>
        Don't have access to your authenticator device? You can
        <button class="btn btn-link" @onclick="GoToRecovery">log in with a recovery code</button>.
    </p>
}
else {
    <div style="max-width: 360px" class="mt-5 mx-auto text-center">
        <img class="mb-4" src="/Images/Logo.svg" alt="blazor" width="72" height="57">

        <EditForm Model="@loginRequest" OnValidSubmit="@(async () => await OnValidLoginSubmitAsync() )">
            <h1 class="h3 mb-3 fw-normal">Please Sign In</h1>
            <DataAnnotationsValidator/>
            <div class="form-floating">
                <InputText type="name" class="form-control" id="emailOrUsername" @bind-Value="@loginRequest.EmailOrUsername">></InputText>
                <label for="emailOrUsername">Email or Username</label>
            </div>
            <div class="form-floating">
                <InputText type="password" class="form-control" id="password" @bind-Value="@loginRequest.Password"></InputText>
                <label for="password">Password</label>
            </div>
            <button class="w-100 btn btn-lg btn-primary" type="submit">Sign in</button>
        </EditForm>
        
        <button class="btn btn-link" @onclick="GoToResend">Resend Confirmation Email</button>
        <button class="btn btn-link" @onclick="GoToForgot">Forgot Password</button>

        <span class="my-5 d-block text-muted">- Or -</span>

        <EditForm Model="@registerRequest" OnValidSubmit="@(async () => await OnValidRegisterSubmitAsync() )">
            <h1 class="h3 mb-3 fw-normal">Register</h1>
            <DataAnnotationsValidator/>
            <ValidationSummary/>
            <div class="form-floating">
                <InputText type="name" class="form-control" id="username" @bind-Value="@registerRequest.Username"></InputText>
                <ValidationMessage For="@(() => registerRequest.Username)"/>
                <label for="emailOrUsername">Username</label>
            </div>
            <div class="form-floating">
                <InputText type="email" class="form-control" id="email" @bind-Value="@registerRequest.Email"></InputText>
                <ValidationMessage For="@(() => registerRequest.Email)"/>
                <label for="email">Email</label>
            </div>
            <div class="form-floating">
                <InputText type="password" class="form-control" id="registerPassword" @bind-Value="@registerRequest.Password"></InputText>
                <ValidationMessage For="@(() => registerRequest.Password)"/>
                <label for="registerPassword">Password</label>
            </div>
            <div class="form-floating">
                <InputText type="password" class="form-control" id="confirmPassword" @bind-Value="@registerRequest.PasswordConfirm"></InputText>
                <ValidationMessage For="@(() => registerRequest.PasswordConfirm)"/>
                <label for="confirmPassword">Confirm Password</label>
            </div>
            <button class="w-100 btn btn-lg btn-primary" type="submit">Register</button>
        </EditForm>
    </div>
}

<div class="row">
    <div class="col-md-4">
        <hr/>
        <h1>Development</h1>
        <hr/>
        <button class="btn-primary" onclick="@(async ()=> await TestRegister())">Test Register</button>
        <button class="btn-primary" onclick="@(async ()=> await TestLogin())">Test Login</button>
    </div>
</div>



@code 
{
    [Inject] public AuthenticationManager AuthenticationManager { get; init; } = default!;
    //[Inject] CartManager CartManager { get; init; } = default!;

    readonly LoginRequest loginRequest = new();
    readonly RegisterRequest registerRequest = new();
    readonly TwoFactorRequest twoFactorRequest = new();

    bool registered = false;
    bool pendingTwoFactor = false;
    RegisterReply? registerReply;

    async Task TestRegister()
    {
        registerRequest.Email = "martygrof3708@gmail.com";
        registerRequest.Username = "MintTree117";
        registerRequest.Password = "Password1?";
        registerRequest.PasswordConfirm = "Password1?";

        await OnValidRegisterSubmitAsync();
    }

    async Task TestLogin()
    {
        loginRequest.EmailOrUsername = "martygrof3708@gmail.com";
        loginRequest.Password = "Password1?";

        await OnValidLoginSubmitAsync();
    }

    async Task OnValidLoginSubmitAsync()
    {
        StartLoading( "Logging In..." );
        
        Opt<LoginReply> loginResult = await TryLogin();

        if (!loginResult.IsOkay) {
            PushError( loginResult, "Failed to login." );
            StopLoading();
            return;
        }

        if (loginResult.Data.IsPending2FA) {
            pendingTwoFactor = true;
            StateHasChanged();
            StopLoading();
            return;
        }

        Opt<bool> updateResult = await TryUpdateLocalState( loginResult );
        
        if (!updateResult.IsOkay) {
            PushError( updateResult, "Failed to save login." );
            StopLoading();
            return;
        }

        //await CartManager.GetCart( reply.Data.Token );

        StartLoading( "Login Success! Redirecting..." );
        GoHome();
    }
    async Task OnValidTwoFactorSubmitAsync()
    {
        StartLoading( "Verifying Two Factor..." );
        
        twoFactorRequest.Email = loginRequest.EmailOrUsername;

        Opt<TwoFactorReply> result = await TryTwoFactorLogin();

        if (!result.IsOkay) {
            PushError( result, "Two factor authorization failed!" );
            StopLoading();
            return;
        }

        Opt<bool> updateResult = await TryUpdateLocalState( result );

        if (!updateResult.IsOkay) {
            PushError( result, "Two factor authorization succeeded on the server, but failed to save locally!" );
            StopLoading();
            return;
        }
        
        //await CartManager.GetCart( reply.Data.Token );

        StartLoading( "Two Factor Success! Redirecting..." );
        GoHome();
    }
    async Task OnValidRegisterSubmitAsync()
    {
        Console.WriteLine( "Hello" );
        
        StartLoading( "Registering..." );

        Console.WriteLine( "Hello" );
        
        Opt<RegisterReply> reply = await TryRegister();

        if (!reply.IsOkay) {
            PushError( reply, "Failed to register account." );
            Console.WriteLine( reply.Message() );
            StopLoading();
            return;
        }

        registered = true;
        registerReply = reply.Data;
        StateHasChanged();
        StopLoading();
    }
    
    async Task<Opt<LoginReply>> TryLogin() => 
        await Http.TryPostRequest<LoginReply>( Urls.ApiLogin, loginRequest );
    async Task<Opt<bool>> TryUpdateLocalState( Opt<LoginReply> loginResult ) => 
        await AuthenticationManager.SetAuthenticationStateAsync( loginResult.Data.AccessToken, loginResult.Data.RefreshToken );
    async Task<Opt<TwoFactorReply>> TryTwoFactorLogin() => 
        await Http.TryPostRequest<TwoFactorReply>( Urls.ApiTwoFactor, twoFactorRequest );
    async Task<Opt<bool>> TryUpdateLocalState( Opt<TwoFactorReply> loginResult ) => 
        await AuthenticationManager.SetAuthenticationStateAsync( loginResult.Data.AccessToken, loginResult.Data.RefreshToken );
    async Task<Opt<RegisterReply>> TryRegister() => 
        await Http.TryPostRequest<RegisterReply>( Urls.ApiRegister, registerRequest );
    
    void GoToRecovery() => 
        Navigate( Urls.PageLoginWithRecovery );
    void GoToResend() => 
        Navigate( Urls.PageResendConfirm );
    void GoToForgot() => 
        Navigate( Urls.PageForgotPassword );

    sealed class LoginRequest
    {
        [Required( ErrorMessage = "Email or Username is required." )]
        public string EmailOrUsername { get; set; } = string.Empty;

        [Required( ErrorMessage = "Password is required." )]
        public string Password { get; set; } = string.Empty;
    }
    sealed class TwoFactorRequest
    {
        [Required] public string Email { get; set; } = string.Empty;
        
        [Required, DataType( DataType.Text ), Display( Name = "Authenticator code" ), StringLength( 40, ErrorMessage = "The two factor code must be at least 6 and at max 40 characters long.", MinimumLength = 6 )]
        public string Code { get; set; } = string.Empty;
    }
    sealed class RegisterRequest
    {
        [Required( ErrorMessage = "Email is required." ), EmailAddress( ErrorMessage = "Invalid email address." )] 
        public string Email { get; set; } = string.Empty;

        [Required( ErrorMessage = "Username is required." )]
        public string Username { get; set; } = string.Empty;

        [Required( ErrorMessage = "Password is required." ), MinLength( 8, ErrorMessage = "Password must be at least 8 characters." )] 
        public string Password { get; set; } = string.Empty;

        [Compare( "Password", ErrorMessage = "Passwords do not match." )]
        public string PasswordConfirm { get; set; } = string.Empty;
    }
    
    sealed record LoginReply(
        string? AccessToken,
        string? RefreshToken,
        bool IsPending2FA );
    readonly record struct TwoFactorReply(
        string AccessToken,
        string RefreshToken );
    sealed record RegisterReply(
        string Id,
        string Email,
        string Username );
}